# WT is known to use a non-standard thread model that is incompatible with TSAN
# and causes false positives.
src:src/third_party/wiredtiger/*


# Death test signal reports cause test failures because the report can't be
# parsed as JSON. Suppress those messages specifically.
signal:src/mongo/unittest/death_test.cpp

# WiredTiger is known to cause false positives for data races because it uses a
# nonstandard thread model that TSAN doesn't know how to deal with. We have
# already denylisted WiredTiger in TSAN, but that only affects threads created
# within the WiredTiger source. For threads that call *into* WiredTiger, we
# need to add suppressions so we still get any potential failures from
# elsewhere.
#
# This is a temporary addition for now because it's possible that these are
# real positives that we need to do something with. However, because we know
# that false positives are more likely, we're deferring them until we have
# fixed the ones we know are real.
# TODO: https://jira.mongodb.org/browse/SERVER-48599
race:src/third_party/wiredtiger/*

# These functions call malloc() down the line while inside a signal handler.
# Since we've never had problems with any of the allocators we use, and since
# the process is going to exit in actual practice (unlike in some of our tests),
# we are taking the calculated risk to allow AS-unsafe calls in our signal
# handlers.
signal:abruptQuitAction
signal:abruptQuitWithAddrSignal
signal:StackTraceSigAltStackTest::tryHandler

# Don't UBSAN most of third_party, but do ubsan WT
src:src/third_party/IntelRDFPMathLib20U1/*
src:src/third_party/asio-*/*
src:src/third_party/boost-*/*
src:src/third_party/gperftools-*/*
src:src/third_party/icu4c-*/*
src:src/third_party/libstemmer_c/*
src:src/third_party/mozjs-*/*
src:src/third_party/murmurhash3/*
src:src/third_party/pcre-*/*
src:src/third_party/s2/*
src:src/third_party/snappy-*/*
src:src/third_party/tz/*
src:src/third_party/unicode-*/*
src:src/third_party/yaml-cpp-*/*
src:src/third_party/zlib-*/*

# See SERVER-29505.
src:src/third_party/timelib-*/*

# Denylisting these functions due to a bug in libstdc++:
# http://stackoverflow.com/questions/30122500/is-this-code-really-undefined-as-clang-seems-to-indicate
fun:_ZStaNRSt13_Ios_FmtflagsS_
fun:_ZStanSt13_Ios_FmtflagsS_

# Denylisting these functions due to a bug in libstdc++:
# Maybe https://gcc.gnu.org/bugzilla/show_bug.cgi?id=60734 or similar
fun:_ZNSt8_Rb_tree*_M_get_insert_hint_unique_posESt23*
fun:_ZNSt8_Rb_tree*_M_insert_I*
# Maybe https://gcc.gnu.org/bugzilla/show_bug.cgi?id=63345 or similar
fun:_ZNSt8_Rb_tree*_M_insert_nodeE*

# See https://bugzilla.mozilla.org/show_bug.cgi?id=744965
fun:_ZN7mozilla*NumberEqualsInt32*

{
   Command_Static_Stuff
   Memcheck:Leak
   ...
   fun:_ZNSsC1EPKcRKSaIcE
   ...
}
{
   mongod-writes-uninitialized-data-for-journal
   Memcheck:Param
   write(buf)
   obj:/lib64/libpthread-2.14.90.so
   fun:_ZN5mongo7LogFile17synchronousAppendEPKvm
}
{
   NetworkCounter-hit-method-is-race-prone-by-design
   Helgrind:Race
   fun:_ZN5mongo14NetworkCounter3hitExx
   ...
}
{
   OpCounters-methods-use-race-prone-rarely-macro-to-check-for-integer-overflow-gotCommand
   Helgrind:Race
   fun:_ZN5mongo10OpCounters10gotCommandEv
   ...
}
{
   OpCounters-methods-use-race-prone-rarely-macro-to-check-for-integer-overflow-gotDelete
   Helgrind:Race
   fun:_ZN5mongo10OpCounters9gotDeleteEv
   ...
}
{
   OpCounters-methods-use-race-prone-rarely-macro-to-check-for-integer-overflow-gotGetMore
   Helgrind:Race
   fun:_ZN5mongo10OpCounters10gotGetMoreEv
   ...
}
{
   OpCounters-methods-use-race-prone-rarely-macro-to-check-for-integer-overflow-gotInsert
   Helgrind:Race
   fun:_ZN5mongo10OpCounters9gotInsertEv
   ...
}
{
   OpCounters-methods-use-race-prone-rarely-macro-to-check-for-integer-overflow-gotQuery
   Helgrind:Race
   fun:_ZN5mongo10OpCounters8gotQueryEv
   ...
}
{
   OpCounters-methods-use-race-prone-rarely-macro-to-check-for-integer-overflow-gotUpdate
   Helgrind:Race
   fun:_ZN5mongo10OpCounters9gotUpdateEv
   ...
}

extends: default

rules:
  line-length: disable
  indentation: disable
  document-start: disable
  comments: disable
  comments-indentation: disable
  truthy: disable

ignore: |
  buildscripts/packaging/msi/mongod.yaml


# This file is intended to track tests that should be denylisted from multiversion testing due to
# changes that have not yet been backported to the last-lts or last-continuous development
# branches.
#
# Usage:
# Add the server ticket number and the path to the test file for the test you intend to denylist
# under the appropriate suite. Any test in a (ticket, test_file) pair that appears in this file but
# not in the last-lts or last-continuous branch version of this file indicates that a commit has
# not yet been backported to the last-lts or last-continuous branch and will be excluded from the
# multiversion suite corresponding to the root level suite key.
#
# Example:
# replica_sets_multiversion:
#   - ticket: SERVER-1000
#     test_file: jstests/core/my_test_file.js
#
# The above example will denylist jstests/core/my_test_file.js from the
# 'replica_sets_multiversion_gen' task until this file has been updated with the same
# (ticket, test_file) pair on the last-lts branch.
#

last-continuous:
  # Tests that should be excluded from ALL multiversion suites should be listed here.
  all:
    - ticket: SERVER-56800
      test_file: jstests/sharding/cwwc_conflict_add_shard.js
    - ticket: SERVER-57262
      test_file: jstests/replsets/catchup_takeover_with_higher_config.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_min_fetch_ts_with_txn.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/reshard_collection_joins_existing_operation.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_clones_duplicate_key.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_abort_command.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_clones_initial_data.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_commit.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_collection_cloner_resuming.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/reshard_collection_existing_sk_index_not_duplicated.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_metrics.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_fails_on_nonempty_stash.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_txn_cloner.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/reshard_collection_joins_existing_operation.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_size_estimate.js
    - ticket: SERVER-58898
      test_file: jstests/replsets/write_concern_write_to_local.js
    - ticket: SERVER-56846
      test_file: jstests/sharding/reconfig_fails_no_cwwc_set_sharding.js
    - ticket: SERVER-59057
      test_file: jstests/replsets/rollback_transaction_table.js
    - ticket: SERVER-58353
      test_file: jstests/replsets/tenant_migration_aborted_buildindex.js
    - ticket: SERVER-53335
      test_file: jstests/sharding/query/collation_shard_targeting_hashed_shard_key.js
    - ticket: SERVER-58696
      test_file: jstests/sharding/implicit_default_write_concern_add_shard.js
    - ticket: SERVER-59197
      test_file: jstests/replsets/sessions_collection_reaping.js
    - ticket: SERVER-58203
      test_file: jstests/sharding/query/pipeline_length_limit.js
    - ticket: SERVER-56887
      test_file: jstests/sharding/database_versioning_all_commands.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_recipient_fetches_retryable_writes_oplog_entries.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_recipient_fetches_synthetic_find_and_modify_oplog_entries.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_fetch_committed_transactions_retry.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_retryable_write_retry.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_retryable_write_retry_on_recipient.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_find_and_modify_retry.js
    - ticket: SERVER-51943
      test_file: jstests/replsets/tenant_migration_fetch_committed_transactions_retry.js
    - ticket: SERVER-59023
      test_file: jstests/sharding/resharding_secondary_recovers_temp_ns_metadata.js

  # Tests that should only be excluded from particular suites should be listed under that suite.
  suites:
    change_streams_multiversion_passthrough:

    change_streams_sharded_collections_multiversion_passthrough:

    concurrency_replication_multiversion_passthrough:

    concurrency_sharded_replication_multiversion_passthrough:

    replica_sets_multiversion:
      - ticket: SERVER-58744
        test_file: jstests/replsets/apply_ops_capped_collection.js

    replica_sets_jscore_multiversion_passthrough:

    sharding_jscore_multiversion_passthrough:

    sharded_collections_jscore_multiversion_passthrough:

last-lts:
  # Tests that should be excluded from ALL multiversion suites should be listed here.
  all:
    - ticket: SERVER-49471
      test_file: jstests/replsets/apply_prepare_txn_write_conflict_robustness.js
    - ticket: SERVER-47645
      test_file: jstests/replsets/invalidate_sessions_on_stepdown.js
    - ticket: SERVER-47773
      test_file: jstests/core/geo_near_tailable.js
    - ticket: SERVER-47469
      test_file: jstests/core/apply_ops_system_dot_views.js
    - ticket: SERVER-48614
      test_file: jstests/core/wildcard_index_partial_index.js
    - ticket: SERVER-51120
      test_file: jstests/core/merge_sort_collation.js
    - ticket: SERVER-48525
      test_file: jstests/core/txns/no_writes_to_config_transactions_with_prepared_transaction.js
    - ticket: SERVER-47810
      test_file: jstests/change_streams/report_post_batch_resume_token.js
    - ticket: SERVER-50140
      test_file: jstests/replsets/initial_sync_fails_unclean_restart.js
    - ticket: SERVER-49987
      test_file: jstests/core/hello_response_validation.js
    - ticket: SERVER-49987
      test_file: jstests/replsets/check_replication_hello_response_fields.js
    - ticket: SERVER-50640
      test_file: jstests/core/views/views_all_commands.js
    - ticket: SERVER-56887
      test_file: jstests/sharding/database_versioning_all_commands.js
    - ticket: SERVER-49988
      test_file: jstests/sharding/hello_response_validation.js
    - ticket: SERVER-53335
      test_file: jstests/sharding/query/collation_shard_targeting_hashed_shard_key.js
    - ticket: SERVER-50640
      test_file: jstests/sharding/read_write_concern_defaults_application.js
    - ticket: SERVER-50640
      test_file: jstests/sharding/safe_secondary_reads_drop_recreate.js
    - ticket: SERVER-50640
      test_file: jstests/sharding/safe_secondary_reads_single_migration_suspend_range_deletion.js
    - ticket: SERVER-50640
      test_file: jstests/sharding/safe_secondary_reads_single_migration_waitForDelete.js
    - ticket: SERVER-49991
      test_file: jstests/replsets/get_replication_info_helper.js
    - ticket: SERVER-47469
      test_file: jstests/concurrency/fsm_workloads/view_catalog_direct_system_writes.js
    - ticket: SERVER-49990
      test_file: jstests/replsets/secondaryOk_slaveOk_aliases.js
    - ticket: SERVER-43902
      test_file: jstests/sharding/scaled_collection_stats.js
    - ticket: SERVER-50417
      test_file: jstests/replsets/no_disconnect_on_stepdown.js
    - ticket: SERVER-50417
      test_file: jstests/replsets/not_primary_unacknowledged_write.js
    - ticket: SERVER-50417
      test_file: jstests/replsets/read_operations_during_step_down.js
    - ticket: SERVER-50417
      test_file: jstests/replsets/read_operations_during_step_up.js
    - ticket: SERVER-50320
      test_file: jstests/replsets/change_sync_source_in_initial_sync.js
    - ticket: SERVER-50415
      test_file: jstests/sharding/awaitable_hello_primary_failures.js
    - ticket: SERVER-50420
      test_file: jstests/replsets/server_status_repl_is_writable_primary.js
    - ticket: SERVER-51262
      test_file: jstests/replsets/read_operations_during_rollback.js
    - ticket: SERVER-51262
      test_file: jstests/replsets/transactions_on_secondaries_not_allowed.js
    - ticket: SERVER-43904
      test_file: jstests/replsets/election_handoff_skips_unelectable_nodes.js
    - ticket: SERVER-51259
      test_file: jstests/replsets/awaitable_hello_errors_on_horizon_change.js
    - ticket: SERVER-51259
      test_file: jstests/replsets/awaitable_hello_fcv_change.js
    - ticket: SERVER-51259
      test_file: jstests/replsets/awaitable_hello_metrics_on_state_change.js
    - ticket: SERVER-51259
      test_file: jstests/replsets/awaitable_hello_on_nodes_with_invalid_configs.js
    - ticket: SERVER-51259
      test_file: jstests/replsets/awaitable_hello_stepdown_stepup.js
    - ticket: SERVER-51259
      test_file: jstests/replsets/quiesce_mode.js
    - ticket: SERVER-51259
      test_file: jstests/sharding/mongos_quiesce_mode.js
    - ticket: SERVER-50412
      test_file: jstests/replsets/not_primary_errors_returned_if_client_sends_helloOk.js
    - ticket: SERVER-50412
      test_file: jstests/sharding/mongos_helloOk_protocol.js
    - ticket: SERVER-51049
      test_file: jstests/replsets/node_restarts_no_oplog_entry_at_stable.js
    - ticket: SERVER-50414
      test_file: jstests/replsets/not_primary_errors_returned_during_rollback_if_helloOk.js
    - ticket: SERVER-50769
      test_file: jstests/sharding/change_stream_empty_apply_ops.js
    - ticket: SERVER-52547
      test_file: jstests/core/txns/errors_on_committed_transaction.js
    - ticket: SERVER-53612
      test_file: jstests/replsets/election_handoff_not_immediately_electable.js
    - ticket: SERVER-50486
      test_file: jstests/replsets/dont_refresh_session_prepare_secondary.js
    - ticket: SERVER-53932
      test_file: jstests/replsets/rollback_reconstructs_transactions_prepared_before_stable.js
    - ticket: SERVER-53431
      test_file: jstests/replsets/stepdown_kill_other_ops.js
    - ticket: SERVER-53394
      test_file: jstests/sharding/sharding_task_executor_pool_matching_policy.js
    - ticket: SERVER-53849
      test_file: jstests/core/txns/timestamped_reads_wait_for_prepare_oplog_visibility.js
    - ticket: SERVER-53985
      test_file: jstests/replsets/unconditional_step_down.js
    - ticket: SERVER-54366
      test_file: jstests/replsets/force_shutdown_primary.js
    - ticket: SERVER-52953
      test_file: jstests/core/geo_near_point_query.js
    - ticket: SERVER-48179
      test_file: jstests/replsets/reconfig_removes_node_in_rollback.js
    - ticket: SERVER-56371
      test_file: jstests/sharding/time_zone_info_mongos.js
    - ticket: SERVER-55305
      test_file: jstests/replsets/rollback_with_coalesced_txn_table_updates_during_oplog_application.js
    - ticket: SERVER-55305
      test_file: jstests/replsets/rollback_with_coalesced_txn_table_updates_from_vectored_inserts.js
    - ticket: SERVER-53760
      test_file: jstests/core/sort_spill_estimate_data_size.js
    - ticket: SERVER-56772
      test_file: jstests/concurrency/fsm_workloads/collmod_writeconflict.js
    - ticket: SERVER-55111
      test_file: jstests/sharding/transactions_reject_writes_for_moved_chunks.js
    - ticket: SERVER-59952
      test_file: jstests/sharding/write_transactions_during_migration.js
    - ticket: SERVER-59952
      test_file: jstests/sharding/retryable_writes.js
    - ticket: SERVER-59952
      test_file: jstests/sharding/move_chunk_find_and_modify_with_write_retryability.js
    - ticket: SERVER-57117
      test_file: jstests/sharding/read_pref_with_hedging_mode.js
    - ticket: SERVER-56377
      test_file: jstests/concurrency/fsm_workloads/findAndModify_flip_location.js
    - ticket: SERVER-56518
      test_file: jstests/sharding/txn_writes_during_movechunk.js
    - ticket: SERVER-57476
      test_file: jstests/replsets/assert_on_prepare_conflict_with_hole.js
    - ticket: SERVER-21929
      test_file: jstests/core/null_query_semantics.js
    - ticket: SERVER-21929
      test_file: jstests/core/or_to_in.js
    - ticket: SERVER-21929
      test_file: jstests/aggregation/sources/lookup/lookup_null_semantics.js
    - ticket: SERVER-52906
      test_file: jstests/sharding/prepare_transaction_then_migrate.js
    - ticket: SERVER-52906
      test_file: jstests/sharding/migration_waits_for_majority_commit.js
    - ticket: SERVER-52906
      test_file: jstests/sharding/migration_ignore_interrupts_1.js
    - ticket: SERVER-52906
      test_file: jstests/sharding/movechunk_interrupt_at_primary_stepdown.js
    - ticket: SERVER-52906
      test_file: jstests/sharding/movechunk_parallel.js
    - ticket: SERVER-52906
      test_file: jstests/sharding/txn_writes_during_movechunk.js
    - ticket: SERVER-57772
      test_file: jstests/sharding/rewrite_state_change_errors.js
    - ticket: SERVER-50559
      test_file: jstests/sharding/log_remote_op_wait.js
    - ticket: SERVER-37904
      test_file: jstests/replsets/cluster_chaining_override.js
    - ticket: SERVER-57729
      test_file: jstests/core/timeseries/timeseries_bucket_drop.js
    - ticket: SERVER-56800
      test_file: jstests/sharding/cwwc_conflict_add_shard.js
    - ticket: SERVER-57262
      test_file: jstests/replsets/catchup_takeover_with_higher_config.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_min_fetch_ts_with_txn.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/reshard_collection_joins_existing_operation.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_clones_duplicate_key.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_abort_command.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_clones_initial_data.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_commit.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_collection_cloner_resuming.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/reshard_collection_existing_sk_index_not_duplicated.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_metrics.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_fails_on_nonempty_stash.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_txn_cloner.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/reshard_collection_joins_existing_operation.js
    - ticket: SERVER-57667
      test_file: jstests/sharding/resharding_size_estimate.js
    - ticket: SERVER-58898
      test_file: jstests/replsets/write_concern_write_to_local.js
    - ticket: SERVER-56846
      test_file: jstests/sharding/reconfig_fails_no_cwwc_set_sharding.js
    - ticket: SERVER-59057
      test_file: jstests/replsets/rollback_transaction_table.js
    - ticket: SERVER-58353
      test_file: jstests/replsets/tenant_migration_aborted_buildindex.js
    - ticket: SERVER-58696
      test_file: jstests/sharding/implicit_default_write_concern_add_shard.js
    - ticket: SERVER-59197
      test_file: jstests/replsets/sessions_collection_reaping.js
    - ticket: SERVER-58203
      test_file: jstests/sharding/query/pipeline_length_limit.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_recipient_fetches_retryable_writes_oplog_entries.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_recipient_fetches_synthetic_find_and_modify_oplog_entries.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_fetch_committed_transactions_retry.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_retryable_write_retry.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_retryable_write_retry_on_recipient.js
    - ticket: SERVER-57617
      test_file: jstests/replsets/tenant_migration_find_and_modify_retry.js
    - ticket: SERVER-51943
      test_file: jstests/replsets/tenant_migration_fetch_committed_transactions_retry.js
    - ticket: SERVER-59023
      test_file: jstests/sharding/resharding_secondary_recovers_temp_ns_metadata.js

  # Tests that should only be excluded from particular suites should be listed under that suite.
  suites:
    change_streams_multiversion_passthrough:

    change_streams_sharded_collections_multiversion_passthrough:

    concurrency_replication_multiversion_passthrough:

    concurrency_sharded_replication_multiversion_passthrough:

    replica_sets_multiversion:
    - ticket: SERVER-35649
      test_file: jstests/replsets/disallow_adding_initialized_node1.js

    replica_sets_jscore_multiversion_passthrough:

    sharding_jscore_multiversion_passthrough:

    sharded_collections_jscore_multiversion_passthrough:

# This file is used to exclude suites, tasks or tests from running in the burn_in_test task.
selector:
  js_test:
    # Exclude list of resmoke.py suite names.
    exclude_suites:
    # Exclude list of etc/evergreen.yml task names.
    exclude_tasks:
    # Exclude list of jstests file names.
    exclude_tests:

stepback: true

tasks:
- name: GENERATE_MMS_TESTS
  commands:
  - command: shell.exec
    params:
      shell: bash
      script: |
        set -ex
        git clone --branch ${cloud_branch} --depth 1 git@github.com:${cloud_repo} mms
        cd mms/scripts
        ./init_virtualenv.sh ${workdir} 'no-om'
        VIRTUAL_ENV_DISABLE_PROMPT=true source venv-activate
        generate_cloud_nightly > "${workdir}/cloud_nightly.json"
        cat "${workdir}/cloud_nightly.json"
  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      bucket: mciuploads
      local_file: cloud_nightly.json
      remote_file: cloud-nightly/${task_id}
      content_type: application/json
      display_name: "Generated tasks (cloud_nightly.json)"
      permissions: private
  - command: shell.exec
    params:
      shell: bash
      script: |
        set -ex
        sleep ${compile_wait_duration_seconds}
  - command: generate.tasks
    params:
      files:
        - cloud_nightly.json

buildvariants:
- name: cloud_nightly
  display_name: "Cloud Nightly"
  run_on:
    rhel70-small
  tasks:
    - name: GENERATE_MMS_TESTS

####################################################
#                  YAML Conventions                 #
#####################################################
# Please see our conventions document at
# https://wiki.corp.mongodb.com/pages/viewpage.action?pageId=133273894
# for help navigating this document, or for help with our lint rules.


#####################################################
#               A note on expansions                #
#####################################################

# Expansions usually appear in the form ${key|default}
# If 'key' is found in the executor's map of currently known
# expansions, the corresponding value is used. If the key can
# not be found, the default is used.
#
# Arbitrary expansions can be specified in the YAML configuration
# files in the following places:
# - The 'expansions' field for buildvariants (branch file)
# - The 'expansions' field for distros (distros file)
#
# A number of 'built-in' expansions are also available for use; these include:
# - environment variables available on the host machine
# - 'workdir' (references the executor's work directory).
# - 'task_id' (references the task id of the task the executor is working on).
# - 'build_variant' (references the executing task's buildvariant).
# - 'config_root' (references the root directory for the executor's configuration artifacts).


#####################################################
#          Setup environment in a new task          #
#####################################################

# There are several ways to setup the environment in your task.
#
# 1. If your task depends on 'archive_dist_test'/'archive_dist_test_debug' task you can call the function "do setup"
# - func: "do setup"
# Or alternatively call the functions in the sequence below, if you don't need everything else from "do setup"
# - func: "fetch artifacts" (includes python, shell scripts, jstests etc. from the mongo and enterprise repos)
# - func: "f_expansions_write"
# - func: "kill processes"
# - func: "cleanup environment"
# - func: "set up venv"
#
# 2. If your task does not depend on 'archive_dist_test'/'archive_dist_test_debug' task use the following functions
# call sequence
# - command: manifest.load
# - func: "git get project" (clone the entire mongo and enterprise repos)
# - func: "f_expansions_write"
# - func: "kill processes"
# - func: "cleanup environment"
# - func: "set up venv"


stepback: true
command_type: system
pre_error_fails_task: true
oom_tracker: true


# Files that match an ignore-list pattern will not trigger a build, if they're the only modified
# files in the patch.
ignore:
  - ".*"
  - "!.clang-format"
  - "!.eslintrc.yml"
  - "*.md"
  - "*.rst"
  - "*.txt"
  - "/distsrc/**"
  - "/docs/**"
  - "/etc/*.yml"
  - "!/etc/evergreen.yml"
  - "README"

## Parameters for parameterized builds (see https://github.com/evergreen-ci/evergreen/wiki/Parameterized-Builds)
parameters:
  - key: patch_compile_flags
    description: "Additional SCons flags to be applied during scons compile invocations in this patch"

  - key: future_git_tag
    description: "Future git tag to be added. If empty, we will use the most recent git tag instead."

## Some variables for convenience:
variables:

# Used when the tests it runs depend only on mongod, mongos, the mongo shell and the tools.
- &task_template
  name: template
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --help
      resmoke_jobs_max: 0  # No cap on number of jobs.

- &gen_task_template
  name: gen_task_template
  depends_on:
    - name: build_variant_gen
    - name: archive_dist_test
  commands:
    - func: "generate resmoke tasks"
      vars:
        resmoke_args: --help

- &benchmark_template
  name: benchmark_template
  depends_on:
  - name: compile_benchmarks
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      resmoke_args: --help
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- &jepsen_config_vars
  jepsen_key_time_limit: --key-time-limit 15
  jepsen_protocol_version: --protocol-version 1
  jepsen_read_concern: ""
  jepsen_read_with_find_and_modify: ""
  jepsen_storage_engine: ""
  jepsen_test_name: ""
  # Empirically, we've had greater success in reproducing the issues found in MongoDB versions
  # 3.4.0-rc3 and 3.4.0-rc4 when running Jepsen with at least --time-limit=600.
  jepsen_time_limit: --time-limit 1200
  jepsen_write_concern: ""

# Template for running Jepsen tests
- &run_jepsen_template
  name: run_jepsen_template
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars

- &jstestfuzz_config_vars
  num_files: 15
  num_tasks: 5
  is_jstestfuzz: true
  resmoke_args: --help # resmoke_args needs to be overridden to specify one of the jstestfuzz suites
  resmoke_jobs_max: 1
  should_shuffle: false
  continue_on_failure: false
  # Terminate the function when there has been no output to stdout for 30 minutes. E.g. when something is stuck in an infinite loop.
  # resmoke.py writes the test output to logkeeper and only writes to stdout when starting the next test.
  # resmoke.py not producing output on stdout means that the test is still running and presumably not going to finish.
  # Note that timeout_secs is different from exec_timeout_secs, which applies to a task and times out regardless of whether output has been written to stdout.
  timeout_secs: 1800

# Used for tests that invoke 'resmoke.py --suites=jstestfuzz*'.
- &jstestfuzz_template
  name: jstestfuzz_template
  exec_timeout_secs: 14400 # Time out the task if it runs for more than 4 hours.
  depends_on:
  - build_variant_gen
  - archive_dist_test
  commands:
  - func: "generate resmoke tasks"

# Templates used by powercycle
- &powercycle_remote_credentials
  private_key_file: src/powercycle.pem
  private_key_remote: ${__project_aws_ssh_key_value}

- &libfuzzertests
  name: libfuzzertests!
  execution_tasks:
  - compile_and_archive_libfuzzertests
  - fetch_and_run_libfuzzertests

- &compile_task_group_template
  name: compile_task_group_template
  max_hosts: 1
  tasks: []
  setup_task:
  - func: "f_expansions_write"
  - func: "apply compile expansions"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  teardown_task:
  - func: "f_expansions_write"
  - func: "attach scons logs"
  - func: "attach report"
  - func: "attach artifacts"
  - func: "kill processes"
  - func: "save code coverage data"
  - func: "save mongo coredumps"
  - func: "save failed unittests"
  - func: "save UndoDB recordings"
  - func: "save unstripped dbtest"
  - func: "save hang analyzer debugger files"
  - func: "save disk statistics"
  - func: "save system resource information"
  - func: "save libfuzzertest corpora"
  - func: "remove files"
    vars:
      files: >-
        src/resmoke_error_code
        src/build/scons/config.log
        src/*.gcda.gcov
        src/gcov-intermediate-files.tgz
        src/*.core src/*.mdmp
        mongo-coredumps.tgz
        src/dist-unittests/bin/*
        src/dist-unittests/lib/*
        mongo-unittests.tgz
        src/debugger*.*
        src/mongo-hanganalyzer.tgz
        diskstats.tgz
        system-resource-info.tgz
        ${report_file|src/report.json}
        ${archive_file|src/archive.json}
  setup_group_can_fail_task: true
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  # The python virtual environment is installed in ${workdir}, which is created in
  # "set up venv".
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "get all modified patch files"
  - func: "f_expansions_write"
  - func: "configure evergreen api credentials"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "set up credentials"
  - func: "use WiredTiger develop" # noop if ${use_wt_develop} is not "true"
  - func: "set up win mount script"
  - func: "generate compile expansions"
  - func: "f_expansions_write"
  teardown_group:
  - func: "f_expansions_write"
  - func: "umount shared scons directory"
  - func: "cleanup environment"
  timeout:
  - func: "f_expansions_write"
  - func: "run hang analyzer"
  - func: "wait for resmoke to shutdown"

# Use this template for enterprise Windows testing coverage on non-pushing
# variants
- &enterprise-windows-nopush-template
  name: enterprise-windows-nopush-template
  run_on:
  - windows-vsCurrent-small
  modules:
  - enterprise
  expansions: &enterprise-windows-nopush-expansions-template
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi
    exe: ".exe"
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10
    num_scons_link_jobs_available: 0.5
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    jstestfuzz_num_generated_files: 35
    large_distro_name: windows-vsCurrent-large
    test_flags: --excludeWithAnyTags=incompatible_with_windows_tls
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - windows-vsCurrent-large
  - name: build_variant_gen
  - name: burn_in_tests_gen
  - name: .aggfuzzer .common
  - name: audit
  - name: auth_audit_gen
  - name: buildscripts_test
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.aggregation !.gcm
  - name: external_auth
  - name: external_auth_aws
  - name: external_auth_windows
    distros:
    - windows-64-2016
  - name: .jscore .common !.sharding
  - name: .jstestfuzz .common
  - name: .logical_session_cache
  - name: replica_sets_auth_gen
  - name: sasl
  - name: sharding_auth_gen
  - name: sharding_auth_audit_gen
  - name: snmp

- &stitch_support_task_group_template
  name: stitch_support_task_group_template
  setup_task:
    - func: "apply compile expansions"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
  teardown_task:
  - func: "attach scons logs"
  setup_group_can_fail_task: true
  setup_group:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "kill processes"
    - func: "cleanup environment"
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "get buildnumber"
    - func: "f_expansions_write"
    - func: "set up win mount script"
    - func: "generate compile expansions"
  teardown_group:
    - func: "umount shared scons directory"

# List of all variants that make mongocryptd
# If a variant is listed here and has a push task, mongocryptd is pushed
- mongocryptd_variants: &mongocryptd_variants
  - enterprise-amazon2
  - enterprise-amazon2-arm64
  - enterprise-debian92-64
  - enterprise-debian10-64
  - enterprise-linux-64-amazon-ami
  - enterprise-macos
  - enterprise-rhel-70-64-bit
  - enterprise-rhel-70-64-bit-kitchen-sink
  - enterprise-rhel-70-64-bit-no-libunwind
  - enterprise-rhel-81-ppc64le
  - enterprise-rhel-72-s390x
  - enterprise-rhel-72-s390x-inmem
  - enterprise-rhel-80-64-bit
  - enterprise-rhel-80-64-bit-coverage
  - enterprise-rhel-80-64-bit-inmem
  - enterprise-rhel-80-64-bit-multiversion
  - enterprise-rhel-80-64-bit-suggested
  - enterprise-rhel-82-arm64
  - enterprise-suse12-64
  - enterprise-suse15-64
  - enterprise-ubuntu1804-64
  - enterprise-ubuntu1804-arm64
  - enterprise-ubuntu2004-arm64
  - enterprise-ubuntu2004-64
  - enterprise-windows
  - enterprise-windows-suggested
  - enterprise-windows-debug-unoptimized
  - enterprise-windows-inmem
  - enterprise-windows-required
  - enterprise-windows-wtdevelop
  - ubuntu1804-debug-asan
  - ubuntu1804-debug-ubsan
  - ubuntu1804-debug-aubsan-lite-required
  - ubuntu1804-debug-aubsan-lite_fuzzer


# List of all variants that make mh artifacts.
# If a variant is listed here and has a push task, the mh artifacts are pushed
- mh_variants: &mh_variants
  - enterprise-debian92-64
  - enterprise-macos
  - enterprise-rhel-80-64-bit
  - enterprise-rhel-80-64-bit-dynamic-required
  - enterprise-rhel-70-64-bit
  - enterprise-rhel-82-arm64
  - enterprise-amazon2-arm64
  - enterprise-ubuntu1804-64
  - enterprise-windows
  - enterprise-windows-suggested
  - enterprise-windows-required

# List of all variants that use the packages.tgz
- package_variants: &package_variants
  - amazon
  - enterprise-linux-64-amazon-ami
  - amazon2
  - enterprise-amazon2
  - enterprise-amazon2-arm64
  - debian10
  - enterprise-debian10-64
  - debian92
  - enterprise-debian92-64
  - rhel70
  - rhel76_compile_rhel70
  - enterprise-rhel-70-64-bit
  - rhel-72-s390x
  - enterprise-rhel-81-ppc64le
  - enterprise-rhel-72-s390x
  - ubi8
  - rhel80
  - rhel-82-arm64
  - enterprise-rhel-80-64-bit
  - enterprise-rhel-80-64-bit-coverage
  - enterprise-rhel-80-64-bit-suggested
  - enterprise-rhel-82-arm64
  - suse12
  - enterprise-suse12-64
  - suse15
  - enterprise-suse15-64
  - ubuntu1804-debug-suggested
  - enterprise-ubuntu-dynamic-1804-clang-tidy-required
  - ubuntu1804
  - ubuntu1804-arm64
  - ubuntu2004-arm64
  - ubuntu2004
  - enterprise-ubuntu1804-64
  - enterprise-ubuntu1804-arm64
  - enterprise-ubuntu2004-arm64
  - enterprise-ubuntu2004-64
  - enterprise-windows
  - enterprise-windows-suggested
  - windows


#######################################
#            Functions                #
#######################################

functions:
  "f_expansions_write": &f_expansions_write
    command: expansions.write
    params:
      file: expansions.yml
      redacted: true

  "remove files":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/functions/files_remove.sh"

  "configure evergreen api credentials": &configure_evergreen_api_credentials
    command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/functions/evergreen_api_credentials_configure.sh"

  "configure selected tests credentials": &configure_selected_tests_credentials
    command: subprocess.exec
    type: test
    params:
      binary: bash
      silent: true
      args:
        - "src/evergreen/functions/selected_tests_credentials_configure.sh"
      env:
        project: ${project}
        selected_tests_auth_user: ${selected_tests_auth_user}
        selected_tests_auth_token: ${selected_tests_auth_token}

  "git get project": &git_get_project
    command: git.get_project
    params:
      directory: ${git_project_directory|src}
      revisions: # for each module include revision as <module_name> : ${<module_name>_rev}
        enterprise: ${enterprise_rev}
        wtdevelop: ${wtdevelop_rev}

  # Get get the mongo repo, no modules. Useful for inspecting the commit history with the
  # `git` Python tool.
  "git get project no modules":
    - *f_expansions_write
    - command: git.get_project
      params:
        directory: ${git_project_directory|src}

  "add git tag": &add_git_tag
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/add_git_tag.sh"
      env:
        future_git_tag: ${future_git_tag}

  "git get project and add git tag":
    - *f_expansions_write
    - *git_get_project
    - *add_git_tag

  "fetch artifacts": &fetch_artifacts
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}.tgz
      bucket: mciuploads
      extract_to: src

  "fetch venv": &fetch_venv
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/mongodb-mongo-venv/${build_id}.tgz
      bucket: mciuploads
      # Python venv is not relocatable and should be placed in /data/mci
      extract_to: ".."

  "add symlinks back to venv": &add_symlinks_back_to_venv
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/venv_symlinks_add_back.sh"

  "fetch packages": &fetch_packages
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz
      bucket: mciuploads
      extract_to: src
      build_variants: *package_variants

  "fetch dist tarball": &fetch_dist_tarball
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/dist/mongo-${build_id}.${ext|tgz}
      bucket: mciuploads
      local_file: src/mongo-binaries.tgz

  "fetch binaries": &fetch_binaries
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${mongo_binaries}
      bucket: mciuploads
      local_file: src/mongo-binaries.tgz

  "extract binaries": &extract_binaries
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/binaries_extract.sh"

  "check binary version": &check_binary_version
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/binary_version_check.sh"

  "fetch benchmarks": &fetch_benchmarks
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/benchmarks/${build_id}.tgz
      bucket: mciuploads
      extract_to: src

  "fetch corpus": &fetch_corpus
    command: s3.get
    params:
      aws_key: ${s3_access_key_id}
      aws_secret: ${s3_secret_access_key}
      bucket: fuzzer-artifacts
      extract_to: src/corpora
      remote_file: ${mongo_fuzzer_corpus}

  "fetch legacy corpus": &fetch_legacy_corpus
    command: s3.get
    params:
      aws_key: ${s3_access_key_id}
      aws_secret: ${s3_secret_access_key}
      bucket: fuzzer-artifacts
      # Extract the legacy corpora to the merge directory to synthesize together until we burn in.
      extract_to: src/corpora-merged
      remote_file: ${project}/corpus/mongo-${build_variant}-latest.tgz

  "archive new corpus": &archive_new_corpus
    command: archive.targz_pack
    params:
      target: corpora.tgz
      source_dir: src/corpora-merged
      include:
        - "**"

  "upload new corpus": &upload_new_corpus
    command: s3.put
    params:
      aws_key: ${s3_access_key_id}
      aws_secret: ${s3_secret_access_key}
      bucket: fuzzer-artifacts
      content_type: ${content_type|application/gzip}
      display_name: "Fuzzer Tests Corpus Tar Archive"
      local_file: corpora.${ext|tgz}
      optional: true
      permissions: private
      remote_file: ${mongo_fuzzer_corpus}
      visibility: signed

  "upload new corpus for mciuploads": &upload_new_corpus_mciuploads
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      bucket: mciuploads
      content_type: ${content_type|application/gzip}
      display_name: Input Corpora
      local_file: corpora.${ext|tgz}
      optional: true
      permissions: private
      remote_file: ${mongo_fuzzer_corpus_mciuploads}
      visibility: signed

  "get buildnumber": &get_buildnumber
    command: keyval.inc
    params:
      key: "${build_variant}_master"
      destination: "builder_num"

  "run diskstats": &run_diskstats
    command: subprocess.exec
    params:
      background: true
      system_log: true
      binary: bash
      args:
        - "./src/evergreen/functions/run_diskstats.sh"

  "collect system resource info": &collect_system_resource_info
    command: subprocess.exec
    params:
      background: true
      system_log: true
      binary: bash
      args:
        - "./src/evergreen/functions/system_resource_info_collect.sh"

  # Run a monitor process as a background, system task to periodically
  # display how many threads interesting processes are using.
  "monitor process threads": &monitor_process_threads
    command: subprocess.exec
    params:
      background: true
      system_log: true
      binary: bash
      args:
        - "./src/evergreen/functions/process_threads_monitor.sh"

  "set up credentials": &set_up_credentials
    command: subprocess.exec
    params:
      binary: bash
      silent: true
      args:
        - "./src/evergreen/functions/credentials_setup.sh"

  "set up win mount script":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        silent: true
        args:
          - "./src/evergreen/functions/win_mount_script_setup.sh"

  "set up notary client credentials":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        silent: true
        args:
          - "./src/evergreen/functions/notary_client_credentials_setup.sh"

  "f_remote_credentials_setup_exec": &set_up_remote_credentials
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/remote_credentials_setup.sh"
      env:
        private_key_remote_bash_var: ${private_key_remote}

  "set up remote credentials":
    - *f_expansions_write
    - *set_up_remote_credentials

  "call BF Suggestion service":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        silent: true
        args:
          - "./src/evergreen/functions/bf_suggestion_service_call.sh"

  "upload debugsymbols": &upload_debugsymbols
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongo-debugsymbols.${ext|tgz}
      remote_file: ${mongo_debugsymbols}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}

  "use WiredTiger develop":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/wiredtiger_develop_use.sh"

  "shared scons cache pruning":
    - *f_expansions_write
    - command: subprocess.exec
      type: system
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/shared_scons_cache_pruning.sh"

  "umount shared scons directory":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/shared_scons_directory_umount.sh"

  "get all modified patch files":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/modified_patch_files_get_all.sh"

  # This function should only be called from patch-build-only tasks.
  "get added and modified patch files":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/added_and_modified_patch_files_get.sh"

  "determine resmoke jobs": &determine_resmoke_jobs
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/resmoke_jobs_determine.sh"

  "update resmoke jobs expansions": &update_resmoke_jobs_expansions
    command: expansions.update
    params:
      ignore_missing_file: true
      file: src/resmoke_jobs_expansion.yml

  "determine task timeout": &determine_task_timeout
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/task_timeout_determine.sh"

  "update task timeout expansions": &update_task_timeout_expansions
    command: expansions.update
    params:
      ignore_missing_file: true
      file: src/task_timeout_expansions.yml

  "update task timeout": &update_task_timeout
    command: timeout.update
    params:
      exec_timeout_secs: ${exec_timeout_secs}

  ### Set expansion macros used in each task.
  "set task expansion macros": &set_task_expansion_macros
    command: expansions.update
    params:
      updates:
      - key: mongo_binaries
        value: ${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}
      - key: mongo_cryptd
        value: ${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}
      - key: mongo_cryptd_debugsymbols
        value: ${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}
      - key: mh_archive
        value: ${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}
      - key: mh_debugsymbols
        value: ${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}
      - key: mongo_debugsymbols
        value: ${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}
      - key: mongo_shell
        value: ${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}
      - key: mongo_shell_debugsymbols
        value: ${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}
      - key: mongo_fuzzer_corpus_mciuploads
        value: ${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}
      - key: mongo_fuzzer_corpus
        value: corpora-${project}-${build_variant}.${ext|tgz}
      - key: skip_tests
        value: skip_test-${build_id}

  "set up venv": &set_up_venv
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/venv_setup.sh"
      env:
        pip_dir: ${pip_dir}

  "upload pip requirements": &upload_pip_requirements
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: pip-requirements.txt
      remote_file: ${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt
      bucket: mciuploads
      permissions: public-read
      content_type: atext-plain
      display_name: Pip Requirements

  "send benchmark results":
    command: json.send
    params:
      name: perf
      file: src/perf.json

  "cleanup environment": &cleanup_environment
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/cleanup_environment.sh"

  "kill processes": &kill_processes
    command: subprocess.exec
    params:
      silent: true
      binary: bash
      args:
        - "./src/evergreen/kill_processes.sh"

  "do setup":
  - *f_expansions_write
  - *fetch_artifacts
  - *kill_processes
  - *cleanup_environment
  - *fetch_venv
  - *add_symlinks_back_to_venv
  - *fetch_binaries
  - *extract_binaries
  - *check_binary_version
  - *get_buildnumber
  - *f_expansions_write
  - *set_up_credentials
  - *run_diskstats
  - *monitor_process_threads
  - *collect_system_resource_info

  "do non-compile setup":
  - command: manifest.load
  - *git_get_project
  - *f_expansions_write
  - *add_git_tag
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - *upload_pip_requirements
  - *get_buildnumber
  - *f_expansions_write
  - *set_up_credentials

  "do benchmark setup":
  - command: manifest.load
  - *git_get_project
  - *f_expansions_write
  - *add_git_tag
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - *upload_pip_requirements
  - *get_buildnumber
  - *f_expansions_write
  - *set_up_credentials
  - *fetch_benchmarks

  "f_multiversion_setup_exec": &do_multiversion_setup
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/multiversion_setup.sh"

  "do multiversion setup":
    - *f_expansions_write
    - *do_multiversion_setup

  # Used by generator
  "get compiled binaries":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/compiled_binaries_get.sh"

  "generate powercycle tasks":
    - command: manifest.load
    - *git_get_project
    - *f_expansions_write
    - *add_git_tag
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - *upload_pip_requirements

    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_tasks_generate.sh"

    - command: archive.targz_pack
      params:
        target: powercycle_tasks_config.tgz
        source_dir: "./"
        include:
          - "powercycle_tasks.json"

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: powercycle_tasks_config.tgz
        remote_file: ${project}/${build_variant}/${revision}/powercycle_tasks/${task_name}-${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: Generated Task Config - Execution ${execution}

    - command: generate.tasks
      params:
        files:
          - powercycle_tasks.json

  "run powercycle sentinel":
    - command: manifest.load
    - *git_get_project
    - *f_expansions_write
    - *add_git_tag
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - *upload_pip_requirements
    - *configure_evergreen_api_credentials

    - command: subprocess.exec
      type: system
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_sentinel_run.sh"

  "execute resmoke tests": &execute_resmoke_tests
    command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "./src/evergreen/resmoke_tests_execute.sh"

  "retrieve generated test configuration": &retrieve_generated_test_configuration
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      bucket: mciuploads
      remote_file: ${project}/${gen_task_config_location}
      local_file: "generate_tasks_config.tgz"

  "extract generated test configuration": &extract_generated_test_configuration
    command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "./src/evergreen/extract_generated_test_configuration.sh"

  "generate selected tests":
    - *f_expansions_write
    - *configure_evergreen_api_credentials
    - *configure_selected_tests_credentials
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/selected_tests_generate.sh"
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: generate_tasks_config.tgz
        remote_file: ${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Generated Task Config - Execution ${execution}
        optional: true
    - command: generate.tasks
      params:
        optional: true
        files:
          - src/generated_resmoke_config/*.json

  "generate build variant":
    - *f_expansions_write
    - *configure_evergreen_api_credentials
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/generate_build_variant.sh"
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: generate_tasks_config.tgz
        remote_file: ${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Generated Task Config - Execution ${execution}
        optional: true
    - command: generate.tasks
      params:
        optional: true
        files:
          - src/generated_resmoke_config/*.json

  "generate burn in tags":
    - *f_expansions_write
    - *configure_evergreen_api_credentials
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/burn_in_tests_generate.sh"
    - command: archive.targz_pack
      params:
        target: burn_in_tags_gen.tgz
        source_dir: src/generated_burn_in_tags_config
        include:
          - "*"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: burn_in_tags_gen.tgz
        remote_file: ${project}/${build_variant}/${revision}/burn_in_tags_gen/burn_in_tags_gen-${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: Burn_in_tags Task Config - Execution ${execution}
    - command: generate.tasks
      params:
        files:
          - src/generated_burn_in_tags_config/burn_in_tags_gen.json

  "generate resmoke tasks":
    - *fetch_artifacts
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - *fetch_venv
    - *add_symlinks_back_to_venv
    - *f_expansions_write
    - *configure_evergreen_api_credentials

    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/gen_tasks_activate.sh"

  # Used by generator
  "run generated tests":
  - *f_expansions_write
  - *retrieve_generated_test_configuration
  - *extract_generated_test_configuration
  - *f_expansions_write
  - command: expansions.update
    params:
      updates:
      - key: aws_key_remote
        value: ${mongodatafiles_aws_key}
      - key: aws_profile_remote
        value: mongodata_aws
      - key: aws_secret_remote
        value: ${mongodatafiles_aws_secret}
  - *f_expansions_write
  - *set_up_remote_credentials
  - *f_expansions_write
  - *determine_resmoke_jobs
  - *update_resmoke_jobs_expansions
  - *f_expansions_write
  - *configure_evergreen_api_credentials
  - command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/implicit_multiversions_tasks_generate.sh"
  - *execute_resmoke_tests
    # The existence of the "run_tests_infrastructure_failure" file indicates this failure isn't
    # directly actionable. We use type=setup rather than type=system or type=test for this command
    # because we don't intend for any human to look at this failure.
  - command: subprocess.exec
    type: setup
    params:
      binary: bash
      args:
        - "./src/evergreen/check_run_tests_infrastructure_failure.sh"

  "run tests":
    - *f_expansions_write
    - *determine_task_timeout
    - *update_task_timeout_expansions
    - *f_expansions_write
    - *update_task_timeout
    - *f_expansions_write
    - command: expansions.update
      params:
        env:
          CEDAR_USER: ${cedar_user}
          CEDAR_API_KEY: ${cedar_api_key}
        updates:
        - key: aws_key_remote
          value: ${mongodatafiles_aws_key}
        - key: aws_profile_remote
          value: mongodata_aws
        - key: aws_secret_remote
          value: ${mongodatafiles_aws_secret}
    - *f_expansions_write
    - *set_up_remote_credentials
    - *f_expansions_write
    - *determine_resmoke_jobs
    - *update_resmoke_jobs_expansions
    - *f_expansions_write
    - *execute_resmoke_tests
      # The existence of the "run_tests_infrastructure_failure" file indicates this failure isn't
      # directly actionable. We use type=setup rather than type=system or type=test for this command
      # because we don't intend for any human to look at this failure.
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - "./src/evergreen/check_run_tests_infrastructure_failure.sh"

  "scons lint":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/scons_lint.sh"

  "scons compile":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/scons_compile.sh"

  "generate compile expansions":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/functions/compile_expansions_generate.sh"

  "apply compile expansions":
    - command: expansions.update
      params:
        file: src/compile_expansions.yml
    - *f_expansions_write

  "do jepsen setup":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/build_libfaketime.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/install_jepsen.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/nodes.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/move_binaries.sh"

  "run jepsen test":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      timeout_secs: 2700 # Timeout test if there is no output for more than 45 minutes.
      params:
        binary: bash
        args:
          - "./src/evergreen/jepsen_test_run.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/jepsen_test_fail.sh"

  "load aws test credentials":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        silent: true
        args:
          - "./src/evergreen/functions/aws_test_credentials_load.sh"

  "setup jstestfuzz":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/jstestfuzz_setup.sh"

  "lint fuzzer sanity patch":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/lint_fuzzer_sanity_patch.sh"

  "lint fuzzer sanity all":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/lint_fuzzer_sanity_all.sh"

  "update patch failure history":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/update_patch_failure_history.sh"

  # Used by generator
  "run jstestfuzz":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/run_jstestfuzz/clone_repos.sh"
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/jstestfuzz_run.sh"
    - command: archive.targz_pack
      params:
        target: "jstests.tgz"
        source_dir: "src/jstestfuzz"
        include:
          - "out/*.js"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: jstests.tgz
        remote_file: ${project}/${build_variant}/${revision}/jstestfuzz/${task_id}-${execution}.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/gzip
        display_name: Generated Tests - Execution ${execution}

  "run idl tests":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/idl_tests_run.sh"

  "run powercycle test":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_run_test.sh"

    - command: expansions.update
      params:
        ignore_missing_file: true
        file: src/powercycle_exit.yml
    - *f_expansions_write
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_ssh_failure_exit.sh"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_exit.sh"

  "run packager.py":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/packager.py_run.sh"

  "do snmp setup":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/do_snmp_setup.sh"

  "do watchdog setup":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/do_watchdog_setup.sh"

  "run kitchen":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/kitchen_run.sh"

  "set up EC2 instance": &set_up_ec2_instance

    - command: host.create
      params:
        provider: ec2
        distro: ${distro_id}
        timeout_teardown_secs: 604800 # 7 days
        security_group_ids:
        - sg-097bff6dd0d1d31d0

    - command: host.list
      params:
        wait: true
        timeout_seconds: 3000
        num_hosts: 1
        path: src/hosts.yml

    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_check_host.sh"

    - command: expansions.update
      params:
        file: src/powercycle_ip_address.yml

    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_setup_host.sh"

  ### Process & archive remote EC2 artifacts ###
  "save powercycle artifacts": &save_powercycle_artifacts
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/powercycle_save_artifacts.sh"

  "archive remote EC2 artifacts": &archive_remote_ec2_artifacts
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/ec2_artifacts.tgz
      remote_file: ${project}/${build_variant}/${revision}/remote_ec2/remote_ec2_artifacts-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Remote EC2 Artifacts - Execution ${execution}
      optional: true

  "archive remote EC2 monitor files": &archive_remote_ec2_monitor_files
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/ec2_monitor_files.tgz
      remote_file: ${project}/${build_variant}/${revision}/remote_ec2/remote_ec2_monitor-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Remote EC2 Monitor - Execution ${execution}
      optional: true

  "save ec2 task artifacts":
    - *f_expansions_write
    - *save_powercycle_artifacts
    - *archive_remote_ec2_artifacts
    - *archive_remote_ec2_monitor_files

  ### Process & archive local client logs ###
  "tar local client logs": &tar_local_client_logs
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/local_client_logs_tar.sh"

  "archive local client logs": &archive_local_client_logs
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/client-logs.tgz
      remote_file: ${project}/${build_variant}/${revision}/client_logs/mongo-client-logs-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Client logs - Execution ${execution}
      optional: true

  "save local client logs":
    - *f_expansions_write
    - *tar_local_client_logs
    - *archive_local_client_logs

  ### Cleanup after the watchdog FUSE testing ###
  "cleanup FUSE watchdog":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/fuse_watchdog_cleanup.sh"

  ### Process & archive Code Coverage artifacts ###
  "process code coverage data": &process_code_coverage_data
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/code_coverage_data_process.sh"

  "tar code coverage data": &tar_code_coverage_data
    command: archive.targz_pack
    params:
      target: "src/gcov-intermediate-files.tgz"
      source_dir: "src"
      include:
        - "*.gcda.gcov"

  "archive code coverage data": &archive_code_coverage_data
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/gcov-intermediate-files.tgz"
      remote_file: ${project}/${build_variant}/${revision}/gcov/gcov-intermediate-files-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: gcov intermediate files - Execution ${execution}
      optional: true

  "save code coverage data":
    - *f_expansions_write
    - *process_code_coverage_data
    - *tar_code_coverage_data
    - *archive_code_coverage_data

  "tar jepsen logs": &tar_jepsen_logs
    command: archive.targz_pack
    params:
      target: "src/jepsen-mongod-logs.tgz"
      source_dir: "${workdir}/src/jepsen-workdir"
      include:
        - "./**.log"

  "archive jepsen logs": &archive_jepsen_logs
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/jepsen-mongod-logs.tgz
      remote_file: ${project}/${build_variant}/${revision}/jepsen/jepsen-mongod-logs-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Jepsen mongod Logs - ${execution}
      optional: true

  "tar jepsen results": &tar_jepsen_results
    command: archive.targz_pack
    params:
      target: "src/jepsen-results.tgz"
      source_dir: "src/jepsen-mongodb/store"
      include:
        - "./**"

  "archive jepsen results": &archive_jepsen_results
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/jepsen-results.tgz
      remote_file: ${project}/${build_variant}/${revision}/jepsen/jepsen-results-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Jepsen Test Results - ${execution}
      optional: true

  "save jepsen artifacts":
    - *tar_jepsen_logs
    - *archive_jepsen_logs
    - *tar_jepsen_results
    - *archive_jepsen_results

  ### Process & archive mongo coredumps ###
  "gather mongo coredumps": &gather_mongo_coredumps
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/gather_mongo_coredumps.sh"

  "tar mongo coredumps": &tar_mongo_coredumps
    command: archive.targz_pack
    params:
      target: "mongo-coredumps.tgz"
      source_dir: "src"
      include:
        - "./**.core"
        - "./**.mdmp" # Windows: minidumps

  "archive mongo coredumps": &archive_mongo_coredumps
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: mongo-coredumps.tgz
      remote_file: ${project}/${build_variant}/${revision}/coredumps/mongo-coredumps-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Core Dumps - Execution ${execution}
      optional: true

  "save mongo coredumps":
  - *f_expansions_write
  - *gather_mongo_coredumps
  - *tar_mongo_coredumps
  - *archive_mongo_coredumps

  ### Process & archive failed unittest artifacts ###
  "gather failed unittests": &gather_failed_unittests
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/failed_unittests_gather.sh"

  "tar failed unittests": &tar_failed_unittests
    command: archive.targz_pack
    params:
      target: "mongo-unittests.tgz"
      source_dir: "src/dist-unittests"
      include:
        - "**"

  "archive failed unittests": &archive_failed_unittests
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: mongo-unittests.tgz
      remote_file: ${project}/${build_variant}/${revision}/unittests/mongo-unittests-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Unit tests - Execution ${execution}
      optional: true

  "save failed unittests":
  - *f_expansions_write
  - *gather_failed_unittests
  - *tar_failed_unittests
  - *archive_failed_unittests

  "archive dbtest": &archive_dbtest
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: dbtest-binary.tgz
      remote_file: ${project}/${build_variant}/${revision}/dbtest/dbtest-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: dbtest binary - Execution ${execution}
      optional: true

  "archive dbtest debugsymbols": &archive_dbtest_debug
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: dbtest-debugsymbols.tgz
      remote_file: ${project}/${build_variant}/${revision}/dbtest/dbtest-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: dbtest debugsymbols
      optional: true

  "save unstripped dbtest":
  - *archive_dbtest
  - *archive_dbtest_debug

  ### Process & archive artifacts from hung processes ###
  "run hang analyzer":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/hang_analyzer.sh"

  "wait for resmoke to shutdown":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/wait_for_resmoke_to_shutdown.sh"

  "tar hang analyzer debugger files": &tar_hang_analyzer_debugger_files
    command: archive.targz_pack
    params:
      target: "src/mongo-hanganalyzer.tgz"
      source_dir: "src"
      include:
        - "./debugger*.*"

  "archive hang analyzer debugger files": &archive_hang_analyzer_debugger_files
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongo-hanganalyzer.tgz
      remote_file: ${project}/${build_variant}/${revision}/hanganalyzer/mongo-hanganalyzer-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Hang Analyzer Output - Execution ${execution}
      optional: true

  "save hang analyzer debugger files":
  - *tar_hang_analyzer_debugger_files
  - *archive_hang_analyzer_debugger_files

  ### Process & archive disk statistic artifacts ###
  "tar disk statistics": &tar_disk_statistics
    command: archive.targz_pack
    params:
      target: "diskstats.tgz"
      source_dir: "./"
      include:
        - "./mongo-diskstats*"
        - "./mongo-diskstats*.csv"

  "archive disk statistics": &archive_disk_statistics
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: diskstats.tgz
      remote_file: ${project}/${build_variant}/${revision}/diskstats/mongo-diskstats-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Disk Stats - Execution ${execution}
      optional: true

  "save disk statistics":
  - *tar_disk_statistics
  - *archive_disk_statistics

  "save libfuzzertest corpora":
  - *archive_new_corpus
  - *upload_new_corpus
  - *upload_new_corpus_mciuploads

  ### Process & archive system resource artifacts ###
  "tar system resource information": &tar_system_resource_information
    command: archive.targz_pack
    params:
      target: "system-resource-info.tgz"
      source_dir: src
      include:
        - "./system_resource_info*"

  "archive system resource information": &archive_system_resource_information
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: system-resource-info.tgz
      remote_file: ${project}/${build_variant}/${revision}/systemresourceinfo/mongo-system-resource-info-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: System Resource Info - Execution ${execution}
      optional: true

  "save system resource information":
  - *tar_system_resource_information
  - *archive_system_resource_information

  "tar UndoDB recordings": &tar_undodb_recordings
    command: archive.targz_pack
    params:
      target: undodb-recordings.tgz
      source_dir: src
      include:
        - "./*.undo.tokeep"
        - "./*.undo"

  "archive UndoDB recordings": &archive_undodb_recordings
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: undodb-recordings.tgz
      remote_file: ${project}/${build_variant}/${revision}/undo/undodb-recordings-${task_id}-execution-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: UndoDB Recordings - Execution ${execution}
      optional: true

  "save UndoDB recordings":
  - *tar_undodb_recordings
  - *archive_undodb_recordings

  ### Attach report & artifacts ###
  "attach scons logs":
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/build/scons/config.log
        remote_file: ${project}/${build_variant}/${revision}/artifacts/scons-config.log.${build_id}-${task_name}-${execution}
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: SCons configure log

    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/scons_cache.log
        content_type: text/plain
        remote_file: ${project}/${build_variant}/${revision}/artifacts/scons-cache.log.${build_id}-${task_name}.${execution}
        bucket: mciuploads
        permissions: public-read
        display_name: SCons cache debug log

    - *f_expansions_write
    - command: subprocess.exec
      params:
        continue_on_err: true
        binary: bash
        args:
          - "./src/evergreen/scons_splunk.sh"

  "attach report":
    command: attach.results
    params:
      file_location: ${report_file|src/report.json}

  "attach artifacts":
    command: attach.artifacts
    params:
      optional: true
      ignore_artifacts_for_spawn: false
      files:
        - ${archive_file|src/archive.json}

  "attach wiki page":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/wiki_page.sh"
    - command: attach.artifacts
      params:
        files:
          - wiki_page_location.json


# Pre task steps
pre:
  - func: "set task expansion macros"
  - func: "f_expansions_write"

# Post task steps
post:
  - func: "f_expansions_write"
  - func: "attach report"
  - func: "attach artifacts"
  - func: "save ec2 task artifacts"
  - func: "call BF Suggestion service"
  - func: "attach wiki page"
  - func: "kill processes"
  - func: "save local client logs"
  - func: "save code coverage data"
  - func: "save jepsen artifacts"
  - func: "save mongo coredumps"
  - func: "save failed unittests"
  - func: "save hang analyzer debugger files"
  - func: "save disk statistics"
  - func: "save system resource information"
  - func: "save UndoDB recordings"
  - func: "umount shared scons directory"
  - func: "cleanup FUSE watchdog"
  - func: "cleanup environment"

# Timeout steps
timeout:
  - func: "f_expansions_write"
  - func: "run hang analyzer"
  - func: "wait for resmoke to shutdown"


#######################################
#               Tasks                 #
#######################################

tasks:

## compile - build all scons targets except unittests ##
- name: compile_dist_test
  tags: []
  depends_on: []
  commands:
    - func: "scons compile"
      vars:
        targets: >-
          install-dist-test
          ${additional_compile_targets|}
        task_compile_flags: >-
          PREFIX=dist-test

- name: determine_patch_tests
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/gen_patch_test_tags.sh"

- name: archive_dist_test
  tags: []
  depends_on:
    - name: compile_dist_test
  commands:
    - *f_expansions_write
    - func: "scons compile"
      vars:
        targets: >-
          archive-dist-test
        task_compile_flags: >-
          PREFIX=dist-test

    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-binaries.${ext|tgz}
        remote_file: ${mongo_binaries}
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: Binaries

    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/gen_feature_flags.sh"

    - command: archive.targz_pack
      params:
        target: "artifacts.tgz"
        source_dir: "src"
        include:
          - "patch_test_tags.tgz"
          - "./build/**.gcno"
          - "./etc/*san.suppressions"
          - "./etc/backports_required_for_multiversion_tests.yml"
          - "./etc/expansions.default.yml"
          - "./etc/pip/**"
          - "./etc/repo_config.yaml"
          - "./etc/scons/**"
          - "buildscripts/**"
          - "compile_expansions.yml"
          - "all_feature_flags.txt"  # Must correspond to the definition in buildscripts/idl/lib.py.
          - "jstests/**"
          - "library_dependency_graph.json"
          - "patch_files.txt"
          - "evergreen/**"
          - "src/mongo/client/sdam/json_tests/sdam_tests/**"
          - "src/mongo/client/sdam/json_tests/server_selection_tests/**"
          - "src/mongo/db/modules/enterprise/docs/**"
          - "src/mongo/db/modules/enterprise/jstests/**"
          - "src/mongo/db/modules/subscription/jstests/**"
          - "src/mongo/util/options_parser/test_config_files/**"
          - "src/third_party/JSON-Schema-Test-Suite/tests/draft4/**"
          - "src/third_party/mock_ocsp_responder/**"
          - "src/third_party/schemastore.org/**"
        exclude_files:
          - "*_test.pdb"

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: artifacts.tgz
        remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/tar
        display_name: Artifacts

    - command: archive.targz_pack
      params:
        target: "mongodb-mongo-venv.tgz"
        source_dir: ".."
        include:
          - "./mongodb-mongo-venv/**"

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: mongodb-mongo-venv.tgz
        remote_file: ${project}/${build_variant}/${revision}/mongodb-mongo-venv/${build_id}.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/tar
        display_name: Python venv (see included README.txt)

# Dummy task to activate `archive_dist_test_debug` since it can't be activated directly (not a generated task).
- name: activate_archive_dist_test_debug
  tags: []
  depends_on:
    - name: archive_dist_test_debug

- name: archive_dist_test_debug
  tags: []
  depends_on:
    - name: archive_dist_test
  commands:
    - func: "scons compile"
      vars:
        targets: >-
          archive-dist-test-debug
        task_compile_flags: >-
          PREFIX=dist-test

    - func: "upload debugsymbols"

- name: compile_ninja
  tags: []
  commands:
    - func: "scons compile"
      vars:
        generating_for_ninja: true
        task_install_action:
          default
        task_compile_flags: >-
          --ninja
        targets:
          generate-ninja
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/ninja_compile.sh"

- name: compile_ninja_next
  tags: []
  commands:
    - func: "scons compile"
      vars:
        generating_for_ninja: true
        task_install_action:
          default
        task_compile_flags: >-
          --build-tools=next
          --ninja
        targets:
          generate-ninja
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/ninja_compile.sh"

- name: compile_build_tools_next
  tags: []
  commands:
    - func: "scons compile"
      vars:
        task_compile_flags: >-
          --build-tools=next
        targets:
          install-core

- name: libdeps_graph_linting
  tags: []
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/libdeps_setup.sh"

    - func: "scons compile"
      vars:
        task_compile_flags: >-
          --link-model=dynamic
          --build-tools=next
        targets:
          generate-libdeps-graph

    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/libdeps_run.sh"

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/results.txt
        remote_file: ${project}/${build_variant}/${revision}/artifacts/libdeps-results.txt.${build_id}-${task_name}.${execution}
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: Libdeps Linter Results

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/libdeps.graphml.gz
        remote_file: ${project}/${build_variant}/${revision}/artifacts/libdeps.graphml.${build_id}-${task_name}.${execution}.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Libdeps Graph Data

## compile_all - build all scons targets ##
- name: compile_all
  tags: []
  depends_on:
    - name: compile_dist_test
  commands:
    - func: "scons compile"
      vars:
        targets: install-all-meta
        compiling_for_test: true

## clang_tidy - run clang_tidy
- name: clang_tidy
  tags: []
  exec_timeout_secs: 3600 # 1 hour timeout for the task overall
  commands:
    - *f_expansions_write
    - func: "scons compile"
      vars:
        targets: generated-sources compiledb
        compiling_for_test: true
    - command: subprocess.exec
      type: test
      timeout_secs: 3600 # 1 hour timeout for no output
      params:
        binary: bash
        args:
          - "./src/evergreen/run_clang_tidy.sh"

## compile_unittests ##
- &compile_unittests
  name: compile_unittests
  depends_on:
    - name: compile_dist_test
  commands:
    - func: "scons compile"
      vars:
        targets: install-unittests install-unittests-debug
        compiling_for_test: true

## A copy of the compile_unittests task for the recorded unittest taskgroup ##
- <<: *compile_unittests
  name: compile_unittests_for_recorded_unittest

## run_unittests ##
- name: run_unittests
  tags: []
  depends_on:
    - name: compile_unittests
  commands:
    - *f_expansions_write
    - func: "run diskstats"
    - func: "f_expansions_write"
    - func: "monitor process threads"
    - func: "collect system resource info"
    - func: "run tests"
      vars:
        resmoke_args: --suites=unittests

## run_unittests with UndoDB live-record ##
- name: run_unittests_with_recording
  depends_on:
    - name: compile_unittests_for_recorded_unittest
  commands:
    - *f_expansions_write
    - func: "run diskstats"
    - func: "f_expansions_write"
    - func: "monitor process threads"
    - func: "collect system resource info"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/undo_wiki_page.sh"
    - command: attach.artifacts
      params:
        files:
          - undo_wiki_page_location.json
    - func: "run tests"
      vars:
        resmoke_args: --suites=unittests
        record_with: --recordWith /opt/undodb5/bin/live-record
        # Start fewer jobs since there's a constant amount of overhead of starting
        # live-record for each job.
        resmoke_jobs_factor: 0.3


##compile_and_archive_libfuzzertests - build libfuzzertests ##
- name: compile_and_archive_libfuzzertests
  tags: []
  commands:
    - func: "scons compile"
      vars:
        targets: archive-fuzzertests
        compiling_for_test: true
    # Store the fuzzer executable, which we use to generate and run fuzzer inputs.
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/fuzzertests-runtime.tgz"
        remote_file: "${project}/libfuzzer-tests/${build_variant}/${revision}/libfuzzer-tests.tgz"
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/tar
        display_name: "LibFuzzer Tests"

## fetch_and_run_libfuzzertests - get input corpora from s3 and run libfuzzertests ##
- name: fetch_and_run_libfuzzertests
  tags: []
  commands:
    - func: "fetch corpus"
    - func: "fetch legacy corpus"
    - func: "run tests"
      vars:
        resmoke_args: --suites=libfuzzer

- name: server_discovery_and_monitoring_json_test
  tags: []
  commands:
    - func: "scons compile"
      vars:
        targets: install-sdam-json-test
        compiling_for_test: true
    - func: "run tests"
      vars:
        resmoke_args: --suites=sdam_json_test

- name: server_selection_json_test
  tags: []
  commands:
    - func: "scons compile"
      vars:
        targets: install-server-selection-json-test
        compiling_for_test: true
    - func: "run tests"
      vars:
        resmoke_args: --suites=server_selection_json_test

## compile_dbtest ##
- name: compile_dbtest
  tags: []
  depends_on:
    - name: compile_dist_test
  commands:
    - func: "scons compile"
      vars:
        targets: install-dbtest install-dbtest-debug
        compiling_for_test: true

## run_dbtest ##
- name: run_dbtest
  tags: []
  depends_on:
    - name: compile_dbtest
  commands:
    - *f_expansions_write
    - func: "run diskstats"
    - func: "f_expansions_write"
    - func: "monitor process threads"
    - func: "collect system resource info"
    - func: "run tests"
      vars:
        resmoke_args: --suites=dbtest --storageEngine=wiredTiger
        install_dir: build/install/bin

- name: archive_dbtest
  tags: []
  depends_on:
    - name: compile_dbtest
  commands:
    - func: "scons compile"
      vars:
        targets: archive-dbtest archive-dbtest-debug
        compiling_for_test: true

- name: compile_visibility_test
  tags: []
  commands:
    - func: "scons compile"
      vars:
        targets: archive-visibility-test-meta
        task_compile_flags: >-
          --ssl
          --dbg=on
          --opt=on
          --link-model=dynamic
          --visibility-support=on

    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/visibility-test-meta.${ext|tgz}
        remote_file: ${project}/${build_variant}/${revision}/visibility-test-meta-${build_id}-${task_name}-${execution}.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Binaries

## embedded_sdk_build_and_test_* - build the embedded-dev and embedded-test targets only ##

- name: embedded_sdk_build_cdriver
  tags: []
  commands:
    - func: f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_build_cdriver.sh"

- name: embedded_sdk_install_dev
  tags: []
  depends_on:
    - name: embedded_sdk_build_cdriver
  commands:
    - func: "scons compile"
      vars:
        targets: install-embedded-dev
        task_compile_flags: &embedded_sdk_compile_flags >-
          --allocator=system
          --dbg=off
          --enable-free-mon=off
          --enable-http-client=off
          --js-engine=none
          --opt=size
          --ssl=off
          --use-system-mongo-c=on
          DESTDIR='$BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION'
          CPPPATH='$BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION/include/libbson-1.0 $BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION/include/libmongoc-1.0'
        task_compile_flags_extra: >-
          --link-model=dynamic-sdk

- name: embedded_sdk_s3_put
  tags: []
  depends_on:
    - name: embedded_sdk_install_dev
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_s3_tar.sh"

    # Upload it so we can download from EVG.
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/embedded-sdk.tgz"
        remote_file: ${project}/embedded-sdk/${build_variant}/${revision}/mongo-embedded-sdk-${version}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: "Embedded SDK Tar Archive"

- name: embedded_sdk_install_tests
  tags: []
  depends_on:
    - name: embedded_sdk_install_dev
  commands:
    - func: "scons compile"
      vars:
        targets: install-embedded-test
        compiling_for_test: true
        task_compile_flags: *embedded_sdk_compile_flags
        task_compile_flags_extra: >-
          --link-model=dynamic
        # Unlike static builds, dynamic builds have no need to
        # constrain the number of link jobs. Unfortunately, --jlink=1
        # means one link job, not 100%. So this is a bit gross but set
        # it to .99.
        num_scons_link_jobs_available: 0.99

- name: embedded_sdk_tests_s3_put
  tags: []
  depends_on:
    - name: embedded_sdk_install_tests
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_tests_s3_tar.sh"

    # Upload it so we can download from EVG.
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/embedded-sdk-tests.tgz"
        remote_file: ${project}/embedded-sdk-test/${build_variant}/${revision}/mongo-embedded-sdk-test-${version}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: "Embedded SDK Tests Tar Archive"

- name: embedded_sdk_run_tests
  tags: []
  depends_on:
    - name: embedded_sdk_install_tests
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_run_tests.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_run_tests_post.sh"

- name: embedded_sdk_s3_put_latest
  tags: []
  depends_on:
    - name: embedded_sdk_run_tests
  commands:
    # A second put, this time to -latest, to give devs a reasonable
    # way to get the most recent build.
    - command: s3.put
      params:
        visibility: none
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/embedded-sdk.tgz"
        remote_file: ${project}/embedded-sdk/mongo-${build_variant}-latest.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

- name: embedded_sdk_tests_s3_put_latest
  tags: []
  depends_on:
    - name: embedded_sdk_run_tests
  commands:
    # A second put, this time to -latest, to give devs a reasonable
    # way to get the most recent build.
    - command: s3.put
      params:
        visibility: none
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/embedded-sdk-tests.tgz"
        remote_file: ${project}/embedded-sdk-test/mongo-${build_variant}-latest.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

- name: stitch_support_create_lib
  tags: []
  commands:
    - *f_expansions_write
    - func: "scons compile"
      vars:
        targets: install-stitch-support install-stitch-support-debug install-stitch-support-dev
        task_compile_flags: >-
          --dbg=off
          --link-model=dynamic-sdk
          --enable-free-mon=off
          --ssl=off
          --enable-http-client=off
          --modules=
          DESTDIR='$BUILD_ROOT/stitch-support-lib-$MONGO_VERSION'
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/stitch_support_create_lib_tar.sh"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/stitch-support.tgz"
        remote_file: "${project}/stitch-support/${build_variant}/${revision}/stitch-support-${version}.tgz"
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: "Stitch Support Library"

- name: stitch_support_install_tests
  tags: []
  depends_on:
    - name: stitch_support_create_lib
  commands:
    - func: "scons compile"
      vars:
        targets: install-stitch-support-test
        compiling_for_test: true
        task_compile_flags: >-
          --dbg=off
          --enable-free-mon=off
          --ssl=off
          --enable-http-client=off
          --modules=
          DESTDIR='$BUILD_ROOT/stitch-support-lib-$MONGO_VERSION'

- name: stitch_support_run_tests
  tags: []
  depends_on:
    - name: stitch_support_install_tests
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/stitch_support_run_tests.sh"

- name: compile_benchmarks
  tags: []
  depends_on: []
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "get buildnumber"
    - func: "f_expansions_write"
    - func: "set up credentials"
    - func: "use WiredTiger develop" # noop if ${use_wt_develop} is not "true"
    - func: "set up win mount script"
    - func: "generate compile expansions"
    # Then we load the generated version data into the agent so we can use it in task definitions
    - func: "apply compile expansions"
    - func: "scons compile"
      vars:
        targets: install-benchmarks
        compiling_for_test: true
    - func: "attach scons logs"
    - command: archive.targz_pack
      params:
        target: "benchmarks.tgz"
        source_dir: "src"
        include:
          - "./build/benchmarks.txt"
          - "./build/**_bm"
          - "./build/**_bm.gcno"
          - "./build/**_bm.exe"
          - "./build/**_bm.pdb"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: benchmarks.tgz
        remote_file: ${project}/${build_variant}/${revision}/benchmarks/${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Benchmarks

## lint ##
- name: lint_pylinters
  tags: ["lint"]
  commands:
    - command: timeout.update
      params:
        # 40 minutes
        exec_timeout_secs: 2400
    - *f_expansions_write
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-pylinters

- name: lint_clang_format
  tags: ["lint"]
  commands:
    - command: timeout.update
      params:
        # 40 minutes
        exec_timeout_secs: 2400
    - *f_expansions_write
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-clang-format

- name: lint_eslint
  tags: ["lint"]
  commands:
    - command: timeout.update
      params:
        # 40 minutes
        exec_timeout_secs: 2400
    - *f_expansions_write
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-eslint

- name: lint_cpplint
  tags: ["lint"]
  commands:
    - command: timeout.update
      params:
        # 40 minutes
        exec_timeout_secs: 2400
    - *f_expansions_write
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-lint.py

- name: lint_yaml
  tags: ["lint"]
  depends_on: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "f_expansions_write"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/lint_yaml.sh"

- name: lint_shellscripts
  tags: ["lint"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/lint_shellscripts.sh"

- name: lint_errorcodes
  tags: ["lint"]
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-errorcodes

- name: test_api_version_compatibility
  tags: []
  depends_on:
    - name: archive_dist_test
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "do setup"
    - func: "f_expansions_write"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/check_idl_compat.sh"

- name: burn_in_tests_gen
  tags: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "configure evergreen api credentials"
  - *do_multiversion_setup
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/burn_in_tests.sh"
  - command: archive.targz_pack
    params:
      target: src/burn_in_tests_gen.tgz
      source_dir: src
      include:
        - burn_in_tests_gen.json

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/burn_in_tests_gen.tgz
      remote_file: ${project}/${build_variant}/${revision}/burn_in_tests_gen/burn_in_tests_gen-${build_id}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Burn_in_tests Task Config - Execution ${execution}
  - command: generate.tasks
    params:
      files:
        - src/burn_in_tests_gen.json

- name: burn_in_tests_multiversion_gen
  tags: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "f_expansions_write"
  - func: "configure evergreen api credentials"
  - func: "do multiversion setup"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/burn_in_tests_multiversion.sh"

  - command: archive.targz_pack
    params:
      target: src/burn_in_tests_multiversion_gen.tgz
      source_dir: src/generated_resmoke_config
      include:
        - burn_in_tests_multiversion_gen.json

  - command: archive.targz_pack
    params:
      target: src/generate_tasks_config.tgz
      source_dir: src/generated_resmoke_config
      include:
        - "*"

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/generate_tasks_config.tgz
      remote_file: ${project}/${build_variant}/${revision}/generate_tasks/burn_in_tests_multiversion_gen-${build_id}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      optional: true
      display_name: Generated Multiversion Resmoke.py Suite Config - Execution ${execution}

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/burn_in_tests_multiversion_gen.tgz
      remote_file: ${project}/${build_variant}/${revision}/generate_tasks/burn_in_tests_multiversion_gen_config-${build_id}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Burn_in_tests Task Config - Execution ${execution}

  - command: generate.tasks
    params:
      files:
        - src/generated_resmoke_config/burn_in_tests_multiversion_gen.json

- <<: *benchmark_template
  name: benchmarks_orphaned
  tags: ["benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      exec_timeout_secs: 10800  # 3 hour timeout.
      resmoke_args: --suites=benchmarks
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *benchmark_template
  name: benchmarks_sharding
  tags: ["benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=benchmarks_sharding
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *benchmark_template
  name: benchmarks_cst
  tags: ["benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=benchmarks_cst
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *run_jepsen_template
  name: jepsen_register_findAndModify
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_read_with_find_and_modify: --read-with-find-and-modify
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: register

- <<: *run_jepsen_template
  name: jepsen_register_linearizableRead
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_read_concern: --read-concern linearizable
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: register

- <<: *run_jepsen_template
  name: jepsen_set_linearizableRead
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_read_concern: --read-concern linearizable
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: set

- <<: *run_jepsen_template
  name: jepsen_read-concern-majority
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: read-concern-majority

# Smoke test to ensure the Server still works with Jepsen
- <<: *run_jepsen_template
  name: jepsen-smoke
  tags: []
  commands:
    - func: "do setup"
    - func: "do jepsen setup"
    - func: "run jepsen test"
      vars:
        <<: *jepsen_config_vars
        jepsen_storage_engine: --storage-engine wiredTiger
        jepsen_test_name: read-concern-majority
        jepsen_time_limit: --time-limit 120

- <<: *run_jepsen_template
  name: jepsen_read-concern-majority_w1
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: read-concern-majority
      jepsen_write_concern: --write-concern w1

## initial sync multiversion fuzzer ##
- <<: *jstestfuzz_template
  name: initial_sync_multiversion_fuzzer_gen
  tags: ["multiversion_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: initsync-fuzzer
      suite: initial_sync_multiversion_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: initial_sync_multiversion_fuzzer
      require_multiversion: true

## initial sync generational fuzzer ##
- <<: *jstestfuzz_template
  name: initial_sync_fuzzer_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: initsync-fuzzer
      suite: initial_sync_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: initial_sync_fuzzer

## Standalone generational fuzzer for multiversion aggregation pipelines ##
- <<: *jstestfuzz_template
  name: aggregation_multiversion_fuzzer_gen
  # TODO SERVER-58718: Re-enable this suite by un-commenting the 'tags' line.
  # tags: ["aggfuzzer", "common", "multiversion"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-fuzzer
      name: aggregation_multiversion_fuzzer
      require_multiversion: true

## Standalone generational fuzzer for multiversion aggregation expressions ##
- <<: *jstestfuzz_template
  name: aggregation_expression_multiversion_fuzzer_gen
  tags: ["aggfuzzer", "multiversion"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-expr-fuzzer
      name: aggregation_expression_multiversion_fuzzer
      require_multiversion: true

## Standalone generational fuzzer for checking optimized and unoptimized expression equivalence
- <<: *jstestfuzz_template
  name: aggregation_expression_optimization_fuzzer_gen
  tags: ["aggfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode optimization
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-expr-fuzzer
      name: aggregation_expression_optimization_fuzzer

## Standalone generational fuzzer for checking optimized and unoptimized aggregation pipelines
- <<: *jstestfuzz_template
  name: aggregation_optimization_fuzzer_gen
  tags: ["aggfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode optimization
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-fuzzer
      name: aggregation_optimization_fuzzer

## Standalone fuzzer for checking wildcard index correctness ##
- <<: *jstestfuzz_template
  name: aggregation_wildcard_fuzzer_gen
  tags: ["aggfuzzer", "common", "wildcard"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode wildcard
      npm_command: agg-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: aggregation_wildcard_fuzzer

## Standalone fuzzer for checking timeseries optimizations correctness ##
- <<: *jstestfuzz_template
  name: aggregation_timeseries_fuzzer_gen
  tags: ["aggfuzzer", "common", "timeseries"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode timeseries
      npm_command: agg-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: aggregation_timeseries_fuzzer

## Standalone generational fuzzer for checking optimized and unoptimized change stream pipelines ##
- <<: *jstestfuzz_template
  name: change_stream_optimization_fuzzer_gen
  tags: ["change_stream_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode optimization
      npm_command: change-stream-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: change_stream_optimization_fuzzer

## jstestfuzz standalone fuzzer for checking find and aggregate equivalence ##
- <<: *jstestfuzz_template
  name: query_fuzzer_standalone_gen
  tags: ["query_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode standalone
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: query_fuzzer_standalone

## jstestfuzz sharded fuzzer for checking find and aggregate equivalence ##
- <<: *jstestfuzz_template
  name: query_fuzzer_sharded_gen
  tags: ["query_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode sharded
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: query_fuzzer_sharded

## jstestfuzz standalone update generational fuzzer ##
- <<: *jstestfuzz_template
  name: update_fuzzer_gen
  tags: ["updatefuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      npm_command: update-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: update_fuzzer
      require_multiversion: true

## jstestfuzz replication update generational fuzzer ##
- <<: *jstestfuzz_template
  name: update_fuzzer_replication_gen
  tags: ["updatefuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      npm_command: update-fuzzer
      suite: generational_fuzzer_replication
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: update_fuzzer_replication
      require_multiversion: true

## rollback multiversion fuzzer ##
- <<: *jstestfuzz_template
  name: rollback_multiversion_fuzzer_gen
  tags: ["multiversion_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 3
      num_tasks: 5
      npm_command: rollback-fuzzer
      suite: rollback_multiversion_fuzzer
      # Rollback suites create indexes with majority of nodes not available for replication. So, disabling
      # index build commit quorum.
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
      name: rollback_multiversion_fuzzer
      require_multiversion: true

## rollback generational fuzzer ##
- <<: *jstestfuzz_template
  name: rollback_fuzzer_gen
  tags: ["rollbackfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 3
      num_tasks: 5
      npm_command: rollback-fuzzer
      suite: rollback_fuzzer
      # Rollback suites create indexes with majority of nodes not available for replication. So, disabling
      # index build commit quorum.
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
      name: rollback_fuzzer

## rollback generational fuzzer with clean shutdowns ##
- <<: *jstestfuzz_template
  name: rollback_fuzzer_clean_shutdowns_gen
  tags: ["rollbackfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 1
      num_tasks: 4
      jstestfuzz_vars: --numLinesPerFile 300 --maxLinesBetweenEvents 50
      npm_command: rollback-fuzzer
      suite: rollback_fuzzer_clean_shutdowns
      # Rollback suites create indexes with majority of nodes not available for replication. So, disabling
      # index build commit quorum.
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
      name: rollback_fuzzer_clean_shutdowns

## rollback generational fuzzer with unclean shutdowns ##
- <<: *jstestfuzz_template
  name: rollback_fuzzer_unclean_shutdowns_gen
  tags: ["rollbackfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 1
      num_tasks: 4
      jstestfuzz_vars: --numLinesPerFile 300 --maxLinesBetweenEvents 50
      npm_command: rollback-fuzzer
      suite: rollback_fuzzer_unclean_shutdowns
      # Rollback suites create indexes with majority of nodes not available for replication. So, disabling
      # index build commit quorum.
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
      name: rollback_fuzzer_unclean_shutdowns

## jstestfuzz ##
- <<: *jstestfuzz_template
  name: jstestfuzz_gen
  tags: ["jstestfuzz", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: jstestfuzz
      name: jstestfuzz

## jstestfuzz concurrent ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_gen
  tags: ["jstestfuzz", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent

## jstestfuzz concurrent replica set ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_replication_gen
  tags: ["jstestfuzz", "common", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_replication

## jstestfuzz concurrent replica set with logical session ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_replication_session_gen
  tags: ["jstestfuzz", "session"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_session
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_replication_session

## jstestfuzz concurrent sharded cluster ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_gen
  tags: ["jstestfuzz", "common", "sharding"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded

## jstestfuzz concurrent sharded cluster causal consistency ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_causal_consistency_gen
  tags: ["jstestfuzz", "causal"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_causal_consistency
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded_causal_consistency

## jstestfuzz concurrent sharded cluster continuous stepdown ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_continuous_stepdown_gen
  tags: ["jstestfuzz", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 2
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_continuous_stepdown
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded_continuous_stepdown

## jstestfuzz concurrent sharded cluster with logical session ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_session_gen
  tags: ["jstestfuzz", "session"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_session
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded_session

# jstestfuzz interrupt #
- <<: *jstestfuzz_template
  name: jstestfuzz_interrupt_gen
  tags: ["jstestfuzz", "interrupt"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_interrupt
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_interrupt

# jstestfuzz interrupt #
- <<: *jstestfuzz_template
  name: jstestfuzz_interrupt_replication_gen
  tags: ["jstestfuzz", "interrupt"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_interrupt_replication
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_interrupt_replication

# jstestfuzz write conflict #
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_write_conflicts_gen
  tags: ["jstestfuzz", "write_conflict"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_write_conflicts
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_replication_write_conflicts

# jstestfuzz concurrent conflict #
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_replication_write_conflicts_gen
  tags: ["jstestfuzz", "write_conflict"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_write_conflicts
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}' --numClientsPerFixture=10"
      name: jstestfuzz_concurrent_replication_write_conflicts

# jstestfuzz interrupt with flow control engaged #
- <<: *jstestfuzz_template
  name: jstestfuzz_interrupt_replication_flow_control_gen
  tags: ["jstestfuzz", "interrupt", "flow_control"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_interrupt_replication
      resmoke_args: "--flowControlTicketOverride=1 --storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_interrupt_replication_flow_control

## jstestfuzz sharded cluster continuous stepdown with flow control engaged ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_continuous_stepdown_flow_control_gen
  tags: ["jstestfuzz", "flow_control", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_continuous_stepdown
      resmoke_args: >-
          --flowControlTicketOverride=3
          --storageEngine=wiredTiger
          --mongodSetParameters="{logComponentVerbosity: {command: 2}}"
      name: jstestfuzz_sharded_continuous_stepdown_flow_control

## jstestfuzz concurrent sharded cluster continuous stepdown with flow control engaged ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_continuous_stepdown_flow_control_gen
  tags: ["jstestfuzz", "flow_control", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_continuous_stepdown
      resmoke_args: >-
          --flowControlTicketOverride=30
          --storageEngine=wiredTiger
          --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded_continuous_stepdown_flow_control

# jstestfuzz replication continuous stepdown with flow control engaged #
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_continuous_stepdown_flow_control_gen
  tags: ["jstestfuzz", "repl", "flow_control", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_continuous_stepdown
      resmoke_args: >-
          --flowControlTicketOverride=1
          --storageEngine=wiredTiger
          --mongodSetParameters="{logComponentVerbosity: {command: 2}}"
      name: jstestfuzz_replication_continuous_stepdown_flow_control

## jstestfuzz concurrent replication continuous stepdown with flow control engaged ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_replication_continuous_stepdown_flow_control_gen
  tags: ["jstestfuzz", "repl", "flow_control", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_continuous_stepdown
      resmoke_args: >-
          --flowControlTicketOverride=10
          --storageEngine=wiredTiger
          --numClientsPerFixture=10
      name: jstestfuzz_concurrent_replication_continuous_stepdown_flow_control

## jstestfuzz replica set ##
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_gen
  tags: ["jstestfuzz", "common", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_replication

## jstestfuzz replica set ##
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_multiversion_passthrough_gen
  tags: ["jstestfuzz_multiversion_passthrough_gen"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      suite: jstestfuzz_replication
      is_jstestfuzz: true
      require_multiversion: true
      implicit_multiversion: true
      npm_command: jstestfuzz

## jstestfuzz initial sync replica set ##
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_initsync_gen
  tags: ["jstestfuzz", "initsync"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 8
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_initsync
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_replication_initsync

## jstestfuzz replica set with logical session ##
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_session_gen
  tags: ["jstestfuzz", "session"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_session
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_replication_session

## jstestfuzz sharded cluster ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_gen
  tags: ["jstestfuzz", "common", "sharding"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_sharded

## jstestfuzz sharded multiversion cluster ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_multiversion_passthrough_gen
  tags: [jstestfuzz_multiversion_passthrough_gen]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      suite: jstestfuzz_sharded
      is_jstestfuzz: true
      require_multiversion: true
      implicit_multiversion: true
      npm_command: jstestfuzz

## jstestfuzz sharded cluster causal consistency ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_causal_consistency_gen
  tags: ["jstestfuzz", "causal"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_causal_consistency
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_sharded_causal_consistency

## jstestfuzz sharded cluster continuous stepdown ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_continuous_stepdown_gen
  tags: ["jstestfuzz", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_continuous_stepdown
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_sharded_continuous_stepdown

## jstestfuzz sharded cluster with logical session ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_session_gen
  tags: ["jstestfuzz", "session"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_session
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_sharded_session

## resharding generational fuzzer ##
- <<: *jstestfuzz_template
  name: resharding_fuzzer_inplace_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 2 --numRecipients 2 --inPlace yes
      suite: resharding_fuzzer
      resmoke_args: --storageEngine=wiredTiger
      name: resharding_fuzzer_inplace

- <<: *jstestfuzz_template
  name: resharding_fuzzer_split_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 1 --numRecipients 2 --inPlace no
      suite: resharding_fuzzer
      resmoke_args: --storageEngine=wiredTiger
      name: resharding_fuzzer_split

- <<: *jstestfuzz_template
  name: resharding_fuzzer_merge_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 2 --numRecipients 1 --inPlace no
      suite: resharding_fuzzer
      resmoke_args: --storageEngine=wiredTiger
      name: resharding_fuzzer_merge

- <<: *jstestfuzz_template
  name: resharding_fuzzer_shuffle_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 3 --numRecipients 3 --inPlace no
      suite: resharding_fuzzer
      resmoke_args: --storageEngine=wiredTiger
      name: resharding_fuzzer_shuffle

- <<: *jstestfuzz_template
  name: resharding_fuzzer_idempotency_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 3 --numRecipients 3 --inPlace no
      suite: resharding_fuzzer_idempotency
      resmoke_args: >-
        --storageEngine=wiredTiger
      name: resharding_fuzzer_idempotency

## Tests that the multiversion test generation logic is not broken.
- <<: *gen_task_template
  name: multiversion_sanity_check_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: replica_sets_jscore_passthrough
      resmoke_args: --storageEngine=wiredTiger --includeWithAnyTags=multiversion_sanity_check
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: replica_sets_jscore_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: replica_sets_jscore_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

# Check that the mutational fuzzer can parse JS files modified in a patch build.
- name: lint_fuzzer_sanity_patch
  tags: []
  patch_only: true
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - func: "get added and modified patch files"
  - func: "setup jstestfuzz"
  - func: "lint fuzzer sanity patch"

# Check that the mutational fuzzer can parse all JS filess.
- name: lint_fuzzer_sanity_all
  tags: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - func: "setup jstestfuzz"
  - func: "lint fuzzer sanity all"

## integration test suites ##

- <<: *task_template
  name: aggregation
  tags: ["aggregation", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_disabled_optimization
  tags: ["aggregation", "common"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_disabled_optimization --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_ese
  tags: ["aggregation", "encrypt"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_ese --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_ese_gcm
  tags: ["aggregation", "encrypt", "gcm"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_ese_gcm --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_auth
  tags: ["aggregation", "auth", "common"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_auth --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_facet_unwind_passthrough
  tags: ["aggregation", "unwind"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_facet_unwind_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_mongos_passthrough
  tags: ["aggregation", "no_async"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_one_shard_sharded_collections
  tags: ["aggregation", "no_async", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_one_shard_sharded_collections --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_read_concern_majority_passthrough
  tags: ["aggregation", "read_write_concern"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_read_concern_majority_passthrough --storageEngine=wiredTiger
      resmoke_jobs_factor: 0.5

- <<: *gen_task_template
  name: aggregation_secondary_reads_gen
  tags: ["aggregation", "secondary_reads"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: aggregation_sharded_collections_passthrough
  tags: ["aggregation", "common", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_sharded_collections_causally_consistent_passthrough
  tags: ["aggregation", "secondary_reads", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_sharded_collections_causally_consistent_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: audit
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=audit --storageEngine=wiredTiger

- <<: *gen_task_template
  name: auth_gen
  tags: ["auth"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- name: burn_in_tags_gen
  tags: []
  depends_on:
    - name: archive_dist_test
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "configure evergreen api credentials"
  - func: "do multiversion setup"
  - func: "generate burn in tags"
    vars:
      max_revisions: 25
      repeat_tests_secs: 600
      repeat_tests_min: 2
      repeat_tests_max: 1000

- name: build_variant_gen
  commands:
    - command: manifest.load
    - *git_get_project
    - *f_expansions_write
    - *add_git_tag
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "generate build variant"

- name: selected_tests_gen
  tags: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "generate selected tests"

- <<: *gen_task_template
  name: auth_audit_gen
  tags: ["auth", "audit"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams
  tags: ["change_streams"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams --storageEngine=wiredTiger

- <<: *gen_task_template
  name: change_streams_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: change_streams
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: change_streams_multiversion_downgrade_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: change_streams_multiversion_downgrade_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *task_template
  name: change_streams_update_v1_oplog
  tags: ["change_streams"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_update_v1_oplog --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_mongos_sessions_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_mongos_sessions_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_mongos_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_secondary_reads
  tags: ["change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_secondary_reads --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_sharded_collections_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: change_streams_sharded_collections_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: change_streams_sharded_collections_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *task_template
  name: change_streams_whole_db_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_db_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_db_mongos_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams_mongos_passthrough
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_db_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_db_secondary_reads_passthrough
  tags: ["change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams_secondary_reads
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_db_secondary_reads_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_db_sharded_collections_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams_sharded_collections_passthrough
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_db_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_cluster_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_cluster_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_cluster_mongos_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams_mongos_passthrough
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_cluster_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_cluster_secondary_reads_passthrough
  tags: ["change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams_secondary_reads
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_cluster_secondary_reads_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_cluster_sharded_collections_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams_sharded_collections_passthrough
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_cluster_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_multi_stmt_txn_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_multi_stmt_txn_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_multi_stmt_txn_mongos_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_multi_stmt_txn_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_multi_stmt_txn_sharded_collections_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_multi_stmt_txn_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: disk_wiredtiger
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=disk_wiredtiger --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: ese
  tags: ["encrypt"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=ese --storageEngine=wiredTiger

- <<: *task_template
  name: failpoints
  tags: ["misc_js"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=failpoints --storageEngine=wiredTiger

- <<: *task_template
  name: failpoints_auth
  tags: ["auth"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=failpoints_auth --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_standalone
  tags: ["integration", "standalone"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_standalone --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_standalone_audit
  tags: ["integration", "audit"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_standalone_audit --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_replset
  tags: ["integration"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_replset --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_replset_ssl_auth
  tags: ["integration"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_replset_ssl_auth --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_sharded
  tags: ["integration", "sharded"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_sharded --storageEngine=wiredTiger

- <<: *task_template
  name: external_auth
  tags: []
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "f_expansions_write"
  - command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/external_auth_pip.sh"
  - func: "run tests"
    vars:
      resmoke_args: --suites=external_auth --excludeWithAnyTags=requires_domain_controller --storageEngine=wiredTiger

- <<: *task_template
  name: external_auth_aws
  tags: []
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "f_expansions_write"
  - command: subprocess.exec
    params:
      binary: bash
      silent: true
      args:
        - "src/evergreen/external_auth_aws_setup.sh"
  - command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/external_auth_aws_pip.sh"
  - func: "run tests"
    vars:
      resmoke_args: --suites=external_auth_aws --storageEngine=wiredTiger


- <<: *task_template
  name: external_auth_windows
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=external_auth --includeWithAnyTags=requires_domain_controller --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore
  tags: ["jscore", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core --storageEngine=wiredTiger

- <<: *task_template
  name: config_fuzzer_jsCore
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core --storageEngine=wiredTiger --fuzzMongodConfigs

- <<: *task_template
  name: config_fuzzer_concurrency
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency --storageEngine=wiredTiger --fuzzMongodConfigs

- <<: *task_template
  name: config_fuzzer_concurrency_replication
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication --storageEngine=wiredTiger --fuzzMongodConfigs

- <<: *task_template
  name: config_fuzzer_replica_sets_jscore_passthrough
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_jscore_passthrough --storageEngine=wiredTiger --fuzzMongodConfigs

- <<: *task_template
  name: jsCore_ese
  tags: ["jscore", "encrypt"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_ese --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_ese_gcm
  tags: ["jscore", "encrypt", "gcm"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_ese_gcm --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_auth
  tags: ["jscore", "auth", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_auth

- <<: *task_template
  name: jsCore_minimum_batch_size
  tags: ["jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_minimum_batch_size --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_txns
  tags: ["jscore", "common", "txns"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_txns --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_txns_large_txns_format
  tags: ["jscore", "txns", "multi_oplog"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_txns_large_txns_format --storageEngine=wiredTiger

- <<: *task_template
  name: sharded_jscore_txns
  tags: ["sharding", "jscore", "txns"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_jscore_txns --storageEngine=wiredTiger

- <<: *task_template
  name: sharded_jscore_txns_without_snapshot
  tags: ["sharding", "wo_snapshot", "jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_jscore_txns --storageEngine=wiredTiger --excludeWithAnyTags=uses_snapshot_read_concern

- <<: *task_template
  name: sharded_jscore_txns_sharded_collections
  tags: ["sharding", "jscore", "txns"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_jscore_txns_sharded_collections --storageEngine=wiredTiger

- <<: *task_template
  name: cst_jscore_passthrough
  tags: ["jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=cst_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: libunwind_tests
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=libunwind --storageEngine=wiredTiger

- <<: *task_template
  name: causally_consistent_jscore_txns_passthrough
  tags: ["causally_consistent"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=causally_consistent_jscore_txns_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_causally_consistent_jscore_txns_passthrough_gen
  tags: ["sharding", "jscore", "causally_consistent", "txns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_causally_consistent_jscore_txns_passthrough_without_snapshot_gen
  tags: ["sharding", "wo_snapshot", "causally_consistent", "jscore"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: sharded_causally_consistent_jscore_txns_passthrough
      resmoke_args: --storageEngine=wiredTiger --excludeWithAnyTags=uses_snapshot_read_concern

- <<: *gen_task_template
  name: causally_consistent_hedged_reads_jscore_passthrough_gen
  tags: ["causally_consistent", "sharding", "jscore"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: sharded_collections_causally_consistent_jscore_txns_passthrough
  tags: ["sharding", "jscore", "causally_consistent", "txns"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_collections_causally_consistent_jscore_txns_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_jscore_passthrough
  tags: ["replica_sets", "common", "san", "large", "ignore_non_generated_replica_sets_jscore_passthrough"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_reconfig_jscore_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_reconfig_jscore_stepdown_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_reconfig_kill_primary_jscore_passthrough
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_reconfig_kill_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_api_version_jscore_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      fallback_num_sub_suites: 5

- <<: *gen_task_template
  name: replica_sets_jscore_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_large_txns_format_jscore_passthrough
  tags: ["replica_sets", "multi_oplog", "large", "non_maj_read", "san"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_large_txns_format_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_multi_stmt_txn_jscore_passthrough
  tags: ["replica_sets", "large"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_multi_stmt_txn_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_multi_stmt_txn_stepdown_jscore_passthrough_gen
  tags: ["replica_sets", "non_maj_read"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_multi_stmt_txn_kill_primary_jscore_passthrough
  tags: ["replica_sets", "non_maj_read", "non_live_record"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_multi_stmt_txn_kill_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_multi_stmt_txn_terminate_primary_jscore_passthrough
  tags: ["replica_sets", "non_maj_read"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_multi_stmt_txn_terminate_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_update_v1_oplog_jscore_passthrough_gen
  tags: ["replica_sets", "non_maj_read"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_initsync_jscore_passthrough_gen
  tags: ["replica_sets", "san", "large"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_initsync_static_jscore_passthrough
  tags: ["replica_sets", "san", "large"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_initsync_static_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_kill_primary_jscore_passthrough
  tags: ["replica_sets", "large", "non_maj_read", "non_live_record"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_kill_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_terminate_primary_jscore_passthrough
  tags: ["replica_sets", "large", "non_maj_read"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_terminate_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_kill_secondaries_jscore_passthrough
  tags: ["replica_sets", "san", "large", "non_live_record"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_kill_secondaries_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: mongosTest
  tags: ["misc_js", "non_read_maj", "non_live_record"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=mongos_test

- <<: *gen_task_template
  name: multiversion_auth_gen
  tags: ["auth", "multiversion"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      require_multiversion: true

- <<: *gen_task_template
  name: multiversion_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      require_multiversion: true

# Tests the runFeatureFlagMultiversionTest helper.
# This requires the 'featureFlagToaster' and 'featureFlagSpoon' parameters to be set to true on
# build variants that enable this task.
- <<: *gen_task_template
  name: feature_flag_multiversion_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      require_multiversion: true

- <<: *gen_task_template
  name: unittest_shell_hang_analyzer_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: unittest_shell_hang_analyzer
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: noPassthrough_gen
  tags: ["misc_js"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: no_passthrough
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"

# Only run hot_backups tests for hot_backups variant.
- <<: *gen_task_template
  name: noPassthroughHotBackups_gen
  tags: []
  commands:
    - func: "generate resmoke tasks"
      vars:
        suite: no_passthrough
        resmoke_args: --storageEngine=wiredTiger src/mongo/db/modules/*/jstests/hot_backups/*.js
        use_large_distro: "true"

- <<: *gen_task_template
  name: noPassthroughWithMongod_gen
  tags: ["misc_js"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: no_passthrough_with_mongod
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: slow1_gen
  tags: ["misc_js", "non_win_dbg"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: serial_run
  tags: ["misc_js", "non_win_dbg"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=serial_run --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: sharded_collections_jscore_passthrough
  tags: ["sharding", "jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_collections_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_collections_jscore_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: sharded_collections_jscore_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *task_template
  name: sharding_jscore_passthrough
  tags: ["sharding", "jscore", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharding_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_jscore_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: sharding_jscore_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: sharding_api_version_jscore_passthrough_gen
  tags: ["sharding", "jscore"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      fallback_num_sub_suites: 5

- <<: *task_template
  name: sharding_update_v1_oplog_jscore_passthrough
  tags: ["sharding", "jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharding_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: sharded_multi_stmt_txn_jscore_passthrough
  tags: ["sharding", "jscore", "multi_stmt"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_multi_stmt_txn_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: multi_shard_multi_stmt_txn_jscore_passthrough_gen
  tags: ["multi_shard", "multi_stmt", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 0  # No cap on number of jobs.

- <<: *gen_task_template
  name: multi_shard_local_read_write_multi_stmt_txn_jscore_passthrough_gen
  tags: ["multi_shard", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  tags: ["multi_stmt"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: multi_shard_multi_stmt_txn_kill_primary_jscore_passthrough_gen
  tags: ["multi_shard"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: multi_shard_multi_stmt_txn_stepdown_primary_jscore_passthrough_gen
  tags: ["multi_shard"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_causally_consistent_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_multi_stmt_txn_jscore_passthrough_gen
  tags: ["tenant_migration", "txn"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_stepdown_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_terminate_primary_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger
      fallback_num_sub_suites: 10

- <<: *gen_task_template
  name: tenant_migration_kill_primary_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger
      fallback_num_sub_suites: 10

- <<: *gen_task_template
  name: parallel_gen
  tags: ["misc_js", "parallel"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_gen
  tags: ["concurrency", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_metrics
  tags: ["concurrency"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_metrics --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_replication_metrics
  tags: ["concurrency", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication_metrics --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_gen
  tags: ["concurrency", "common", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_multiversion_passthrough_gen
  tags: [multiversion_passthrough]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: concurrency_replication
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: concurrency_replication_causal_consistency_gen
  tags: ["concurrency", "repl", "large", "non_live_record"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1
      use_large_distro: "true"

- <<: *gen_task_template
  name: concurrency_replication_multi_stmt_txn_gen
  tags: ["concurrency", "common", "repl", "txn"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

  # TODO: SERVER-35964 revert the addition of UBSAN concurrency_replication suites.
- <<: *task_template
  name: concurrency_replication_ubsan
  tags: ["concurrency", "ubsan", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication_ubsan --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_replication_causal_consistency_ubsan
  tags: ["concurrency", "ubsan", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication_causal_consistency_ubsan --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_replication_multi_stmt_txn_ubsan
  tags: ["concurrency", "ubsan", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication_multi_stmt_txn_ubsan --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_wiredtiger_cursor_sweeps_gen
  tags: ["concurrency", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_wiredtiger_eviction_debug_gen
  tags: ["concurrency", "repl", "debug_only"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_replication_gen
  tags: ["concurrency", "common", "read_concern_maj", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_replication_multiversion_passthrough_gen
  tags: ["multiversion_passthrough", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: concurrency_sharded_replication
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: concurrency_sharded_replication_with_balancer_gen
  tags: ["concurrency", "common", "read_concern_maj", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_replication_no_txns_gen
  tags: ["concurrency", "no_txns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: concurrency_sharded_replication
      resmoke_args: "--excludeWithAnyTags=uses_transactions --storageEngine=wiredTiger"
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_replication_no_txns_with_balancer_gen
  tags: ["concurrency", "no_txns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: concurrency_sharded_replication_with_balancer
      resmoke_args: "--excludeWithAnyTags=uses_transactions --storageEngine=wiredTiger"
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_clusterwide_ops_add_remove_shards_gen
  tags: ["concurrency", "common", "read_concern_maj", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_causal_consistency_gen
  tags: ["concurrency", "non_live_record", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_causal_consistency_and_balancer_gen
  tags: ["concurrency", "large", "non_live_record", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_with_stepdowns_gen
  tags: ["concurrency", "stepdowns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_with_stepdowns_and_balancer_gen
  tags: ["concurrency", "stepdowns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_terminate_primary_with_balancer_gen
  tags: ["concurrency", "stepdowns", "kill_terminate", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_kill_primary_with_balancer_gen
  tags: ["concurrency", "stepdowns", "kill_terminate", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_with_balancer_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_local_read_write_multi_stmt_txn_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_local_read_write_multi_stmt_txn_with_balancer_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_with_stepdowns_gen
  tags: ["concurrency", "stepdowns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_terminate_primary_gen
  tags: ["concurrency", "stepdowns", "kill_terminate", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_kill_primary_gen
  tags: ["concurrency", "stepdowns", "kill_terminate", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_simultaneous_gen
  tags: ["concurrency", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_simultaneous_replication_gen
  tags: ["concurrency", "common", "large", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_simultaneous_replication_wiredtiger_cursor_sweeps
  tags: ["concurrency", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: "--suites=concurrency_simultaneous_replication_wiredtiger_cursor_sweeps --storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_simultaneous_replication_wiredtiger_eviction_debug
  tags: ["concurrency", "repl", "debug_only"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: "--suites=concurrency_simultaneous_replication_wiredtiger_eviction_debug --storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *task_template
  name: read_concern_linearizable_passthrough
  tags: ["read_write_concern", "linearize", "large"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=read_concern_linearizable_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: read_concern_majority_passthrough_gen
  tags: ["read_write_concern"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: write_concern_majority_passthrough
  tags: ["read_write_concern", "large", "write"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=write_concern_majority_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: cwrwc_passthrough
  tags: ["read_write_concern", "large", "write"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=cwrwc_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: cwrwc_rc_majority_passthrough_gen
  tags: ["read_write_concern"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: cwrwc_wc_majority_passthrough
  tags: ["read_write_concern", "large", "write"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=cwrwc_wc_majority_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: secondary_reads_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_gen
  tags: ["replica_sets", "san", "large"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_ese_gen
  tags: ["replica_sets", "encrypt", "san"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_ese_gcm_gen
  tags: ["replica_sets", "encrypt", "san", "gcm"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_auth_gen
  tags: ["replica_sets", "common", "san", "auth"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_large_txns_format_gen
  tags: ["replica_sets", "multi_oplog", "san"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_max_mirroring_gen
  tags: ["replica_sets", "san"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_update_v1_oplog_gen
  tags: ["replica_sets", "san"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_multiversion_gen
  tags: ["random_multiversion_ds"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger --tagFile=generated_resmoke_config/multiversion_exclude_tags.yml
      require_multiversion: true
      suite: replica_sets_multiversion

- <<: *task_template
  name: sasl
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sasl --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_gen
  tags: ["sharding", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_multiversion_gen
  tags: ["random_multiversion_ds"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger --tagFile=generated_resmoke_config/multiversion_exclude_tags.yml
      require_multiversion: true
      suite: sharding_multiversion

- <<: *gen_task_template
  name: sharding_max_mirroring_gen
  tags: ["sharding", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_csrs_continuous_config_stepdown_gen
  tags: ["sharding", "common", "csrs", "non_live_record"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: sharding_continuous_config_stepdown
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_ese_gen
  tags: ["sharding", "encrypt"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_ese_gcm_gen
  tags: ["sharding", "encrypt", "gcm"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_auth_gen
  tags: ["sharding", "auth"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_auth_audit_gen
  tags: ["auth", "audit", "non_live_record"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_hello_failures_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: sharding_last_lts_mongos_and_mixed_shards_gen
  tags: ["sharding", "common", "multiversion"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      require_multiversion: true
      resmoke_args: --tagFile=generated_resmoke_config/multiversion_exclude_tags.yml

- <<: *gen_task_template
  name: sharding_update_v1_oplog_gen
  tags: ["sharding", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: snmp
  tags: []
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "do snmp setup"
  - func: "run tests"
    vars:
      snmp_config_path: SNMPCONFPATH=snmpconf
      resmoke_args: --suites=snmp --storageEngine=wiredTiger

- <<: *gen_task_template
  name: ssl_gen
  tags: ["encrypt", "ssl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {network: 2, replication: {heartbeats: 2}}}'"

- <<: *gen_task_template
  name: sslSpecial_gen
  tags: ["encrypt", "ssl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: ssl_special
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: ssl_x509_gen
  tags: ["encrypt", "ssl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: ssl_x509
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_decimal
  tags: ["jscore", "common", "decimal"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=decimal --storageEngine=wiredTiger

- <<: *task_template
  name: read_only
  tags: ["read_only"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=read_only --storageEngine=wiredTiger

- <<: *task_template
  name: read_only_sharded
  tags: ["read_only"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=read_only_sharded --storageEngine=wiredTiger

- <<: *task_template
  name: session_jscore_passthrough
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=session_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: causally_consistent_jscore_passthrough_gen
  tags: ["causally_consistent"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: causally_consistent_jscore_passthrough_auth_gen
  tags: ["causally_consistent"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: causally_consistent_read_concern_snapshot_passthrough_gen
  tags: ["causally_consistent", "read_write_concern", "durable_history"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_causally_consistent_read_concern_snapshot_passthrough_gen
  tags: ["causally_consistent", "read_write_concern", "durable_history"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_causally_consistent_jscore_passthrough_gen
  tags: ["causally_consistent"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: retryable_writes_jscore_passthrough_gen
  tags: ["retry"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: retryable_writes_downgrade_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: retryable_writes_downgrade_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: logical_session_cache_replication_default_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_replication_100ms_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_replication_1sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "one_sec", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_replication_10sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_default_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_100ms_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_100ms_refresh_jscore_txns_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_1sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "one_sec"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_10sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_standalone_default_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_standalone_100ms_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_standalone_1sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "one_sec"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_standalone_10sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: retryable_writes_jscore_stepdown_passthrough
  tags: ["retry"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=retryable_writes_jscore_stepdown_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: watchdog_wiredtiger
  tags: ["watchdog"]
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "do watchdog setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=watchdog --storageEngine=wiredTiger
      resmoke_jobs_max: 1

# This is a separate task because it is only supported on Ubuntu 16.04+ which are not inmemory builders
- <<: *task_template
  name: watchdog_inmemory
  tags: ["watchdog"]
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "do watchdog setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=watchdog --storageEngine=inMemory
      resmoke_jobs_max: 1

- <<: *task_template
  name: free_monitoring
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=free_monitoring --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: client_encrypt
  tags: ["ssl", "encrypt"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=client_encrypt --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: fle
  tags: ["encrypt"]
  commands:
  - func: "do setup"
  - func: "load aws test credentials"
  - func: "run tests"
    vars:
      resmoke_args: --suites=fle --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: ocsp
  tags: ["ssl", "encrypt", "ocsp"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=ocsp
      resmoke_jobs_max: 1

- <<: *task_template
  name: jsonSchema
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=json_schema --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- name: powercycle_gen
  tags: []
  commands:
    - func: "generate powercycle tasks"
      vars:
        task_names: >-
          powercycle
          powercycle_kill_mongod
          powercycle_replication_smalloplog
          powercycle_syncdelay
        num_tasks: 1

- name: powercycle_smoke_skip_compile_gen
  tags: []
  commands:
    - func: "generate powercycle tasks"
      vars:
        task_names: >-
          powercycle_smoke_skip_compile
        num_tasks: 20
        exec_timeout_secs: 604800 # 7 days
        timeout_secs: 604800 # 7 days
        set_up_retry_count: 450
        run_powercycle_args: --sshAccessRetryCount=450

- name: powercycle_sentinel
  tags: []
  exec_timeout_secs: 604800 # 7 days
  commands:
    - func: "run powercycle sentinel"
      vars:
        gen_task: powercycle_smoke_skip_compile_gen

- name: powercycle_smoke
  tags: []
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_kill_mongod
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_last_lts_fcv
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_replication
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_replication_smalloplog
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_syncdelay
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_write_concern_majority
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: idl_tests
  tags: []
  depends_on:
  - name: archive_dist_test
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "run idl tests"

- name: blackduck_scanner
  tags: []
  patchable: false
  commands:
  - *f_expansions_write
  - func: "do non-compile setup"
  - command: subprocess.exec
    type: setup
    params:
      binary: bash
      silent: true
      args:
        - "src/evergreen/blackduck_setup.sh"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/blackduck_hub.sh"

- name: tla_plus
  tags: []
  commands:
  - *f_expansions_write
  - func: "do non-compile setup"
  - command: subprocess.exec
    type: setup
    params:
      binary: bash
      args:
        - "./src/evergreen/download_tlc.sh"
  - func: "run tests"
    vars:
      resmoke_args: --suites=tla_plus
      resmoke_jobs_max: 1

- name: buildscripts_test
  tags: []
  depends_on: []
  commands:
  - *f_expansions_write
  - func: "do non-compile setup"
  - func: "set up remote credentials"
  - *f_expansions_write
  - func: "configure evergreen api credentials"
  - func: "do multiversion setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=buildscripts_test
      resmoke_jobs_max: 1

- <<: *task_template
  name: resmoke_end2end_tests
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=resmoke_end2end_tests

- name: test_packages
  tags: []
  depends_on:
  - name: package
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - func: "fetch packages"
    - func: "set up remote credentials"
      vars:
        private_key_file: ~/.ssh/kitchen.pem
        private_key_remote: ${kitchen_private_key}
        aws_key_remote: ${kitchen_aws_key}
        aws_secret_remote: ${kitchen_aws_secret}
    - func: "run kitchen"

- name: package
  tags: []
  depends_on:
    - name: compile_dist_test
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - func: "scons compile"
      vars:
        targets: >-
          distsrc-${ext|tgz}
          archive-dist
          archive-dist-debug
          archive-shell
          archive-shell-debug
          ${additional_package_targets|}
        task_compile_flags: >-
          --legacy-tarball
    - func: "f_expansions_write"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/package.sh"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/distsrc.${ext|tgz}
        remote_file: ${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Source tarball
        # We only need to upload the source tarball from one of the build variants
        # because it should be the same everywhere, so just use rhel70/windows.
        build_variants: [rhel70, windows]
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-dist.${ext|tgz}
        remote_file: ${project}/${build_variant}/${revision}/dist/mongo-${build_id}.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Dist Tarball
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-dist-debugsymbols.${ext|tgz}
        remote_file: ${project}/${build_variant}/${revision}/dist/mongo-${build_id}-debugsymbols.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Dist Debugsymbols
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell.${ext|tgz}
        remote_file: ${mongo_shell}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Shell
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-debugsymbols.${ext|tgz}
        remote_file: ${mongo_shell_debugsymbols}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Shell Debugsymbols
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd.${ext|tgz}
        remote_file: ${mongo_cryptd}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: CryptD Binaries
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-debugsymbols.${ext|tgz}
        remote_file: ${mongo_cryptd_debugsymbols}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: CryptD Debugsymbols
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mh-binaries.${ext|tgz}
        remote_file: ${mh_archive}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: MH Binaries
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mh-debugsymbols.${ext|tgz}
        remote_file: ${mh_debugsymbols}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: MH Debugsymbols
    - func: "run packager.py"
    - command: archive.targz_pack
      params:
        target: "packages.tgz"
        source_dir: "src"
        include:
          - "repo/**"
          - "./**.msi"
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: packages.tgz
        remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Packages


- name: publish_packages
  tags: ["publish"]
  # This should prevent this task from running in patch builds, where we
  # don't want to publish packages.
  patchable: false
  stepback: false
  # Same dependencies as "push" below
  depends_on:
  - name: package
  - name: jsCore
  - name: run_dbtest
  - name: replica_sets_jscore_passthrough
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "f_expansions_write"
    - func: "kill processes"
    - func: "cleanup environment"
    - func: "set up venv"
    - func: "fetch packages"
    - func: "generate compile expansions"
    - func: "apply compile expansions"
    - func: "set up remote credentials"
      vars:
        aws_key_remote: ${repo_aws_key}
        aws_secret_remote: ${repo_aws_secret}
    - func: "set up notary client credentials"
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/packages_publish.sh"

- name: push
  tags: ["publish"]
  patchable: false
  depends_on:
  - name: package
  - name: jsCore
  - name: run_dbtest
  - name: replica_sets_jscore_passthrough
  stepback: false
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "f_expansions_write"
    - func: "kill processes"
    - func: "cleanup environment"
    - func: "set up venv"
    - func: "fetch packages"
    - func: "fetch dist tarball"
    # Fetch the shell
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${mongo_shell}
        bucket: mciuploads
        local_file: src/mongo-shell.tgz
    # Fetch mongocryptd
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${mongo_cryptd}
        bucket: mciuploads
        local_file: src/mongo-cryptd.tgz
        build_variants: *mongocryptd_variants
    # Fetch the mongohouse binaries
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${mh_archive}
        bucket: mciuploads
        local_file: src/mh.tgz
        build_variants: *mh_variants
    # Fetch the sources (on relevant variants only)
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}
        bucket: mciuploads
        local_file: src/distsrc.${ext|tgz}
        build_variants: [rhel70, windows]
    - func: "generate compile expansions"
    - func: "apply compile expansions"
    - func: "set up remote credentials"
      vars:
        aws_key_remote: ${repo_aws_key}
        aws_secret_remote: ${repo_aws_secret}
    - func: "f_expansions_write"
    - func: "set up notary client credentials"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/notary_client_run.sh"

    # Put the binaries tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
    # Put the shell tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
    # Put the cryptd tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
        build_variants: *mongocryptd_variants
    # Put the mh tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mh-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mh-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
        build_variants: *mh_variants
    # Put the source tarball
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}
        build_variants: [rhel70, windows]

    # Put the debug symbols
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}
        bucket: build-push-testing
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}
        optional: true

    # Put the binaries tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig

    # Put the shell tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig

    # Put the cryptd tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig
        build_variants: *mongocryptd_variants

    # Put the source tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sig
        build_variants: [rhel70, windows]

    # Put the debug symbols signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig
        bucket: build-push-testing
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig
        optional: true

    # Put the signed MSI file
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        permissions: public-read
        build_variants: ["enterprise-windows", "windows"]
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi
        bucket: build-push-testing
        content_type: application/x-msi
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi

    # Put the binaries tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1

    # Put the shell tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1

    # Put the cryptd tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1
        build_variants: *mongocryptd_variants

    # Put the source tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha1
        build_variants: [rhel70, windows]

    # Put the debug symbols sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1
        optional: true

    # Push the signed MSI sha1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        permissions: public-read
        build_variants: ["enterprise-windows", "windows"]
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha1

    # Put the binaries tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256

    # Put the shell tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256

    # Put the cryptd tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256
        build_variants: *mongocryptd_variants

    # Put the source tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha256
        build_variants: [rhel70, windows]

    # Put the debug symbols sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256
        optional: true

    # Put the signed MSI sha256
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        build_variants: ["enterprise-windows", "windows"]
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256
        bucket: build-push-testing
        permissions: public-read
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha256
        content_type: text/plain

    # Put the binaries tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5

    # Put the shell tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5

    # Put the cryptd tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5
        build_variants: *mongocryptd_variants

    # Put the source tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.md5
        build_variants: [rhel70, windows]

    # Put the debug symbols md5
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5
        bucket: build-push-testing
        content_type: text/plain
        permissions: public-read
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5
        optional: true

    # Put the signed MSI md5
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        build_variants: ["enterprise-windows", "windows"]
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.md5

    - command: s3Copy.copy
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        s3_copy_files:
            #Binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

            #Shell
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

            #Cryptd
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            # MH
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mh-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mh-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'},
               'build_variants': *mh_variants}

            #Source tarball
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #MSI (Windows only)
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows', 'windows']}

            #Binaries Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

            #Shell Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

            #Cryptd Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            #Source tarball signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #SHA1 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

            #SHA1 for shell
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

            #SHA1 for cryptd
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            #SHA1 for source tarball
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #SHA1 for MSI
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows', 'windows']}

            #SHA256 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

            #SHA256 for shell
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

            #SHA256 for cryptd
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            #SHA256 for source tarball
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #SHA256 for MSI files
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows', 'windows']}

            #MD5 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

            #MD5 for shell
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

            #MD5 for cryptd
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            #MD5 for source tarball
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #MD5 for MSIs
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows', 'windows']}

    # Debug symbols are not created for all variants and the copy is optional.
    - command: s3Copy.copy
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        optional: true
        s3_copy_files:
            #Debug Symbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

            #Debug Symbols Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

            #SHA1 for debug symbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

            #SHA256 for debugsymbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

            #MD5 for debugsymbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

- <<: *task_template
  name: search
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=search --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: search_auth
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=search_auth --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: search_ssl
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=search_ssl --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- name: shared_scons_cache_pruning
  tags: []
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - func: "shared scons cache pruning"

- name: win_shared_scons_cache_pruning
  tags: []
  exec_timeout_secs: 21600 # 2 hour timeout for the task overall
  depends_on: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - func: "set up win mount script"
  - func: "shared scons cache pruning"

- name: validate_commit_message
  tags: []
  exec_timeout_secs: 600 # 10 minute timeout
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "configure evergreen api credentials"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "./src/evergreen/commit_message_validate.sh"

- name: check_for_todos
  tags: []
  exec_timeout_secs: 600 # 10 minute timeout
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "configure evergreen api credentials"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/todos_check.sh"

- <<: *task_template
  name: mqlrun
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=mqlrun

- name: update_patch_failure_history
  # Time out the task if it runs for more than 8 hours. Provides buffer for
  # when the Evergreen API is busy.
  exec_timeout_secs: 28800
  commands:
    - func: "do non-compile setup"
    - *f_expansions_write
    - func: "configure evergreen api credentials"
    - func: "update patch failure history"

- name: check_feature_flag_tags
  tags: []
  patch_only: true
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/feature_flag_tags_check.sh"

#######################################
#             Task Groups             #
#######################################
task_groups:
- <<: *compile_task_group_template
  name: compile_and_archive_dist_test_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug

- <<: *compile_task_group_template
  name: compile_and_archive_dist_test_then_package_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - package

- <<: *compile_task_group_template
  name: compile_ninja_next_TG
  tasks:
  - compile_ninja_next

- <<: *compile_task_group_template
  name: compile_build_tools_next_TG
  tasks:
  - compile_build_tools_next

- <<: *compile_task_group_template
  name: libdeps_graph_linting_TG
  tasks:
  - libdeps_graph_linting

- <<: *compile_task_group_template
  name: compile_ninja_TG
  tasks:
  - compile_ninja
  teardown_task:
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/all.build.ninja
        remote_file: ${project}/${build_variant}/${revision}/artifacts/all.${build_id}.build.ninja
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: build.ninja

- <<: *compile_task_group_template
  name: server_discovery_and_monitoring_json_test_TG
  tasks:
  - server_discovery_and_monitoring_json_test

- <<: *compile_task_group_template
  name: server_selection_json_test_TG
  tasks:
  - server_selection_json_test

- <<: *compile_task_group_template
  name: compile_run_and_archive_dbtest_TG
  tasks:
  - compile_dbtest
  - run_dbtest
  - archive_dbtest

- <<: *compile_task_group_template
  name: compile_archive_and_run_libfuzzertests_TG
  tasks:
  - compile_and_archive_libfuzzertests
  - fetch_and_run_libfuzzertests

- <<: *compile_task_group_template
  name: compile_test_and_package_serial_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_unittests
  - run_unittests
  - compile_dbtest
  - run_dbtest
  - archive_dbtest
  - compile_all
  - package

- <<: *compile_task_group_template
  name: compile_and_test_TG
  tasks:
  - compile_dist_test
  - compile_unittests
  - run_unittests
  - compile_dbtest
  - run_dbtest
  - compile_all

# These `parallel` task groups are only appropriate for builders that
# use --link-model=dynamic, and have scons_cache_scope: shared and
# scons_cache_mode: all. Such builders are able to share all build
# artifacts, and therefore will not repeatedly re-link the same
# code. In that mode, it makes sense to run all of these tasks
# concurrently, since they will share state across machines and can
# complete faster than running them serially. We keep them in task
# groups so that if they do run on the same machine, they can avoid the
# cost of re-running the setup tasks.
- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_core_stream_TG
  tasks:
  - compile_dist_test
  - determine_patch_tests
  - archive_dist_test
  - archive_dist_test_debug
  - compile_all
  - package

- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_unittest_stream_TG
  tasks:
  - compile_unittests
  - run_unittests

- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_unittest_stream_with_recording_TG
  tasks:
    - compile_unittests_for_recorded_unittest
    - run_unittests_with_recording

- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_dbtest_stream_TG
  tasks:
  - compile_dbtest
  - run_dbtest
  - archive_dbtest

- name: clang_tidy_TG
  setup_group_can_fail_task: true
  setup_group:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "kill processes"
    - func: "cleanup environment"
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "configure evergreen api credentials"
    - func: "get buildnumber"
    - func: "f_expansions_write"
    - func: "set up credentials"
    - func: "set up win mount script"
    - func: "generate compile expansions"
  teardown_group:
    - func: "f_expansions_write"
    - func: "umount shared scons directory"
    - func: "cleanup environment"
  setup_task:
    - func: "apply compile expansions"
    - func: "f_expansions_write"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
  teardown_task:
  tasks:
  - clang_tidy

- name: visibility_test_TG
  setup_group_can_fail_task: true
  max_hosts: 1
  setup_group:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "get buildnumber"
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "set up credentials"
    - func: "set up win mount script"
    - func: "generate compile expansions"
  teardown_group:
    - func: "umount shared scons directory"
  setup_task:
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "apply compile expansions"
    - func: "f_expansions_write"
  teardown_task:
      - func: "attach scons logs"
  tasks:
  - compile_visibility_test

- name: embedded_sdk_build_and_test
  setup_group_can_fail_task: true
  max_hosts: 1
  setup_group:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "get buildnumber"
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "set up credentials"
    - func: "set up win mount script"
    - func: "generate compile expansions"
  teardown_group:
    - func: "umount shared scons directory"
  setup_task:
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "apply compile expansions"
    - func: "f_expansions_write"
  teardown_task:
      - func: "attach scons logs"
  tasks:
  - "embedded_sdk_build_cdriver"
  - "embedded_sdk_install_dev"
  - "embedded_sdk_s3_put"
  - "embedded_sdk_install_tests"
  - "embedded_sdk_tests_s3_put"
  - "embedded_sdk_run_tests"
  - "embedded_sdk_s3_put_latest"
  - "embedded_sdk_tests_s3_put_latest"

- <<: *stitch_support_task_group_template
  name: stitch_support_lib_build_and_archive
  tags: ["stitch"]
  tasks:
    - "stitch_support_create_lib"
- <<: *stitch_support_task_group_template
  name: stitch_support_lib_build_and_test
  tags: ["stitch"]
  max_hosts: 1
  tasks:
    - "stitch_support_install_tests"
    - "stitch_support_run_tests"

#######################################
#               Modules               #
#######################################
# if a module is added and to be added to the manifest
# be sure to add the module to git.get_project revisions parameter
modules:
- name: enterprise
  repo: git@github.com:10gen/mongo-enterprise-modules.git
  prefix: src/mongo/db/modules
  branch: master

- name: wtdevelop
  repo: git@github.com:wiredtiger/wiredtiger.git
  prefix: src/third_party
  branch: develop

#######################################
#            Buildvariants            #
#######################################

buildvariants:

###########################################
#         Linux buildvariants             #
###########################################

- name: linux-64-repeated-execution
  stepback: false
  display_name: ~ Linux Repeated Execution
  run_on:
  - rhel80-small
  expansions:
    compile_flags: -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enable-free-mon=off --enable-http-client=off
    test_flags: >-
      --excludeWithAnyTags=requires_http_client
      --repeatSuites=10
      --shuffle
    resmoke_repeat_suites: 10
    # TODO: There are currently 2 ways of repeating suites, one for regular suites and one for
    # generated suites. Once everything is converted to generated suites, we should remove the
    # '--repeatSuites=10' from the test_flags. This will be done in SERVER-38817.
    scons_cache_scope: shared
    large_distro_name: rhel80-medium
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel80-large
  - name: build_variant_gen
  - name: .integration !.audit
    distros:
    - rhel80-medium
  - name: jsCore
  - name: jsCore_txns
  - name: .logical_session_cache
  - name: parallel_gen
  - name: .concurrency .common !.kill_terminate
    distros:
      - rhel80-medium
  - name: concurrency_replication_causal_consistency_gen

- &linux-64-debug-required-template
  name: linux-64-debug-required
  display_name: "! Shared Library Linux DEBUG"
  batchtime: 240 # 4 hours
  run_on:
  - rhel80-medium
  expansions:
    resmoke_jobs_factor: 0.5  # Avoid starting too many mongod's
    compile_flags: --dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enable-free-mon=on --enable-http-client=on --link-model=dynamic
    scons_cache_scope: shared
    scons_cache_mode: all
    test_flags: --excludeWithAnyTags=requires_http_client
    target_resmoke_time: 15
    max_sub_suites: 5
    num_scons_link_jobs_available: 0.99
    large_distro_name: rhel80-medium
  tasks:
  - name: compile_test_and_package_parallel_core_stream_TG
    distros:
      - rhel80-xlarge
  - name: compile_test_and_package_parallel_unittest_stream_TG
    distros:
      - rhel80-xlarge
  - name: compile_test_and_package_parallel_dbtest_stream_TG
    distros:
    - rhel80-xlarge
  - name: build_variant_gen
  - name: .aggregation !.encrypt
  - name: .auth !.audit !.multiversion
  - name: .causally_consistent !.wo_snapshot
  - name: .change_streams !.secondary_reads
  - name: .misc_js
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .integration !.audit
  - name: .jscore .common
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: libunwind_tests
  - name: .multi_shard
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  - name: .ocsp
  - name: .read_write_concern
  - name: .replica_sets !.encrypt !.ignore_non_generated_replica_sets_jscore_passthrough
  - name: replica_sets_jscore_passthrough_gen
  - name: replica_sets_reconfig_jscore_passthrough_gen
  - name: replica_sets_reconfig_jscore_stepdown_passthrough_gen
  - name: .retry
  - name: .read_only
  - name: session_jscore_passthrough
  - name: sharded_multi_stmt_txn_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot
  - name: sharding_gen
  - name: .stitch
  - name: server_discovery_and_monitoring_json_test_TG
    distros:
    - rhel80-large
  - name: server_selection_json_test_TG
    distros:
    - rhel80-large

- <<: *linux-64-debug-required-template
  name: linux-64-debug-wtdevelop
  display_name: "~ Linux DEBUG WiredTiger develop"
  batchtime: 240 # 4 hours
  modules:
  - wtdevelop
  expansions:
    use_wt_develop: true
    resmoke_jobs_factor: 0.5  # Avoid starting too many mongod's
    compile_flags: --dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enable-free-mon=on --enable-http-client=on
    scons_cache_mode: nolinked
    test_flags: --excludeWithAnyTags=requires_http_client

- name: linux-64-duroff
  display_name: Linux (No Journal)
  run_on:
  - rhel80-small
  expansions: &linux-64-required-duroff-expansions
    compile_flags: -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enable-free-mon=off --enable-http-client=off
    multiversion_platform: rhel80
    multiversion_edition: targeted
    # Running WiredTiger with --nojournal in a replica set is no longer supported, so this variant
    # does not include replica set tests. Since transactions are only supported on replica sets, we
    # exclude those tests as well.
    test_flags: --nojournal --excludeWithAnyTags=requires_journaling,requires_replication,requires_sharding,uses_transactions,requires_http_client
    scons_cache_scope: shared
    large_distro_name: rhel80-medium
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel80-xlarge
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: aggregation_auth
  - name: auth_gen
  - name: .misc_js !.sharded
  - name: concurrency_gen
  - name: concurrency_simultaneous_gen
  - name: disk_wiredtiger
  - name: failpoints_auth
  - name: .jscore .common !.sharding !.decimal !.txns
  - name: .jstestfuzz .common !.sharding !.repl

- name: ubuntu1804
  display_name: Ubuntu 18.04
  run_on:
  - ubuntu1804-test
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-ubuntu1804
    compile_flags: --ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu1804
    multiversion_edition: targeted
    test_flags: --excludeWithAnyTags=requires_ocsp_stapling
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: ubuntu1804
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: ubuntu1804-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jepsen
    distros:
    - ubuntu1804-build
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  - name: multiversion_gen
  - name: .powercycle
  - name: replica_sets_gen
  - name: replica_sets_jscore_passthrough
  - name: .sharding .txns
  - name: sharding_gen
  - name: sharding_jscore_passthrough
  - name: watchdog_wiredtiger
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - ubuntu1804-small

- name: enterprise-ubuntu1804-64
  display_name: Enterprise Ubuntu 18.04
  modules:
  - enterprise
  run_on:
  - ubuntu1804-test
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-ubuntu1804
    compile_flags: --ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    test_flags: --excludeWithAnyTags=requires_ocsp_stapling
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: ubuntu1804
    repo_edition: enterprise
    scons_cache_scope: shared
    large_distro_name: ubuntu1804-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build
  - name: compile_ninja_next_TG
    distros:
    - ubuntu1804-build
  - name: compile_build_tools_next_TG
    distros:
    - ubuntu1804-build
  - name: libdeps_graph_linting_TG
    distros:
      - ubuntu1804-build
  - name: compile_ninja_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: audit
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.aggregation !.replica_sets !.sharding !.jscore
  - name: external_auth
  - name: external_auth_aws
  - name: .jepsen
    distros:
    - ubuntu1804-build
  - name: .jscore .common !.decimal !.sharding
  - name: jsCore_auth
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  - name: .multiversion_fuzzer
  - name: .multiversion_passthrough
  - name: .ocsp
  - name: .random_multiversion_ds
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: sasl
  - name: sharding_auth_gen
  - name: snmp
  - name: .watchdog
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - ubuntu1804-small

- name: tla-plus
  display_name: TLA+
  run_on:
  - ubuntu1804-build
  batchtime: 10080 # 7 days
  stepback: false
  expansions:
    timeout_secs: 345600 # 4 days
  tasks:
  - name: tla_plus

- name: enterprise-ubuntu1804-arm64
  display_name: Enterprise Ubuntu 18.04 arm64
  modules:
  - enterprise
  run_on:
  - ubuntu1804-arm64-build
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: aarch64-enterprise-ubuntu1804
    compile_flags: --ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    test_flags: --excludeWithAnyTags=requires_ocsp_stapling
    resmoke_jobs_max: 4 # Avoid starting too many mongod's on ARM test servers
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: arm64
    packager_distro: ubuntu1804
    repo_edition: enterprise
    multiversion_platform: ubuntu1804
    multiversion_architecture: arm64
    multiversion_architecture_42_or_later: aarch64
    multiversion_edition: enterprise
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: build_variant_gen
  - name: aggregation
  - name: aggregation_wildcard_fuzzer_gen
  - name: .auth !.audit !.multiversion !.jscore
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: fle
  - name: .jscore .common !.auth
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .txns
  - name: sharding_gen
  - name: sharding_jscore_passthrough
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - ubuntu1804-test

- name: ubuntu1804-arm64
  display_name: Ubuntu 18.04 arm64
  run_on:
  - ubuntu1804-arm64-build
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: aarch64-ubuntu1804
    compile_flags: --ssl --ocsp-stapling=off MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    test_flags: --excludeWithAnyTags=requires_ocsp_stapling
    resmoke_jobs_max: 8 # Avoid starting too many mongod's on ARM test servers
    has_packages: true
    packager_script: packager.py
    packager_arch: arm64
    packager_distro: ubuntu1804
    repo_edition: org
    multiversion_platform: ubuntu1804
    multiversion_architecture: arm64
    multiversion_architecture_42_or_later: aarch64
    multiversion_edition: targeted
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: build_variant_gen
  - name: free_monitoring
  - name: jsCore
  - name: replica_sets_jscore_passthrough
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - ubuntu1804-test

- name: ubuntu2004
  display_name: Ubuntu 20.04
  run_on:
  - ubuntu2004-small
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-ubuntu2004
    compile_flags: --ssl MONGO_DISTMOD=ubuntu2004 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu2004
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: ubuntu2004
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: ubuntu2004-large
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu2004-large
  - name: build_variant_gen
  - name: .aggfuzzer .common !.multiversion
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  # - name: multiversion_gen
  - name: replica_sets_gen
  - name: replica_sets_jscore_passthrough
  - name: .sharding .txns
  - name: sharding_gen
  - name: sharding_jscore_passthrough
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - ubuntu2004-small

- name: enterprise-ubuntu2004-64
  display_name: Enterprise Ubuntu 20.04
  modules:
  - enterprise
  run_on:
  - ubuntu2004-small
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-ubuntu2004
    compile_flags: --ssl MONGO_DISTMOD=ubuntu2004 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu2004
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: ubuntu2004
    repo_edition: enterprise
    scons_cache_scope: shared
    large_distro_name: ubuntu2004-large
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu2004-large
  - name: build_variant_gen
  - name: .aggfuzzer .common !.multiversion
  - name: audit
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.aggregation !.replica_sets !.sharding !.jscore
  - name: external_auth
  - name: external_auth_aws
  - name: .jscore .common !.decimal !.sharding
  - name: jsCore_auth
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  - name: .ocsp
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: sasl
  - name: sharding_auth_gen
  - name: snmp
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - ubuntu2004-small

- name: enterprise-ubuntu2004-arm64
  display_name: Enterprise Ubuntu 20.04 arm64
  modules:
  - enterprise
  run_on:
  - ubuntu2004-arm64-large
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: aarch64-enterprise-ubuntu2004
    compile_flags: --ssl MONGO_DISTMOD=ubuntu2004 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    resmoke_jobs_max: 4 # Avoid starting too many mongod's on ARM test servers
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: arm64
    packager_distro: ubuntu2004
    repo_edition: enterprise
    multiversion_platform: ubuntu2004
    multiversion_architecture: arm64
    multiversion_architecture_42_or_later: aarch64
    multiversion_edition: enterprise
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: build_variant_gen
  - name: aggregation
  - name: aggregation_wildcard_fuzzer_gen
  - name: .auth !.audit !.multiversion !.jscore
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: fle
  - name: .jscore .common !.auth
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .txns
  - name: sharding_gen
  - name: sharding_jscore_passthrough
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - ubuntu2004-test

- name: ubuntu2004-arm64
  display_name: Ubuntu 20.04 arm64
  run_on:
  - ubuntu2004-arm64-large
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: aarch64-ubuntu2004
    compile_flags: --ssl MONGO_DISTMOD=ubuntu2004 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    resmoke_jobs_max: 8 # Avoid starting too many mongod's on ARM test servers
    has_packages: true
    packager_script: packager.py
    packager_arch: arm64
    packager_distro: ubuntu2004
    repo_edition: org
    multiversion_platform: ubuntu2004
    multiversion_architecture: arm64
    multiversion_architecture_42_or_later: aarch64
    multiversion_edition: targeted
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: build_variant_gen
  - name: free_monitoring
  - name: jsCore
  - name: replica_sets_jscore_passthrough
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - ubuntu2004-test

- &enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-template
  name: enterprise-ubuntu2104-dynamic-gcc11-debug-experimental
  display_name: "~ Shared Library Enterprise Ubuntu 21.04 GCC11 DEBUG"
  batchtime: 1440 # 1 day
  modules:
  - enterprise
  run_on:
  - ubuntu2104-small
  expansions: &enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-expansions
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    compile_flags: --dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --link-model=dynamic CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11 --disable-warnings-as-errors
    has_packages: false
    scons_cache_scope: shared
    scons_cache_mode: all
    large_distro_name: ubuntu2104-large
    num_scons_link_jobs_available: 0.99
  tasks: &enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-tasks
  - name: compile_test_and_package_parallel_core_stream_TG
    distros:
      - ubuntu2104-large
  - name: compile_test_and_package_parallel_unittest_stream_TG
    distros:
      - ubuntu2104-large
  - name: compile_test_and_package_parallel_dbtest_stream_TG
    distros:
      - ubuntu2104-large

- <<: *enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-template
  name: enterprise-ubuntu2104-dynamic-clang12-debug-experimental
  display_name: "~ Shared Library Enterprise Ubuntu 21.04 clang12 DEBUG"
  expansions:
    <<: *enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-expansions
    compile_flags: --dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --link-model=dynamic CC=/usr/bin/clang-12 CXX=/usr/bin/clang++-12 --disable-warnings-as-errors

- <<: *enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-template
  name: enterprise-ubuntu2104-dynamic-gcc11-cxx20-debug-experimental
  display_name: "~ Shared Library Enterprise Ubuntu 21.04 GCC11 C++20 DEBUG"
  expansions:
    <<: *enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-expansions
    compile_flags: --dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --link-model=dynamic CC=/usr/bin/gcc-11 CXX=/usr/bin/g++-11 --disable-warnings-as-errors --cxx-std=20

- <<: *enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-template
  name: enterprise-ubuntu2104-dynamic-clang12-cxx20-debug-experimental
  display_name: "~ Shared Library Enterprise Ubuntu 21.04 clang12 C++20 DEBUG"
  expansions:
    <<: *enterprise-ubuntu2104-dynamic-gcc11-debug-experimental-expansions
    compile_flags: --dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --link-model=dynamic CC=/usr/bin/clang-12 CXX=/usr/bin/clang++-12 --disable-warnings-as-errors --cxx-std=20

- name: enterprise-linux-64-amazon-ami
  display_name: "Enterprise Amazon Linux"
  modules:
  - enterprise
  run_on:
  - amazon1-2018-test
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-amzn64
    compile_flags: --ssl MONGO_DISTMOD=amzn64 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    test_flags: --excludeWithAnyTags=incompatible_with_amazon_linux
    multiversion_platform: amzn64
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: amazon
    repo_edition: enterprise
    scons_cache_scope: shared
    virtualenv: /opt/mongodbtoolchain/v3/bin/virtualenv
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - amazon1-2018-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: .auth !.multiversion
  - name: audit
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.aggregation
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  - name: noPassthrough_gen
  - name: noPassthroughWithMongod_gen
  - name: .powercycle
  - name: .replica_sets .common
  - name: sasl
  - name: serial_run
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .txns
  - name: slow1_gen
  - name: snmp
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - amazon1-2018-small

- name: amazon
  display_name: Amazon Linux
  run_on:
  - amazon1-2018-test
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-amazon
    compile_flags: --ssl MONGO_DISTMOD=amazon -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    test_flags: --excludeWithAnyTags=incompatible_with_amazon_linux
    multiversion_platform: amazon
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: amazon
    repo_edition: org
    scons_cache_scope: shared
    virtualenv: /opt/mongodbtoolchain/v3/bin/virtualenv
    large_distro_name: amazon1-2018-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - amazon1-2018-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  - name: multiversion_gen
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs
  - name: .sharding .txns
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - amazon1-2018-small

- name: enterprise-amazon2
  display_name: "Enterprise Amazon Linux 2"
  modules:
  - enterprise
  run_on:
  - amazon2-test
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    test_flags: >-
      --excludeWithAnyTags=SERVER-34286,incompatible_with_amazon_linux
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-amazon2
    compile_flags: --ssl MONGO_DISTMOD=amazon2 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: amazon2
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: amazon2
    repo_edition: enterprise
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - amazon2-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: audit
  - name: .auth !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.aggregation
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  - name: noPassthrough_gen
  - name: noPassthroughWithMongod_gen
  - name: .replica_sets .common
  - name: sasl
  - name: serial_run
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .txns !.csrs
  - name: slow1_gen
  - name: snmp
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - amazon2-small

- name: amazon2
  display_name: Amazon Linux 2
  run_on:
  - amazon2-test
  expansions:
    test_flags: >-
      --excludeWithAnyTags=SERVER-34286,incompatible_with_amazon_linux
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-amazon2
    compile_flags: --ssl MONGO_DISTMOD=amazon2 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: amazon2
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: amazon2
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: amazon-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - amazon2-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  - name: multiversion_gen
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs
  - name: .sharding .txns
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - amazon2-small

- name: enterprise-amazon2-arm64
  display_name: "Enterprise Amazon Linux 2 arm64"
  modules:
  - enterprise
  run_on:
  - amazon2-arm64-small
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: aarch64-enterprise-amazon2
    compile_flags: --ssl MONGO_DISTMOD=amazon2 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    test_flags: --excludeWithAnyTags=incompatible_with_amazon_linux
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: aarch64
    packager_distro: amazon2
    repo_edition: enterprise
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - amazon2-arm64-large
  - name: build_variant_gen
  - name: .aggfuzzer !.multiversion
  - name: audit
  - name: auth_audit_gen
  - name: auth_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.sharding !.replica_sets !.aggregation !.jscore
  - name: external_auth
  - name: external_auth_aws
  - name: .jscore .common !.decimal !.sharding
  - name: jsCore_txns_large_txns_format
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: .replica_sets .multi_oplog
  - name: sasl
  - name: search
  - name: search_auth
  - name: search_ssl
  - name: sharding_auth_audit_gen
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - rhel80-small

- name: amazon2-arm64
  display_name: Amazon Linux 2 arm64
  run_on:
  - amazon2-arm64-small
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: aarch64-amazon2
    compile_flags: --ssl MONGO_DISTMOD=amazon2 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    test_flags: --excludeWithAnyTags=incompatible_with_amazon_linux
    has_packages: true
    packager_script: packager.py
    packager_arch: aarch64
    packager_distro: amazon2
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: amazon2-arm64-large
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - amazon2-arm64-large
  - name: build_variant_gen
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
    distros:
      - amazon2-arm64-large
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .txns
  - name: .sharding .common !.csrs !.multiversion
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - rhel80-small

- name: stm-daily-cron
  modules:
  - enterprise
  display_name: "~ STM Daily Cron"
  run_on:
  - rhel80-small
  expansions:
    multiversion_platform: rhel80
    multiversion_edition: enterprise
  stepback: false
  tasks:
  - name: lint_fuzzer_sanity_all
  - name: powercycle_sentinel
  - name: powercycle_smoke_skip_compile_gen

- name: stm-hourly-cron
  display_name: "~ STM Hourly Cron"
  batchtime: 60
  run_on:
    - rhel80-small
  stepback: false
  tasks:
    - name: update_patch_failure_history

- name: security-daily-cron
  modules:
  - enterprise
  display_name: "~ Security Daily Cron"
  run_on:
  - rhel80-small
  stepback: false
  tasks:
  - name: blackduck_scanner

###########################################
#         Windows buildvariants           #
###########################################

- name: windows-debug-suggested
  display_name: "* Windows DEBUG"
  batchtime: 240 # 4 hours
  run_on:
  - windows-vsCurrent-small
  expansions:
    exe: ".exe"
    content_type: application/zip
    compile_flags: --dbg=on --opt=on --win-version-min=win10 -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5") MONGO_DISTMOD=windows
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    large_distro_name: windows-vsCurrent-large
    test_flags: &windows_common_test_excludes --excludeWithAnyTags=incompatible_with_windows_tls
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - windows-vsCurrent-xlarge
  - name: compile_build_tools_next_TG
    distros:
    - windows-vsCurrent-xlarge
  - name: build_variant_gen
  - name: .aggregation !.auth !.encrypt
  - name: aggregation_expression_multiversion_fuzzer_gen
  - name: aggregation_expression_optimization_fuzzer_gen
  - name: auth_gen
  - name: .causally_consistent !.sharding
  - name: .change_streams !.secondary_reads
  - name: .misc_js !.non_win_dbg
  - name: .concurrency .debug_only
    distros:
    - windows-vsCurrent-large
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: initial_sync_fuzzer_gen
  - name: .integration !.audit
    distros:
    - windows-vsCurrent-large
  - name: .jscore .common !.auth !.sharding
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: multi_shard_multi_stmt_txn_jscore_passthrough_gen
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  - name: .read_write_concern !.large
  - name: .read_write_concern .large
    distros:
    - windows-vsCurrent-large
  - name: .read_only
  - name: .rollbackfuzzer
  - name: .replica_sets !.large !.encrypt !.auth
  - name: .replica_sets .large
    distros:
    - windows-vsCurrent-large
  - name: .resharding_fuzzer
  - name: retryable_writes_jscore_passthrough_gen
  - name: retryable_writes_jscore_stepdown_passthrough
    distros:
    - windows-vsCurrent-large
  - name: session_jscore_passthrough
  - name: sharding_gen
  - name: .stitch
  - name: server_discovery_and_monitoring_json_test_TG
  - name: server_selection_json_test_TG

- &enterprise-windows-required-template
  name: enterprise-windows-required
  display_name: "! Enterprise Windows"
  batchtime: 240 # 4 hours
  modules:
  - enterprise
  run_on:
  - windows-vsCurrent-small
  expansions:
    burn_in_tests_build_variant: enterprise-windows-suggested
    exe: ".exe"
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5") --win-version-min=win10
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    jstestfuzz_num_generated_files: 35
    target_resmoke_time: 20
    max_sub_suites: 5
    large_distro_name: windows-vsCurrent-large
    push_path: windows
    push_bucket: downloads.10gen.com
    push_name: windows
    push_arch: x86_64-enterprise
    test_flags: *windows_common_test_excludes
  tasks:
  - name: compile_and_archive_dist_test_then_package_TG
    distros:
    - windows-vsCurrent-xlarge
  - name: compile_build_tools_next_TG
    distros:
    - windows-vsCurrent-xlarge
  - name: build_variant_gen
  - name: burn_in_tests_gen
  - name: buildscripts_test
  - name: noPassthrough_gen
  - name: server_discovery_and_monitoring_json_test_TG
  - name: server_selection_json_test_TG
  - name: compile_run_and_archive_dbtest_TG
    distros:
      - windows-vsCurrent-xlarge
  - name: unittest_shell_hang_analyzer_gen

- <<: *enterprise-windows-required-template
  name: enterprise-windows-all-feature-flags-required
  display_name: "! Enterprise Windows (all feature flags)"
  batchtime: 240 # 4 hours
  expansions:
    burn_in_tests_build_variant: enterprise-windows-suggested
    exe: ".exe"
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5")  --win-version-min=win10
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    jstestfuzz_num_generated_files: 35
    target_resmoke_time: 20
    max_sub_suites: 5
    large_distro_name: windows-vsCurrent-large
    # To force disable feature flags even on the all feature flags variant, please use this file:
    # buildscripts/resmokeconfig/fully_disabled_feature_flags.yml
    test_flags: >-
        --runAllFeatureFlagTests
        --excludeWithAnyTags=incompatible_with_windows_tls
  tasks:
    - name: compile_and_archive_dist_test_then_package_TG
      distros:
        - windows-vsCurrent-xlarge
    - name: compile_build_tools_next_TG
      distros:
        - windows-vsCurrent-xlarge
    - name: build_variant_gen
    - name: burn_in_tests_gen
    - name: noPassthrough_gen
# Disabling as the following tests are not aware of feature flags.
#    - name: buildscripts_test
#    - name: server_discovery_and_monitoring_json_test_TG
#    - name: server_selection_json_test_TG
#    - name: compile_run_and_archive_dbtest_TG
#      distros:
#        - windows-vsCurrent-xlarge
#    - name: unittest_shell_hang_analyzer_gen

- &enterprise-windows-suggested-template
  name: enterprise-windows-suggested
  display_name: "* Enterprise Windows"
  batchtime: 240 # 4 hours
  modules:
    - enterprise
  run_on:
    - windows-vsCurrent-small
  expansions:
    exe: ".exe"
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5") --win-version-min=win10
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    jstestfuzz_num_generated_files: 35
    target_resmoke_time: 20
    max_sub_suites: 3
    large_distro_name: windows-vsCurrent-large
    push_path: windows
    push_bucket: downloads.10gen.com
    push_name: windows
    push_arch: x86_64-enterprise
    test_flags: *windows_common_test_excludes
  tasks:
    - name: compile_test_and_package_serial_TG
      distros:
        - windows-vsCurrent-xlarge
    - name: build_variant_gen
    - name: audit
    - name: auth_audit_gen
    - name: buildscripts_test
    - name: causally_consistent_jscore_txns_passthrough
      distros:
        - windows-vsCurrent-large
    - name: .encrypt !.aggregation !.replica_sets !.sharding !.jscore
    - name: external_auth
    - name: external_auth_aws
    - name: external_auth_windows
      distros:
        - windows-64-2016
    - name: .jscore .common !.sharding
    - name: jsCore_auth
    - name: jsCore_ese
    - name: jsCore_txns_large_txns_format
    - name: .jstestfuzz .common
    - name: mqlrun
    - name: noPassthrough_gen
    - name: noPassthroughWithMongod_gen
    - name: .replica_sets .common
    - name: .replica_sets .multi_oplog
    - name: replica_sets_ese_gen
    - name: sasl
    - name: server_discovery_and_monitoring_json_test_TG
    - name: server_selection_json_test_TG
    - name: .sharding .txns
    - name: sharding_auth_gen
    - name: sharding_auth_audit_gen
    - name: sharding_ese_gen
    - name: snmp
    - name: unittest_shell_hang_analyzer_gen

- <<: *enterprise-windows-suggested-template
  name: enterprise-windows-all-feature-flags-suggested
  display_name: "* Enterprise Windows (all feature flags)"
  batchtime: 240 # 4 hours
  expansions:
    exe: ".exe"
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5") --win-version-min=win10
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    jstestfuzz_num_generated_files: 35
    target_resmoke_time: 20
    max_sub_suites: 3
    large_distro_name: windows-vsCurrent-large
    # To force disable feature flags even on the all feature flags variant, please use this file:
    # buildscripts/resmokeconfig/fully_disabled_feature_flags.yml
    test_flags: >-
        --runAllFeatureFlagTests
        --excludeWithAnyTags=incompatible_with_windows_tls
  tasks:
    - name: compile_and_archive_dist_test_then_package_TG
      distros:
        - windows-vsCurrent-xlarge
    - name: build_variant_gen
    - name: audit
    - name: auth_audit_gen
    - name: causally_consistent_jscore_txns_passthrough
      distros:
        - windows-vsCurrent-large
    - name: .encrypt !.aggregation !.replica_sets !.sharding !.jscore
    - name: external_auth
    - name: external_auth_aws
    - name: external_auth_windows
      distros:
        - windows-64-2016
    - name: .jscore .common !.sharding
    - name: jsCore_auth
    - name: jsCore_ese
    - name: jsCore_txns_large_txns_format
    - name: .jstestfuzz .common
    - name: mqlrun
    - name: noPassthrough_gen
    - name: noPassthroughWithMongod_gen
    - name: .replica_sets .common !.ignore_non_generated_replica_sets_jscore_passthrough
    - name: .replica_sets .multi_oplog !.ignore_non_generated_replica_sets_jscore_passthrough
    - name: replica_sets_jscore_passthrough_gen
    - name: replica_sets_ese_gen
    - name: sasl
    - name: .sharding .txns
    - name: sharding_auth_gen
    - name: sharding_auth_audit_gen
    - name: sharding_ese_gen
    - name: snmp
# Disabling as the following tests are not aware of feature flags.
#    - name: buildscripts_test
#    - name: unittest_shell_hang_analyzer_gen
#    - name: server_selection_json_test_TG
#    - name: server_discovery_and_monitoring_json_test_TG

- <<: *enterprise-windows-nopush-template
  name: enterprise-windows-benchmarks
  display_name: "~ Enterprise Windows (Benchmarks)"
  tasks:
  - name: compile_benchmarks
    distros:
    - windows-vsCurrent-large
  - name: .benchmarks

- <<: *enterprise-windows-nopush-template
  name: enterprise-windows-wtdevelop
  display_name: "~ Enterprise Windows WiredTiger develop"
  batchtime: 240 # 4 hours
  modules:
  - enterprise
  - wtdevelop
  expansions:
    <<: *enterprise-windows-nopush-expansions-template
    use_wt_develop: true

- name: enterprise-windows-inmem
  display_name: Enterprise Windows (inMemory)
  modules:
  - enterprise
  run_on:
  - windows-vsCurrent-small
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi
    exe: ".exe"
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5") --win-version-min=win10
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    test_flags: --storageEngine=inMemory --excludeWithAnyTags=requires_persistence,requires_journaling,incompatible_with_windows_tls
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    large_distro_name: windows-vsCurrent-large
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - windows-vsCurrent-large
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: audit
  - name: auth_audit_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .concurrency .common
    distros:
    - windows-vsCurrent-large
  - name: concurrency_replication_causal_consistency_gen
  - name: initial_sync_fuzzer_gen
  - name: .jscore .common !.decimal !.sharding
  - name: .jstestfuzz .common !.flow_control  # Flow control jstestfuzz take longer.
  - name: .read_write_concern .linearize !.durable_history
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: replica_sets_multi_stmt_txn_jscore_passthrough
  - name: sasl
  - name: .sharding .txns
  - name: sharding_auth_gen
  - name: sharding_auth_audit_gen
  - name: snmp
  - name: .ssl
  - name: .resharding_fuzzer

- name: windows
  display_name: Windows
  run_on:
  - windows-vsCurrent-small
  expansions:
    additional_package_targets: msi
    exe: ".exe"
    push_path: windows
    push_bucket: downloads.mongodb.org
    push_name: windows
    push_arch: x86_64
    multiversion_platform: windows_x86_64-2008plus-ssl
    multiversion_platform_42_or_later: windows_x86_64-2012plus
    multiversion_platform_44_or_later: windows
    multiversion_edition: base
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5") --win-version-min=win10
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    large_distro_name: windows-vsCurrent-large
    test_flags: *windows_common_test_excludes
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - windows-vsCurrent-large
  - name: build_variant_gen
  - name: .aggfuzzer
  - name: .aggregation !.auth !.encrypt !.unwind
  - name: auth_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
    # Some concurrency workloads require a lot of memory, so we use machines
    # with more RAM for these suites.
  - name: .concurrency !.ubsan !.no_txns !.kill_terminate !.common !.debug_only
    distros:
      - windows-vsCurrent-large
  - name: .concurrency .common
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common !.auth
  - name: jsonSchema
  - name: .jstestfuzz !.initsync !.flow_control !.stepdowns
  - name: multiversion_gen
  - name: multiversion_auth_gen
  - name: .query_fuzzer
  - name: .read_write_concern
  - name: replica_sets_gen
  - name: replica_sets_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .txns
  - name: .sharding .common !.csrs
  - name: .ssl
  - name: .stitch
  - name: .updatefuzzer
  - name: push
    distros:
    - rhel70-small

- name: enterprise-windows
  display_name: "Enterprise Windows"
  modules:
    - enterprise
  run_on:
    - windows-vsCurrent-small
  expansions:
    exe: ".exe"
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi archive-mh archive-mh-debug
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5") --win-version-min=win10
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    jstestfuzz_num_generated_files: 35
    target_resmoke_time: 20
    max_sub_suites: 3
    large_distro_name: windows-vsCurrent-large
    push_path: windows
    push_bucket: downloads.10gen.com
    push_name: windows
    push_arch: x86_64-enterprise
    test_flags: *windows_common_test_excludes
    exec_timeout_secs: 14400 # 3 hour timeout
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - windows-vsCurrent-large
  - name: build_variant_gen
  - name: .aggfuzzer
  - name: .aggregation !.auth !.encrypt !.unwind
  - name: auth_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
    # Some concurrency workloads require a lot of memory, so we use machines
    # with more RAM for these suites.
  - name: .concurrency !.ubsan !.no_txns !.kill_terminate !.common !.debug_only
    distros:
      - windows-vsCurrent-large
  - name: .concurrency .common
  - name: disk_wiredtiger
  - name: .jscore .common !.auth
  - name: jsonSchema
  - name: .jstestfuzz !.initsync !.flow_control !.stepdowns
  - name: multiversion_gen
  - name: multiversion_auth_gen
  - name: powercycle_gen
  - name: .query_fuzzer
  - name: .read_write_concern
  - name: replica_sets_gen
  - name: replica_sets_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .txns
  - name: .sharding .common !.csrs
  - name: .ssl
  - name: .stitch
  - name: .updatefuzzer
  - name: push
    distros:
    - rhel70-small

- name: enterprise-windows-debug-unoptimized
  display_name: Enterprise Windows DEBUG (Unoptimized)
  modules:
  - enterprise
  run_on:
  - windows-vsCurrent-small
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    exe: ".exe"
    content_type: application/zip
    compile_flags: --dbg=on --opt=off --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(bc <<< "$(grep -c '^processor' /proc/cpuinfo) / 1.5") --win-version-min=win10
    num_scons_link_jobs_available: 0.25
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    test_flags: *windows_common_test_excludes
  tasks:
  # This variant tests that unoptimized, DEBUG mongos and mongod binaries can run on Windows.
  # It has a minimal amount of tasks because unoptimized builds are slow, which causes
  # timing-sensitive tests to fail.
  - name: compile_and_archive_dist_test_then_package_TG
    distros:
    - windows-vsCurrent-large
  - name: compile_ninja_next_TG
    distros:
    - windows-vsCurrent-large
  - name: compile_build_tools_next_TG
    distros:
    - windows-vsCurrent-large
  - name: audit
  # Do not add more tasks to this list.

###########################################
#             OSX buildvariants           #
###########################################

- name: macos
  display_name: macOS
  run_on:
  - macos-1014
  expansions:
    test_flags: --excludeWithAnyTags=incompatible_with_macos
    push_path: osx
    push_bucket: downloads.mongodb.org
    push_name: macos
    push_arch: x86_64
    compile_env: DEVELOPER_DIR=/Applications/Xcode10.2.app
    compile_flags: --ssl -j$(sysctl -n hw.logicalcpu) --libc++ --variables-files=etc/scons/xcode_macosx.vars
    resmoke_jobs_max: 6
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: compile_build_tools_next_TG
  - name: build_variant_gen
  - name: .aggregation !.auth !.encrypt !.unwind
  - name: auth_gen
  - name: .causally_consistent !.sharding
  - name: .change_streams !.secondary_reads
  - name: .misc_js
  - name: .concurrency !.ubsan !.no_txns !.debug_only !.kill_terminate
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: initial_sync_fuzzer_gen
  - name: .jscore .common !.auth
  - name: jsCore_txns_large_txns_format
  - name: .jstestfuzz .causal
  - name: .jstestfuzz .interrupt
  - name: .jstestfuzz .common
  - name: .jstestfuzz .session
  - name: .logical_session_cache .one_sec
  - name: .query_fuzzer
  - name: .read_write_concern !.linearize
  - name: replica_sets_gen
  - name: replica_sets_kill_secondaries_jscore_passthrough
  - name: replica_sets_large_txns_format_gen
  - name: .replica_sets .common !.auth
  - name: retryable_writes_jscore_passthrough_gen
  - name: .rollbackfuzzer
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .txns
  - name: .ssl
  - name: .stitch
  - name: unittest_shell_hang_analyzer_gen
  - name: push
    distros:
    - rhel70-small

- &macos-debug-template
  name: macos-debug-suggested
  display_name: "* Shared Library macOS DEBUG"
  batchtime: 240 # 4 hours
  run_on:
  - macos-1014
  expansions: &macos-debug-expansions
    test_flags: --excludeWithAnyTags=incompatible_with_macos
    resmoke_jobs_max: 6
    compile_env: DEVELOPER_DIR=/Applications/Xcode10.2.app
    compile_flags: --ssl --dbg=on --opt=on -j$(sysctl -n hw.logicalcpu) --libc++ --variables-files=etc/scons/xcode_macosx.vars --link-model=dynamic
    num_scons_link_jobs_available: 0.99
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: compile_build_tools_next_TG
  - name: build_variant_gen
  - name: aggregation
  - name: auth_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: disk_wiredtiger
  - name: failpoints
  - name: .jscore .common !.auth !.sharding
  - name: jsCore_txns_large_txns_format
  - name: mongosTest
  - name: replica_sets_gen
  - name: replica_sets_large_txns_format_gen
  - name: .ssl
  - name: .stitch
  - name: unittest_shell_hang_analyzer_gen

- name: enterprise-macos
  display_name: Enterprise macOS
  modules:
  - enterprise
  run_on:
  - macos-1014
  expansions:
    test_flags: --excludeWithAnyTags=incompatible_with_macos
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: osx
    push_bucket: downloads.10gen.com
    push_name: macos
    push_arch: x86_64-enterprise
    compile_env: DEVELOPER_DIR=/Applications/Xcode10.2.app
    compile_flags: --ssl -j$(sysctl -n hw.logicalcpu) --libc++ --variables-files=etc/scons/xcode_macosx.vars
    resmoke_jobs_max: 6
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: compile_ninja_next_TG
  - name: compile_build_tools_next_TG
  - name: libdeps_graph_linting_TG
  - name: build_variant_gen
  - name: audit
  - name: auth_audit_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.replica_sets !.sharding !.aggregation !.jscore
  - name: .jscore .common !.decimal !.sharding
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: mqlrun
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: sasl
  - name: push
    distros:
    - rhel70-small

- name: enterprise-macos-xcode-current
  display_name: "~ Enterprise macOS Xcode Current"
  modules:
  - enterprise
  run_on:
  - macos-1015
  expansions:
    test_flags: --excludeWithAnyTags=incompatible_with_macos
    compile_env: DEVELOPER_DIR=/Applications/Xcode12.4.app
    compile_flags: --ssl -j$(sysctl -n hw.logicalcpu) --libc++ --link-model=dynamic --variables-files=etc/scons/xcode_macosx.vars
    resmoke_jobs_max: 6
    num_scons_link_jobs_available: 0.99
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: build_variant_gen
  - name: audit
  - name: auth_audit_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.replica_sets !.sharding !.aggregation !.jscore !.ssl
  - name: .jscore .common !.decimal !.sharding
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: mqlrun
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough_gen
  - name: sasl

- name: enterprise-macos-rosetta-2
  display_name: "Enterprise macOS Via Rosetta 2"
  modules:
  - enterprise
  run_on:
  - macos-1100-arm64
  expansions:
    test_flags: --excludeWithAnyTags=incompatible_with_macos
    compile_env: DEVELOPER_DIR=/Applications/Xcode12.4.app
    compile_flags: --ssl -j$(sysctl -n hw.logicalcpu) --libc++ --link-model=dynamic --variables-files=etc/scons/xcode_macosx.vars
    resmoke_jobs_max: 6
    num_scons_link_jobs_available: 0.99
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: build_variant_gen
  - name: audit
  - name: auth_audit_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.replica_sets !.sharding !.aggregation !.jscore !.ssl
  - name: .jscore .common !.decimal !.sharding
  - name: .logical_session_cache .one_sec
  - name: mqlrun
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough_gen
  - name: sasl

- name: enterprise-macos-arm64
  display_name: "~ Enterprise macOS arm64 (--js-engine=none)"
  modules:
  - enterprise
  run_on:
  - macos-1100-arm64
  expansions:
    test_flags: --excludeWithAnyTags=incompatible_with_macos
    compile_env: DEVELOPER_DIR=/Applications/Xcode12.4.app
    compile_flags: --ssl --js-engine=none -j$(sysctl -n hw.logicalcpu) --link-model=dynamic --libc++ --variables-files=etc/scons/xcode_macosx_arm.vars
    resmoke_jobs_max: 6
    num_scons_link_jobs_available: 0.99
  tasks:
  - name: compile_and_test_TG

###########################################
#          Embedded SDK buildvariants     #
###########################################

- name: embedded-sdk-macos
  display_name: "Embedded SDK - macOS"
  run_on:
  - macos-1014
  batchtime: 10080 # 7 days
  expansions:
    test_flags: --excludeWithAnyTags=uses_transactions,incompatible_with_macos
    cmake_path: /Applications/cmake-3.11.0-Darwin-x86_64/CMake.app/Contents/bin/cmake
    compile_env: DEVELOPER_DIR=/Applications/Xcode10.2.app
    compile_flags: >-
      --lto
      --variables-files=etc/scons/xcode_macosx.vars
      -j$(sysctl -n hw.logicalcpu)
      LIBPATH="\$BUILD_ROOT/mongo-embedded-sdk-\$MONGO_VERSION/lib"
    cdriver_cmake_osx_deployment_target: "10.14"
    cdriver_cmake_flags: >-
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DCMAKE_OSX_SYSROOT="$(xcrun --sdk macosx --show-sdk-path)"
        -DCMAKE_OSX_ARCHITECTURES=x86_64
        -DENABLE_SSL=DARWIN
        -DENABLE_ZLIB=BUNDLED
        -DCMAKE_C_FLAGS="-Wunguarded-availability"
        -DCMAKE_INSTALL_RPATH=@loader_path/../lib
    disable_unit_tests: true
  tasks:
  - name: embedded_sdk_build_and_test

- name: embedded-sdk-ubuntu-1804-x86_64
  display_name: "Embedded SDK - Ubuntu 18.04 x86_64"
  run_on:
  - ubuntu1804-build
  expansions:
    test_flags: --excludeWithAnyTags=uses_transactions
    # We need --allocator=system here to work around SERVER-27675
    compile_flags: >-
      --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      -j$(grep -c ^processor /proc/cpuinfo)
      LIBPATH="\$BUILD_ROOT/mongo-embedded-sdk-\$MONGO_VERSION/lib"
    cdriver_cmake_flags: >-
        -DCMAKE_BUILD_TYPE=RelWithDebInfo
        -DCMAKE_C_COMPILER=/opt/mongodbtoolchain/v3/bin/gcc
        -DCMAKE_CXX_COMPILER=/opt/mongodbtoolchain/v3/bin/g++
        -DCMAKE_C_FLAGS="-flto"
        -DCMAKE_INSTALL_RPATH=\$ORIGIN/../lib
    disable_unit_tests: true
  tasks:
  - name: embedded_sdk_build_and_test

###########################################
#          Redhat buildvariants           #
###########################################

- name: enterprise-rhel-80-64-bit
  display_name: "Enterprise RHEL 8.0"
  batchtime: 1440 # 1 day
  modules:
  - enterprise
  run_on:
  - rhel80-small
  expansions: &enterprise-rhel-80-64-bit-expansions
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-rhel80
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: rhel80
    repo_edition: enterprise
    scons_cache_scope: shared
    jstestfuzz_num_generated_files: 40
    jstestfuzz_concurrent_num_files: 10
    target_resmoke_time: 10
    max_sub_suites: 3
    large_distro_name: rhel80-medium
    spawn_resmoke_using: jasper
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel80-large
  - name: build_variant_gen
  - name: .aggfuzzer
  - name: .aggregation
  - name: audit
  - name: .auth
  - name: unittest_shell_hang_analyzer_gen
  - name: .causally_consistent !.sharding
  - name: .change_streams
  - name: .change_stream_fuzzer
  - name: .misc_js
  - name: .concurrency !.large !.ubsan !.no_txns !.debug_only
  - name: .concurrency .large !.ubsan !.no_txns !.debug_only
    distros:
    - rhel80-medium
  - name: disk_wiredtiger
  - name: .encrypt
  - name: idl_tests
  - name: initial_sync_fuzzer_gen
  - name: .integration
    distros:
    - rhel80-medium
  - name: .jscore .common
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .jstestfuzz !.flow_control  # Flow control jstestfuzz take longer.
  - name: libunwind_tests
  - name: mqlrun
  - name: .multi_shard
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  - name: multiversion_gen
  - name: .query_fuzzer
  - name: .random_multiversion_ds
  - name: .read_write_concern .large
    distros:
    - rhel80-medium
  - name: .read_write_concern !.large
  - name: .replica_sets !.encrypt !.auth
    distros:
    - rhel80-medium
  - name: replica_sets_api_version_jscore_passthrough_gen
  - name: replica_sets_reconfig_jscore_passthrough_gen
  - name: replica_sets_reconfig_jscore_stepdown_passthrough_gen
    distros:
    - rhel80-medium
  - name: replica_sets_reconfig_kill_primary_jscore_passthrough
    distros:
    - rhel80-medium
  - name: .resharding_fuzzer
  - name: retryable_writes_jscore_passthrough_gen
  - name: retryable_writes_jscore_stepdown_passthrough
    distros:
    - rhel80-medium
  - name: .read_only
  - name: .rollbackfuzzer
  - name: sasl
  - name: search
  - name: search_auth
  - name: search_ssl
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: sharding_api_version_jscore_passthrough_gen
  - name: .sharding .txns
  - name: .sharding .common
  - name: snmp
  - name: .stitch
  - name: .updatefuzzer
  - name: secondary_reads_passthrough_gen
  - name: server_discovery_and_monitoring_json_test_TG
    distros:
      - rhel80-large
  - name: server_selection_json_test_TG
    distros:
      - rhel80-large
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish

- &enterprise-rhel-80-64-bit-dynamic-required-template
  name: enterprise-rhel-80-64-bit-dynamic-required
  display_name: "! Shared Library Enterprise RHEL 8.0"
  batchtime: 240 # 4 hour
  modules:
  - enterprise
  run_on:
  - rhel80-small
  expansions: &enterprise-rhel-80-64-bit-dynamic-required-expansions
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    has_packages: false
    scons_cache_scope: shared
    scons_cache_mode: all
    jstestfuzz_num_generated_files: 40
    jstestfuzz_concurrent_num_files: 10
    target_resmoke_time: 10
    max_sub_suites: 5
    large_distro_name: rhel80-medium
    burn_in_tag_buildvariants: enterprise-rhel-80-64-bit-inmem linux-64-duroff enterprise-rhel-80-64-bit-multiversion
    num_scons_link_jobs_available: 0.99
    spawn_resmoke_using: jasper
  tasks:
  - name: compile_test_and_package_parallel_core_stream_TG
    distros:
      - rhel80-xlarge
  - name: compile_test_and_package_parallel_unittest_stream_with_recording_TG
    distros:
      - rhel80-xlarge
  - name: compile_test_and_package_parallel_unittest_stream_TG
    distros:
      - rhel80-xlarge
  - name: compile_test_and_package_parallel_dbtest_stream_TG
    distros:
    - rhel80-xlarge
  - name: build_variant_gen
  - name: .lint
  - name: lint_fuzzer_sanity_patch
  - name: test_api_version_compatibility
  - name: burn_in_tests_gen
  - name: burn_in_tests_multiversion_gen
  - name: check_feature_flag_tags
  - name: check_for_todos
  - name: .aggfuzzer
  - name: .aggregation
  - name: audit
  - name: .auth
  - name: burn_in_tags_gen
  - name: buildscripts_test
  - name: resmoke_end2end_tests
  - name: unittest_shell_hang_analyzer_gen
  - name: .causally_consistent !.sharding
  - name: .change_streams
  - name: .change_stream_fuzzer
  - name: .misc_js
  - name: .concurrency !.large !.ubsan !.no_txns !.debug_only
  - name: .concurrency .large !.ubsan !.no_txns !.debug_only
    distros:
    - rhel80-medium
  - name: disk_wiredtiger
  - name: .encrypt
  - name: idl_tests
  - name: initial_sync_fuzzer_gen
  - name: .integration
    distros:
    - rhel80-medium
  - name: jsCore
    distros:
    - rhel80-xlarge
  - name: .jscore .common !jsCore
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .jstestfuzz !.flow_control  # Flow control jstestfuzz take longer.
  - name: libunwind_tests
  - name: multiversion_sanity_check_passthrough_gen
  - name: mqlrun
  - name: .multi_shard
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  - name: multiversion_gen
  - name: .query_fuzzer
  - name: .random_multiversion_ds
  - name: .read_write_concern .large
    distros:
    - rhel80-medium
  - name: .read_write_concern !.large
  - name: .replica_sets !.encrypt !.auth
    distros:
    - rhel80-xlarge
  - name: replica_sets_api_version_jscore_passthrough_gen
  - name: replica_sets_reconfig_jscore_passthrough_gen
  - name: replica_sets_reconfig_jscore_stepdown_passthrough_gen
    distros:
    - rhel80-xlarge
  - name: replica_sets_reconfig_kill_primary_jscore_passthrough
    distros:
    - rhel80-xlarge
  - name: retryable_writes_jscore_passthrough_gen
  - name: retryable_writes_jscore_stepdown_passthrough
    distros:
    - rhel80-medium
  - name: .read_only
  - name: .rollbackfuzzer
  - name: sasl
  - name: search
  - name: search_auth
  - name: search_ssl
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: sharding_api_version_jscore_passthrough_gen
  - name: .sharding .txns
  - name: .sharding .common
  - name: snmp
  - name: .stitch
  - name: .updatefuzzer
  - name: secondary_reads_passthrough_gen
  - name: server_discovery_and_monitoring_json_test_TG
  - name: .tenant_migration
    distros:
      - rhel80-xlarge
  - name: server_selection_json_test_TG
    distros:
      - rhel80-xlarge

- &enterprise-rhel-80-64-bit-dynamic-all-feature-flags-required-template
  name: enterprise-rhel-80-64-bit-dynamic-all-feature-flags-required
  display_name: "! Shared Library Enterprise RHEL 8.0 (all feature flags)"
  batchtime: 240 # 4 hour
  stepback: false
  modules:
  - enterprise
  run_on:
  - rhel80-small
  expansions: &enterprise-rhel-80-64-bit-dynamic-all-feature-flags-expansions
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    has_packages: false
    scons_cache_scope: shared
    scons_cache_mode: all
    jstestfuzz_num_generated_files: 40
    jstestfuzz_concurrent_num_files: 10
    target_resmoke_time: 10
    max_sub_suites: 5
    large_distro_name: rhel80-medium
    num_scons_link_jobs_available: 0.99
    # To force disable feature flags even on the all feature flags variant, please use this file:
    # buildscripts/resmokeconfig/fully_disabled_feature_flags.yml
    test_flags: >-
      --runAllFeatureFlagTests
      --mongodSetParameters="{internalQueryEnableSlotBasedExecutionEngine: true}"
      --additionalFeatureFlags=featureFlagSbePlanCache
  tasks: &enterprise-rhel-80-64-bit-dynamic-all-feature-flags-tasks
  - name: compile_test_and_package_parallel_core_stream_TG
    distros:
      - rhel80-large
# Disabling as the following tests are not aware of feature flags.
#  - name: compile_test_and_package_parallel_unittest_stream_TG
#    distros:
#      - rhel80-large
#  - name: compile_test_and_package_parallel_dbtest_stream_TG
#    distros:
#    - rhel80-medium
  - name: libdeps_graph_linting_TG
    distros:
      - rhel80-large
  - name: build_variant_gen
  - name: burn_in_tests_gen
  - name: .aggfuzzer
  - name: .aggregation
  - name: audit
  - name: .auth
  - name: unittest_shell_hang_analyzer_gen
  - name: .causally_consistent !.sharding
  - name: .change_streams
  - name: .change_stream_fuzzer
  - name: .misc_js
  - name: .concurrency !.large !.ubsan !.no_txns !.debug_only
  - name: .concurrency .large !.ubsan !.no_txns !.debug_only
    distros:
    - rhel80-medium
  - name: disk_wiredtiger
  - name: .encrypt
  - name: feature_flag_multiversion_gen
  - name: idl_tests
  - name: initial_sync_fuzzer_gen
  - name: .integration
    distros:
    - rhel80-medium
  - name: .jscore .common
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .jstestfuzz !.flow_control  # Flow control jstestfuzz take longer.
  - name: libunwind_tests
  - name: mqlrun
  - name: .multi_shard
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  - name: multiversion_gen
  - name: powercycle_smoke
  - name: .query_fuzzer
  - name: .random_multiversion_ds
  - name: .read_write_concern .large
    distros:
    - rhel80-medium
  - name: .read_write_concern !.large
  - name: .replica_sets !.encrypt !.auth
    distros:
    - rhel80-medium
  - name: replica_sets_api_version_jscore_passthrough_gen
  - name: replica_sets_reconfig_jscore_passthrough_gen
  - name: replica_sets_reconfig_jscore_stepdown_passthrough_gen
    distros:
    - rhel80-medium
  - name: replica_sets_reconfig_kill_primary_jscore_passthrough
    distros:
    - rhel80-medium
  - name: retryable_writes_jscore_passthrough_gen
  - name: retryable_writes_jscore_stepdown_passthrough
    distros:
    - rhel80-medium
  - name: .read_only
  - name: .rollbackfuzzer
  - name: sasl
  - name: search
  - name: search_auth
  - name: search_ssl
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: sharding_api_version_jscore_passthrough_gen
  - name: .sharding .txns
  - name: .sharding .common
  - name: sharded_multi_stmt_txn_jscore_passthrough
  - name: snmp
  - name: .stitch
  - name: .tenant_migration
  - name: .updatefuzzer
  - name: secondary_reads_passthrough_gen
# Disabling as the following tests are not aware of feature flags.
#  - name: server_discovery_and_monitoring_json_test_TG
#    distros:
#      - rhel80-large
#  - name: server_selection_json_test_TG
#    distros:
#      - rhel80-large

- &enterprise-rhel-80-64-bit-dynamic-sbe-engine
  name: enterprise-rhel-80-64-bit-dynamic-sbe-engine
  display_name: "Shared Library Enterprise RHEL 8.0 (SBE Engine)"
  batchtime: 1440 # 1 day
  stepback: false
  modules:
  - enterprise
  run_on:
  - rhel80-small
  expansions: &enterprise-rhel-80-64-bit-dynamic-sbe-engine-expansions
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    has_packages: false
    scons_cache_scope: shared
    scons_cache_mode: all
    jstestfuzz_num_generated_files: 40
    jstestfuzz_concurrent_num_files: 10
    target_resmoke_time: 10
    max_sub_suites: 5
    large_distro_name: rhel80-medium
    num_scons_link_jobs_available: 0.99
    test_flags: >-
      --mongodSetParameters="{internalQueryEnableSlotBasedExecutionEngine: true}"
      --additionalFeatureFlags=featureFlagTimeseriesCollection,featureFlagSbePlanCache
  tasks:
  - name: compile_and_archive_dist_test_TG
    distros:
      - rhel80-large
# Disable the following tests as they are not aware of feature flags.
#  - name: compile_test_and_package_parallel_unittest_stream_TG
#    distros:
#      - rhel80-large
#  - name: compile_test_and_package_parallel_dbtest_stream_TG
#    distros:
#    - rhel80-medium
  - name: build_variant_gen
  - name: .aggfuzzer
  - name: .aggregation !.no_async !.secondary_reads !.sharded !.unwind !aggregation_disabled_optimization
  - name: .change_streams
  - name: .change_stream_fuzzer
  - name: .concurrency !.large !.ubsan !.debug_only
  - name: .lint
  - name: .jscore !.sharding !.decimal !cst_jscore_passthrough
  - name: .jstestfuzz !.flow_control
  - name: .query_fuzzer
  - name: .read_write_concern
  - name: .replica_sets
  - name: .rollbackfuzzer
  - name: causally_consistent_hedged_reads_jscore_passthrough_gen
  - name: causally_consistent_jscore_passthrough_auth_gen
  - name: causally_consistent_jscore_passthrough_gen
  - name: causally_consistent_read_concern_snapshot_passthrough_gen
  - name: initial_sync_fuzzer_gen
  - name: multi_shard_multi_stmt_txn_jscore_passthrough_gen
  - name: multi_shard_multi_stmt_txn_kill_primary_jscore_passthrough_gen
  - name: multi_shard_multi_stmt_txn_stepdown_primary_jscore_passthrough_gen
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  - name: noPassthrough_gen
  - name: noPassthroughWithMongod_gen
  - name: replica_sets_api_version_jscore_passthrough_gen
  - name: replica_sets_multiversion_gen
  - name: replica_sets_reconfig_jscore_passthrough_gen
  - name: retryable_writes_jscore_passthrough_gen
  - name: retryable_writes_jscore_stepdown_passthrough
  - name: session_jscore_passthrough
  - name: sharded_causally_consistent_jscore_passthrough_gen
  - name: sharded_collections_jscore_passthrough
  - name: sharding_auth_gen
  - name: sharding_auth_audit_gen
  - name: sharding_csrs_continuous_config_stepdown_gen
  - name: sharding_ese_gcm_gen
  - name: sharding_ese_gen
  - name: sharding_gen
  - name: sharding_jscore_passthrough
  - name: sharding_api_version_jscore_passthrough_gen
  - name: sharding_update_v1_oplog_jscore_passthrough
  - name: sharding_last_lts_mongos_and_mixed_shards_gen
  - name: sharding_max_mirroring_gen
  - name: sharding_multiversion_gen
  - name: sharding_update_v1_oplog_gen
  - name: ese
    distros:
    - rhel80-medium

- name: enterprise-rhel-80-64-bit-large-txns-format
  display_name: "Enterprise RHEL 8.0 (large transactions format)"
  modules:
  - enterprise
  run_on:
  - rhel80-small
  batchtime: 10080 # 7 days
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    compile_flags: >-
      --ssl
      MONGO_DISTMOD=rhel80
      -j$(grep -c ^processor /proc/cpuinfo)
      --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    repo_edition: enterprise
    scons_cache_scope: shared
    large_distro_name: rhel80-medium
    test_flags: >-
        --mongodSetParameters="{maxNumberOfTransactionOperationsInSingleOplogEntry: 2}"
        --excludeWithAnyTags=exclude_from_large_txns
  tasks:
  - name: compile_and_archive_dist_test_then_package_TG
    distros:
    - rhel80-large
  - name: build_variant_gen
  - name: auth_gen
  - name: auth_audit_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: change_streams
  - name: change_streams_whole_db_passthrough
  - name: change_streams_whole_cluster_passthrough
  - name: concurrency_replication_gen
  - name: concurrency_replication_multi_stmt_txn_gen
  - name: concurrency_sharded_replication_gen
  - name: concurrency_sharded_replication_with_balancer_gen
  - name: concurrency_sharded_clusterwide_ops_add_remove_shards_gen
  - name: concurrency_sharded_local_read_write_multi_stmt_txn_gen
  - name: concurrency_sharded_local_read_write_multi_stmt_txn_with_balancer_gen
  - name: concurrency_sharded_multi_stmt_txn_gen
  - name: concurrency_sharded_multi_stmt_txn_with_balancer_gen
  - name: concurrency_sharded_multi_stmt_txn_with_stepdowns_gen
  - name: concurrency_sharded_with_stepdowns_gen
  - name: concurrency_sharded_with_stepdowns_and_balancer_gen
  - name: initial_sync_fuzzer_gen
  - name: jsCore
  - name: jsCore_txns
  - name: .logical_session_cache .repl
  - name: .multi_shard
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  - name: multiversion_auth_gen
  - name: multiversion_gen
  - name: noPassthrough_gen
  - name: .replica_sets !.multi_oplog !.large
  - name: .replica_sets !.multi_oplog .large
    distros:
    - rhel80-medium
  - name: .resharding_fuzzer
  - name: .rollbackfuzzer
  - name: .sharding .txns
  - name: sharding_gen
  - name: sharding_auth_gen
  - name: sharding_auth_audit_gen
  - name: sharding_ese_gen
  - name: sharding_ese_gcm_gen
  - name: sharding_csrs_continuous_config_stepdown_gen
  - name: sharded_multi_stmt_txn_jscore_passthrough
    distros:
    - rhel80-medium

# This build variant is used to run multiversion tests as part of burn_in_tags as these tests are
# currently only run on our daily builders.
- &enterprise-rhel-80-64-bit-multiversion-template
  name: enterprise-rhel-80-64-bit-multiversion
  display_name: "Enterprise RHEL 8.0 (implicit multiversion)"
  modules:
  - enterprise
  run_on:
  - rhel80-small
  expansions: &enterprise-rhel-80-64-bit-multiversion-expansions-template
    test_flags: >-
      --excludeWithAnyTags=requires_fcv_51,multiversion_incompatible,disabled_due_to_server_58295
    compile_flags: >-
      -j$(grep -c ^processor /proc/cpuinfo)
      --ssl
      --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      MONGO_DISTMOD=rhel80
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    repo_edition: enterprise
    scons_cache_scope: shared
    tooltags: "ssl sasl gssapi"
    build_mongoreplay: true
    large_distro_name: rhel80-medium
    resmoke_jobs_factor: 0.25
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel80-xlarge
  - name: build_variant_gen
  - name: .multiversion_fuzzer
  - name: .multiversion_passthrough
  - name: .random_multiversion_ds

- <<: *enterprise-rhel-80-64-bit-multiversion-template
  name: enterprise-rhel-80-64-bit-multiversion-all-feature-flags
  display_name: "Enterprise RHEL 8.0 (implicit multiversion & all feature flags)"
  expansions:
    <<: *enterprise-rhel-80-64-bit-multiversion-expansions-template
    test_flags: >-
      --excludeWithAnyTags=requires_fcv_51,multiversion_incompatible,disabled_due_to_server_58295
      --runAllFeatureFlagTests

- name: rhel-80-64-bit-nossl
  display_name: "RHEL 8.0 Shared Library (No SSL)"
  run_on:
  - rhel80-small
  batchtime: 1440 # 1 day
  expansions:
    compile_flags: >-
      -j$(grep -c ^processor /proc/cpuinfo)
      --ssl=off
      --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      MONGO_DISTMOD=rhel80
      --link-model=dynamic
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    scons_cache_scope: shared
    build_mongoreplay: false
    large_distro_name: rhel80-medium
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel80-large
  - name: jsCore


- name: enterprise-rhel-80-64-bit-coverage
  display_name: "~ Enterprise RHEL 8.0 DEBUG Code Coverage"
  modules:
    - enterprise
  run_on:
    - rhel80-medium
  batchtime: 10080 # 7 days
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    test_flags: --excludeWithAnyTags=resource_intensive
    compile_flags: --dbg=on --gcov --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    resmoke_jobs_factor: 0.5  # Avoid starting too many mongod's
    # The gcov instrumentation saves the path the .gcno files were created in as the default path
    # for the .gcda files. In Evergreen the path will start with /data/mci/[Hashed ID]/src/... where
    # the hashed ID is unique per task run. GCOV_PREFIX_STRIP is the number of directory levels to
    # strip from the top of the default path before appending to the GCOV_PREFIX (if any).
    gcov_environment: GCOV_PREFIX=$(pwd) GCOV_PREFIX_STRIP=4
    # Mixing --cache and --gcov doesn't work correctly yet. See SERVER-11084
    exec_timeout_secs: 16200 # 4.5 hour timeout
    use_scons_cache: false
  tasks:
    - name: compile_test_and_package_serial_TG
    - name: build_variant_gen
    - name: .aggregation !.unwind
    - name: audit
    - name: .auth
    - name: causally_consistent_jscore_txns_passthrough
    - name: .change_streams
    - name: .misc_js
    - name: .concurrency !.ubsan !.no_txns !.stepdowns !.kill_terminate
    - name: disk_wiredtiger
    - name: .encrypt
    - name: initial_sync_fuzzer_gen
    - name: .integration !.audit
    - name: .jscore .common
    - name: jsCore_txns_large_txns_format
    - name: jsCore_minimum_batch_size
    - name: libunwind_tests
    - name: .logical_session_cache .one_sec
    - name: .multi_shard .common
    - name: multiversion_gen
    - name: .multiversion_fuzzer
    - name: .multiversion_passthrough
    - name: .query_fuzzer
    - name: .random_multiversion_ds
    - name: .read_write_concern
    - name: .replica_sets !.ignore_non_generated_replica_sets_jscore_passthrough
    - name: replica_sets_jscore_passthrough_gen
    - name: .read_only
    - name: .rollbackfuzzer
    - name: retryable_writes_jscore_passthrough_gen
    - name: sasl
    - name: search
    - name: search_auth
    - name: search_ssl
    - name: secondary_reads_passthrough_gen
    - name: session_jscore_passthrough
    - name: .sharding .jscore !.wo_snapshot
    - name: .sharding .common
    - name: snmp
    - name: update_fuzzer_gen

# The following build variant is meant to provide a baseline to measure how much overhead we
# are spending when we split tasks into multiple sub-tasks.
- name: enterprise-rhel-80-64-bit-single-task-baseline
  display_name: "Enterprise RHEL 8.0 (Single Task Baseline)"
  batchtime: 10080  # 1 week.
  modules:
    - enterprise
  run_on:
    - rhel80-small
  expansions:
    <<: *enterprise-rhel-80-64-bit-expansions
    max_sub_suites: 1  # Only generate 1 sub-suite per task.
  tasks:
    - name: compile_test_and_package_serial_TG
      distros:
        - rhel80-medium
    - name: build_variant_gen
    - name: .aggregation
    - name: .auth
    - name: unittest_shell_hang_analyzer_gen
    - name: .causally_consistent !.sharding
    - name: .change_streams
    - name: .misc_js
    - name: .encrypt
    - name: .jscore .common
    - name: .logical_session_cache
    - name: .multi_shard
    - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
    - name: multiversion_gen
    - name: .read_write_concern .large
      distros:
        - rhel80-medium
    - name: .read_write_concern !.large
    - name: .replica_sets !.encrypt !.auth
      distros:
        - rhel80-medium
    - name: retryable_writes_jscore_passthrough_gen
    - name: .read_only
    - name: .sharding .jscore !.wo_snapshot !.multi_stmt
    - name: .sharding .txns
    - name: .sharding .common
    - name: secondary_reads_passthrough_gen

- &enterprise-rhel-70-64-bit-template
  name: enterprise-rhel-70-64-bit
  display_name: "Enterprise RHEL 7.0"
  modules:
  - enterprise
  run_on:
  - rhel70-small
  expansions: &enterprise-rhel-70-64-bit-expansions-template
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-rhel70
    compile_flags: --ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel70
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: rhel70
    repo_edition: enterprise
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel70
  - name: compile_build_tools_next_TG
    distros:
    - rhel70
  - name: build_variant_gen
  - name: .aggfuzzer
  - name: audit
  - name: auth_audit_gen
  - name: auth_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: config_fuzzer_concurrency
  - name: config_fuzzer_concurrency_replication
    distros:
    - rhel70-large
  - name: config_fuzzer_jsCore
  - name: config_fuzzer_replica_sets_jscore_passthrough
    distros:
    - rhel70-large
  - name: .encrypt !.sharding !.replica_sets !.aggregation !.jscore
  - name: external_auth
  - name: external_auth_aws
  - name: .jscore .common !.decimal !.sharding
  - name: jsCore_txns_large_txns_format
  - name: .jstestfuzz .common
  - name: libunwind_tests
  - name: .logical_session_cache .one_sec
  - name: .ocsp
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: .replica_sets .multi_oplog
  - name: sasl
  - name: search
  - name: search_auth
  - name: search_ssl
  - name: sharding_auth_audit_gen
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch
  - name: unittest_shell_hang_analyzer_gen
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - rhel70-small

- name: ubi8
  display_name: "UBI 8"
  run_on:
  - ubi8
  expansions:
    resmoke_jobs_factor: 1
    disable_shared_scons_cache: true
    compile_flags: MONGO_DISTMOD=rhel80 --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    tooltags: ""
    build_mongoreplay: true
    test_flags: >-
      --excludeWithAnyTags=requires_os_access
  tasks:
  - name: compile_and_archive_dist_test_then_package_TG
    distros:
    - rhel80-large
  - name: build_variant_gen
  - name: jsCore
  - name: sharding_gen
  - name: replica_sets_gen

- &enterprise-rhel-80-64-bit-suggested-template
  name: enterprise-rhel-80-64-bit-suggested
  display_name: "* Enterprise RHEL 8.0"
  batchtime: 240 # 4 hours
  modules:
  - enterprise
  run_on:
  - rhel80-build
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-rhel80
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: rhel80
    repo_edition: enterprise
    scons_cache_scope: shared
    large_distro_name: rhel80-large
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel80-xlarge
  - name: build_variant_gen
  - name: .aggfuzzer
  - name: audit
  - name: auth_audit_gen
  - name: auth_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.sharding !.replica_sets !.aggregation !.jscore
  - name: external_auth
  - name: external_auth_aws
  - name: .jscore .common !.decimal !.sharding
  - name: jsCore_txns_large_txns_format
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: libunwind_tests
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: .replica_sets .multi_oplog
  - name: sasl
  - name: search
  - name: search_auth
  - name: search_ssl
  - name: sharding_auth_audit_gen
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - rhel80-small

- name: enterprise-rhel-82-arm64
  display_name: "Enterprise RHEL 8.2 arm64"
  modules:
  - enterprise
  run_on:
  - rhel82-arm64-small
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: aarch64-enterprise-rhel82
    compile_flags: --ssl MONGO_DISTMOD=rhel82 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: aarch64
    packager_distro: rhel82
    repo_edition: enterprise
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel82-arm64-large
  - name: build_variant_gen
  - name: .aggfuzzer !.multiversion
  - name: audit
  - name: auth_audit_gen
  - name: auth_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.sharding !.replica_sets !.aggregation !.jscore
  - name: external_auth
  - name: external_auth_aws
  - name: .jscore .common !.decimal !.sharding
  - name: jsCore_txns_large_txns_format
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: .replica_sets .multi_oplog
  - name: sasl
  - name: search
  - name: search_auth
  - name: search_ssl
  - name: sharding_auth_audit_gen
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - rhel80-small

# This variant is to intentionally test uncommon features nightly
- <<: *enterprise-rhel-70-64-bit-template
  name: enterprise-rhel-70-64-bit-kitchen-sink
  display_name: "~ Enterprise RHEL 7.0"
  batchtime: 1440 # 1 day
  expansions:
    <<: *enterprise-rhel-70-64-bit-expansions-template
    compile_flags: --ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel70
  - name: jsCore

- <<: *enterprise-rhel-70-64-bit-template
  name: hot_backups-rhel-70-64-bit
  display_name: "hot_backups RHEL 7.0"
  batchtime: 1440  # 1 day
  run_on:
  - rhel70
  expansions:
    <<: *enterprise-rhel-70-64-bit-expansions-template
    additional_package_targets: ""
    compile_flags: --ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --enterprise-features=hot_backups
    has_packages: false
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: build_variant_gen
  - name: jsCore
  - name: noPassthroughHotBackups_gen

- <<: *enterprise-rhel-70-64-bit-template
  name: enterprise-rhel-70-64-bit-no-libunwind
  display_name: "~ Enterprise RHEL 7.0 (no-libunwind)"
  batchtime: 10080  # 1 week
  run_on:
  - rhel70
  expansions:
    <<: *enterprise-rhel-70-64-bit-expansions-template
    compile_flags: --ssl MONGO_DISTMOD=rhel70 --use-libunwind=off --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    has_packages: false
    additional_package_targets: ""
  # Override list of tasks to exclude package testing and publishing
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel70
  - name: build_variant_gen
  - name: .aggfuzzer
  - name: audit
  - name: auth_audit_gen
  - name: auth_gen
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.sharding !.replica_sets !.aggregation !.jscore
  - name: external_auth
  - name: external_auth_aws
  - name: .jscore .common !.decimal !.sharding
  - name: jsCore_txns_large_txns_format
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: .replica_sets .multi_oplog
  - name: sasl
  - name: search
  - name: search_auth
  - name: search_ssl
  - name: sharding_auth_audit_gen
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch

- name: ubuntu1804-debug-suggested
  display_name: "* Shared Library Ubuntu 18.04 DEBUG"
  batchtime: 240 # 4 hours
  run_on:
  - ubuntu1804-test
  expansions:
    resmoke_jobs_factor: 0.5  # Avoid starting too many mongod's
    compile_flags: --dbg=on --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic
    scons_cache_scope: shared
    scons_cache_mode: all
    num_scons_link_jobs_available: 0.99
    large_distro_name: ubuntu1804-large
  tasks:
  - name: compile_test_and_package_parallel_core_stream_TG
    distros:
      - ubuntu1804-xlarge
  - name: compile_test_and_package_parallel_unittest_stream_TG
    distros:
      - ubuntu1804-xlarge
  - name: compile_test_and_package_parallel_dbtest_stream_TG
    distros:
      - ubuntu1804-xlarge
  - name: compile_build_tools_next_TG
    distros:
    - ubuntu1804-xlarge
  - name: build_variant_gen
  - name: jsCore
  - name: .read_write_concern !.write !.aggregation
  - name: replica_sets_jscore_passthrough
  - name: replica_sets_large_txns_format_jscore_passthrough
  - name: sharded_collections_jscore_passthrough
  - name: sharding_gen
  - name: sharding_auth_gen
  - name: .stitch
  - name: unittest_shell_hang_analyzer_gen

- name: ubuntu1804-container
  display_name: "Ubuntu 18.04 Container"
  run_on:
  - ubuntu1804-container-server
  expansions:
    resmoke_jobs_factor: 1
    disable_shared_scons_cache: true
    compile_flags: MONGO_DISTMOD=ubuntu1804 --opt=on -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    tooltags: ""
    build_mongoreplay: true
    test_flags: >-
      --excludeWithAnyTags=requires_os_access
  tasks:
  - name: compile_and_archive_dist_test_then_package_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: jsCore
  - name: sharding_gen
  - name: replica_sets_gen

- name: rhel70
  display_name: RHEL 7.0
  run_on:
  - rhel70-small
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-rhel70
    compile_flags: --ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel70
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: rhel70
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: rhel70
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel70
  - name: build_variant_gen
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
    distros:
      - rhel70
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: multiversion_gen
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .txns
  - name: .sharding .common !.csrs
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - rhel70-small

- name: rhel80
  display_name: RHEL 8.0
  run_on:
  - rhel80-build
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-rhel80
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel80
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: rhel80
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: rhel80-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel80-build
  - name: build_variant_gen
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
    distros:
      - rhel80-build
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: multiversion_gen
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .txns
  - name: .sharding .common !.csrs
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - rhel80-small

- name: rhel-82-arm64
  display_name: RHEL 8.2 arm64
  run_on:
  - rhel82-arm64-small
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: aarch64-rhel82
    compile_flags: --ssl MONGO_DISTMOD=rhel82 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    has_packages: true
    packager_script: packager.py
    packager_arch: aarch64
    packager_distro: rhel82
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: rhel82-arm64-large
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel82-arm64-large
  - name: build_variant_gen
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
    distros:
      - rhel82-arm64-large
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .txns
  - name: .sharding .common !.csrs !.multiversion
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - rhel80-small

# This variant compiles on RHEL 7.0 and runs tests on RHEL 7.6
- name: rhel76_compile_rhel70
  display_name: RHEL 7.0/7.6 Cross-ABI
  run_on:
  - rhel76-test
  expansions:
    compile_flags: --ssl MONGO_DISTMOD=rhel70 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
  tasks:
  - name: compile_and_archive_dist_test_then_package_TG
    distros:
    - rhel70
  - name: build_variant_gen
  - name: .ssl
  - name: jsCore
  - name: external_auth

- name: enterprise-rhel-81-ppc64le
  display_name: Enterprise RHEL 8.1 PPC64LE
  modules:
  - enterprise
  run_on:
  - rhel81-power8-small
  batchtime: 10080 # 7 days
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    # We need to compensate for SMT8 setting the cpu count very high and lower the amount of parallelism down
    compile_flags: --ssl MONGO_DISTMOD=rhel81 -j$(echo "$(grep -c processor /proc/cpuinfo)/2" | bc) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    resmoke_jobs_factor: 0.25
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: ppc64le
    packager_distro: rhel81
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: ppc64le-enterprise-rhel81
    repo_edition: enterprise
    multiversion_platform: rhel81
    multiversion_architecture: ppc64le
    multiversion_edition: enterprise
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel81-power8-large
  - name: build_variant_gen
  - name: .aggregation .common
  - name: audit
  - name: .auth !.multiversion !.jscore
  - name: .misc_js
  - name: .encrypt
  - name: .integration !.audit
    distros:
    - rhel81-power8-large
  - name: .jscore .common !.auth
  - name: .read_write_concern
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: sasl
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.multiversion
  - name: snmp
  - name: .stitch
  - name: .publish
    distros:
    - rhel70-small

- name: enterprise-rhel-72-s390x-compile
  display_name: Enterprise RHEL 7.2 s390x Compile
  modules:
  - enterprise
  run_on:
  - rhel72-zseries-test
  batchtime: 10080 # 7 days
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    release_buid: true
    compile_flags: --ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    resmoke_jobs_max: 2
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: s390x
    packager_distro: rhel72
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: s390x-enterprise-rhel72
    repo_edition: enterprise
    multiversion_platform: rhel72
    multiversion_architecture: s390x
    multiversion_edition: enterprise
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel72-zseries-build

- name: enterprise-rhel-72-s390x
  display_name: Enterprise RHEL 7.2 s390x
  modules:
  - enterprise
  run_on:
  - rhel72-zseries-test
  batchtime: 525600 # 365 days
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    release_buid: true
    compile_flags: --ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    resmoke_jobs_max: 2
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: s390x
    packager_distro: rhel72
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: s390x-enterprise-rhel72
    repo_edition: enterprise
    multiversion_platform: rhel72
    multiversion_architecture: s390x
    multiversion_edition: enterprise
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel72-zseries-build
  - name: build_variant_gen
  - name: .aggregation .common
  - name: audit
  - name: .auth !.multiversion !.jscore
  - name: .misc_js
  - name: .encrypt
  - name: .integration !.audit
    distros:
    - rhel72-zseries-build
  - name: .jscore .common !.auth
  - name: .read_write_concern
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: sasl
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.multiversion
  - name: snmp
  - name: .stitch
  - name: .publish
    distros:
    - rhel70-small

- name: enterprise-rhel-72-s390x-all-feature-flags
  display_name: Enterprise RHEL 7.2 s390x (all feature flags)
  modules:
  - enterprise
  run_on:
  - rhel72-zseries-test
  batchtime: 525600 # 365 days
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    release_buid: true
    compile_flags: --ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    resmoke_jobs_max: 2
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: s390x
    packager_distro: rhel72
    repo_edition: enterprise
    multiversion_platform: rhel72
    multiversion_architecture: s390x
    multiversion_edition: enterprise
    # To force disable feature flags even on the all feature flags variant, please use this file:
    # buildscripts/resmokeconfig/fully_disabled_feature_flags.yml
    test_flags: >-
        --runAllFeatureFlagTests
  tasks:
  - name: compile_and_archive_dist_test_then_package_TG
    distros:
    - rhel72-zseries-build
  - name: build_variant_gen
  - name: jsCore
  - name: replica_sets_jscore_passthrough

- name: rhel-72-s390x
  display_name: RHEL 7.2 s390x
  batchtime: 525600 # 365 days
  run_on:
  - rhel72-zseries-test
  expansions:
    compile_flags: --ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    has_packages: true
    packager_script: packager.py
    packager_arch: s390x
    packager_distro: rhel72
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: s390x-rhel72
    repo_edition: org
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel72-zseries-build
  - name: build_variant_gen
  - name: jsCore
  - name: replica_sets_jscore_passthrough
  - name: ssl_gen
  - name: .publish
    distros:
    - rhel70-small

###########################################
#          Ubuntu buildvariants           #
###########################################

- name: enterprise-ubuntu-dynamic-1804-clang-tidy-required
  display_name: "! Enterprise Clang Tidy"
  batchtime: 240 # 4 hours
  modules:
  - enterprise
  run_on:
   - ubuntu1804-xlarge
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    compile_flags: --link-model=dynamic -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars
    # Unlike static builds, dynamic builds have no need to
    # constrain the number of link jobs. Unfortunately, --jlink=1
    # means one link job, not 100%. So this is a bit gross but set
    # it to .99.
    num_scons_link_jobs_available: 0.99
    scons_cache_scope: shared
    scons_cache_mode: all
    show_scons_timings: false
  tasks:
  - name: clang_tidy_TG

###########################################
#          SUSE buildvariants             #
###########################################

- name: enterprise-suse12-64
  display_name: Enterprise SLES 12
  modules:
  - enterprise
  run_on:
  - suse12-test
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-suse12
    compile_flags: --ssl MONGO_DISTMOD=suse12 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: suse12
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: suse12
    repo_edition: enterprise
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - suse12-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: audit
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.replica_sets !.aggregation !.sharding !.jscore
  - name: .jscore .common !.decimal !.sharding
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: sasl
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - suse12-small

- name: suse12
  display_name: SUSE 12
  run_on:
  - suse12-test
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-suse12
    compile_flags: --ssl MONGO_DISTMOD=suse12 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: suse12
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: suse12
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: suse12-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - suse12-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common !.large
  - name: .concurrency .common .large
    distros:
      - suse12-build
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common !.decimal
  - name: .jstestfuzz .common
  - name: multiversion_gen
  - name: .logical_session_cache .one_sec
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .txns
  - name: .sharding .common !.csrs
  - name: .ssl
  - name: .stitch
  - name: .publish
    distros:
    - suse12-small

- name: enterprise-suse15-64
  display_name: Enterprise SLES 15
  modules:
  - enterprise
  run_on:
  - suse15-test
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-suse15
    compile_flags: --ssl MONGO_DISTMOD=suse15 --use-libunwind=off -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: suse15
    repo_edition: enterprise
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - suse15-build
  - name: build_variant_gen
  - name: .aggfuzzer .common !.multiversion
  - name: audit
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.replica_sets !.aggregation !.sharding !.jscore
  - name: .jscore .common !.decimal !.sharding
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: sasl
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch
  - name: .publish
    distros:
    - suse15-small

- name: suse15
  display_name: SUSE 15
  run_on:
  - suse15-test
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-suse15
    compile_flags: --ssl MONGO_DISTMOD=suse15 --use-libunwind=off -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: suse15
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: suse15
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: suse15-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - suse15-build
  - name: build_variant_gen
  - name: .aggfuzzer .common !.multiversion
  - name: aggregation
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common !.decimal
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: multiversion_gen
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .txns
  - name: .sharding .common !.csrs !.multiversion
  - name: .ssl
  - name: .stitch
  - name: .publish
    distros:
    - suse15-small

###########################################
#          Debian buildvariants           #
###########################################

- name: enterprise-debian92-64
  display_name: Enterprise Debian 9.2
  modules:
  - enterprise
  run_on:
  - debian92-test
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-debian92
    compile_flags: --ssl MONGO_DISTMOD=debian92 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: debian92
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: debian92
    repo_edition: enterprise
    scons_cache_scope: shared
    large_distro_name: debian92-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - debian92-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: audit
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.replica_sets !.aggregation !.sharding !.jscore
  - name: .jscore .common !.decimal !.sharding
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: sasl
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - debian92-small

- name: debian92
  display_name: Debian 9.2
  run_on:
  - debian92-test
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-debian92
    compile_flags: --ssl MONGO_DISTMOD=debian92 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: debian92
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: debian92
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: debian92-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - debian92-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: aggregation_auth
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common !.decimal
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: multiversion_gen
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - debian92-small

- name: enterprise-debian10-64
  display_name: Enterprise Debian 10
  modules:
  - enterprise
  run_on:
  - debian10-test
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    push_path: linux
    push_bucket: downloads.10gen.com
    push_name: linux
    push_arch: x86_64-enterprise-debian10
    compile_flags: --ssl MONGO_DISTMOD=debian10 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: debian10
    multiversion_edition: enterprise
    has_packages: true
    packager_script: packager_enterprise.py
    packager_arch: x86_64
    packager_distro: debian10
    repo_edition: enterprise
    scons_cache_scope: shared
    large_distro_name: debian10-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - debian10-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: audit
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.replica_sets !.aggregation !.sharding !.jscore
  - name: .jscore .common !.decimal !.sharding
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: replica_sets_auth_gen
  - name: replica_sets_jscore_passthrough
  - name: sasl
  - name: sharding_auth_gen
  - name: snmp
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - debian10-small

- name: debian10
  display_name: Debian 10
  run_on:
  - debian10-test
  expansions:
    push_path: linux
    push_bucket: downloads.mongodb.org
    push_name: linux
    push_arch: x86_64-debian10
    compile_flags: --ssl MONGO_DISTMOD=debian10 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: debian10
    multiversion_edition: targeted
    has_packages: true
    packager_script: packager.py
    packager_arch: x86_64
    packager_distro: debian10
    repo_edition: org
    scons_cache_scope: shared
    large_distro_name: debian10-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - debian10-build
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: aggregation
  - name: aggregation_auth
  - name: .auth !.audit !.multiversion
  - name: causally_consistent_jscore_txns_passthrough
  - name: .misc_js
  - name: .concurrency .common
  - name: concurrency_replication_causal_consistency_gen
  - name: disk_wiredtiger
  - name: free_monitoring
  - name: .jscore .common !.decimal
  - name: .jstestfuzz .common
  - name: .logical_session_cache .one_sec
  - name: multiversion_gen
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs
  - name: .ssl
  - name: .stitch
  - name: test_packages
    distros:
    - ubuntu2004-package
  - name: .publish
    distros:
    - debian10-small

################################
# storage engine buildvariants #
################################

- name: enterprise-rhel-80-benchmarks
  display_name: Enterprise RHEL 8.0 (Benchmarks)
  modules:
  - enterprise
  run_on:
  - rhel80-medium
  expansions:
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
  tasks:
  - name: compile_benchmarks
  - name: .benchmarks

- name: enterprise-rhel-80-64-bit-inmem
  display_name: Enterprise RHEL 8.0 (inMemory)
  modules:
  - enterprise
  run_on:
  - rhel80-small
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    test_flags: --storageEngine=inMemory --excludeWithAnyTags=requires_persistence,requires_journaling
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    scons_cache_scope: shared
    large_distro_name: rhel80-large
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel80-xlarge
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: .aggregation !.unwind !.encrypt
  - name: audit
  - name: .auth !.multiversion
  - name: .causally_consistent !.wo_snapshot !.durable_history
  - name: .change_streams !.secondary_reads
  - name: .change_stream_fuzzer
  - name: .misc_js
  - name: .concurrency !.ubsan !.no_txns !.debug_only !.kill_terminate
    distros:
    - rhel80-medium  # Some workloads require a lot of memory, use a bigger machine for this suite.
  - name: initial_sync_fuzzer_gen
  - name: .integration !.audit
    distros:
    - rhel80-medium
  - name: .jscore .common !.decimal
  - name: jsCore_txns_large_txns_format
  - name: .jstestfuzz !.initsync
  - name: .logical_session_cache
  - name: .multi_shard .common
  - name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  - name: .read_write_concern !.durable_history
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: .replica_sets .multi_oplog
  - name: replica_sets_multi_stmt_txn_jscore_passthrough
  - name: replica_sets_multi_stmt_txn_stepdown_jscore_passthrough_gen
    distros:
    - rhel80-medium
  - name: .resharding_fuzzer
  - name: .retry
  - name: rollback_fuzzer_gen
  - name: sasl
  - name: secondary_reads_passthrough_gen
  - name: session_jscore_passthrough
  - name: sharded_multi_stmt_txn_jscore_passthrough
    distros:
    - rhel80-medium
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.multiversion !.csrs
  - name: snmp
  - name: .ssl
  - name: .updatefuzzer

- name: linux-64-ephemeralForTest
  display_name: Linux (ephemeralForTest)
  run_on:
  - rhel80-medium
  expansions:
    # Transactions are not explicitly supported on the ephemeralForTest storage engine.
    # Speculative majority reads are currently only allowed for change streams, which are only supported on WiredTiger.
    # We also relax oplog constraints so that applying oplog entries after a rollbackViaRefetch works correctly.
    # TODO (SERVER-47022): Re-enable oplog constraint enforcement once we set the application mode
    # correctly after rollbackViaRefetch.
    test_flags: >-
      --storageEngine=ephemeralForTest
      --excludeWithAnyTags=requires_persistence,requires_fsync,requires_journaling,requires_wiredtiger,uses_transactions,uses_speculative_majority,requires_snapshot_read,requires_majority_read_concern,uses_change_streams,requires_sharding,incompatible_with_eft
      --mongodSetParameters="{oplogApplicationEnforcesSteadyStateConstraints: false}"
    compile_flags: -j$(grep -c ^processor /proc/cpuinfo) --dbg=off --opt=on --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: rhel80
    multiversion_edition: targeted
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
    # TODO (SERVER-58125): Re-enable the timeseries fuzzer for EFT
  - name: build_variant_gen
  - name: .aggfuzzer .common !.timeseries
  - name: aggregation
  - name: .auth !.multiversion !.audit !.sharding
  # SERVER-58597: Re-enable parallel
  - name: .misc_js !.parallel
  # SERVER-50296: Investigate concurrency test failures.
  # - name: concurrency_gen
  # - name: concurrency_replication_gen
  # - name: concurrency_replication_causal_consistency_gen
  # - name: concurrency_simultaneous_gen
  # - name: concurrency_simultaneous_replication
  - name: .integration !.audit
  - name: .jscore .common !.txns !.decimal
  # SERVER-50295: Investigate jstestfuzz time outs.
  # - name: .jstestfuzz .common
  # SERVER-59095: Investigate the EFT failure and re-enable the failing jstest suite on evergreen.
  # - name: .logical_session_cache .one_sec
  - name: logical_session_cache_sharding_1sec_refresh_jscore_passthrough_gen
  - name: logical_session_cache_standalone_1sec_refresh_jscore_passthrough_gen
  - name: .read_write_concern .linearize
  - name: replica_sets_gen
  - name: .replica_sets .common
  # SERVER-49428: Disabled due to writeConcernMajorityJournalDefault is not off
  # rollback_fuzzer_gen
  - name: .updatefuzzer

- name: enterprise-rhel-72-s390x-inmem
  display_name: Enterprise RHEL 7.2 s390x (inMemory) DEBUG
  modules:
  - enterprise
  run_on:
  - rhel72-zseries-test
  batchtime: 525600 # 365 days
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    compile_flags: --dbg=on --opt=on --ssl MONGO_DISTMOD=rhel72 -j3 --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    resmoke_jobs_max: 2
    test_flags: --storageEngine=inMemory --excludeWithAnyTags=requires_persistence,requires_journaling
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - rhel72-zseries-build
  - name: build_variant_gen
  - name: .aggregation .common
  - name: .auth !.multiversion
  - name: audit
  - name: .misc_js
  - name: .integration !.audit
    distros:
    - rhel72-zseries-build
  - name: .jscore .common !.decimal
  - name: .read_write_concern !.durable_history
  - name: replica_sets_gen
  - name: .replica_sets .common
  - name: sasl
  - name: secondary_reads_passthrough_gen
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.multiversion !.csrs
  - name: snmp
  - name: .ssl


###########################################
#     Experimental buildvariants          #
###########################################

- &ubuntu1804-debug-asan-template
  name: ubuntu1804-debug-asan
  display_name: ~ ASAN Enterprise Ubuntu 18.04 DEBUG
  modules:
  - enterprise
  run_on:
  - ubuntu1804-build
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: LSAN_OPTIONS="suppressions=etc/lsan.suppressions:report_objects=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer" ASAN_OPTIONS="detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=address --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)
    test_flags: --excludeWithAnyTags=requires_fast_memory,requires_ocsp_stapling
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under ASAN build.
    hang_analyzer_dump_core: false
    scons_cache_scope: shared
    exec_timeout_secs: 14400 # 3 hour timeout
    separate_debug: off
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: compile_benchmarks
  - name: build_variant_gen
  - name: .aggregation
  - name: .auth
  - name: audit
  - name: .benchmarks
  - name: .causally_consistent !.wo_snapshot
  - name: .change_streams
  - name: .misc_js
  - name: .concurrency !.ubsan !.no_txns !.kill_terminate
  - name: .encrypt
  - name: free_monitoring
  - name: external_auth
  - name: external_auth_aws
  - name: initial_sync_fuzzer_gen
  - name: .integration !.standalone !.audit
  - name: .jscore .common
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .logical_session_cache
  - name: .multi_shard .common
  - name: multiversion_gen
  - name: .multiversion_fuzzer
  - name: .multiversion_passthrough
  - name: .query_fuzzer
  - name: .random_multiversion_ds
  - name: .read_write_concern
  - name: replica_sets_large_txns_format_gen
  - name: replica_sets_large_txns_format_jscore_passthrough
  - name: .replica_sets !.multi_oplog
  - name: .resharding_fuzzer
  - name: .retry
  - name: .read_only
  - name: .rollbackfuzzer
  - name: .updatefuzzer
  - name: sasl
  - name: secondary_reads_passthrough_gen
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot
  - name: .sharding .common !.csrs
  - name: snmp
  - name: .watchdog
  - name: .stitch
  - name: .tenant_migration
  - name: unittest_shell_hang_analyzer_gen
  - name: .updatefuzzer
  - name: server_discovery_and_monitoring_json_test_TG
  - name: server_selection_json_test_TG

- <<: *ubuntu1804-debug-asan-template
  name: ubuntu1804-debug-asan-all-feature-flags
  display_name: "~ Shared Library ASAN Enterprise Ubuntu 18.04 DEBUG (all feature flags)"
  modules:
  - enterprise
  run_on:
  - ubuntu1804-build
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: LSAN_OPTIONS="suppressions=etc/lsan.suppressions:report_objects=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer" ASAN_OPTIONS="detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=address --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under ASAN build.
    hang_analyzer_dump_core: false
    scons_cache_scope: shared
    exec_timeout_secs: 14400 # 3 hour timeout
    # To force disable feature flags even on the all feature flags variant, please use this file:
    # buildscripts/resmokeconfig/fully_disabled_feature_flags.yml
    test_flags: >-
        --runAllFeatureFlagTests
    separate_debug: off
  tasks:
  - name: compile_and_archive_dist_test_then_package_TG
  - name: compile_benchmarks
  - name: build_variant_gen
  - name: .aggregation
#  - name: .auth
  - name: audit
  - name: .causally_consistent !.wo_snapshot
  - name: .change_streams
  - name: .misc_js
#  - name: .concurrency !.ubsan !.no_txns !.kill_terminate
#  - name: .encrypt
  - name: free_monitoring
  - name: external_auth
  - name: external_auth_aws
  - name: initial_sync_fuzzer_gen
  - name: .integration !.standalone !.audit
  - name: .jscore .common
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .logical_session_cache
  - name: .multi_shard .common
  - name: .query_fuzzer
  - name: .read_write_concern
  - name: replica_sets_large_txns_format_gen
  - name: replica_sets_large_txns_format_jscore_passthrough
  - name: .replica_sets !.multi_oplog
  - name: .resharding_fuzzer
  - name: .retry
  - name: .read_only
  - name: .rollbackfuzzer
  - name: sasl
  - name: secondary_reads_passthrough_gen
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot
  - name: .sharding .common !.csrs
  - name: snmp
  - name: .tenant_migration
  - name: .watchdog
  - name: .stitch
# Disabling the following tests as they are not aware of feature flags.
#  - name: .benchmarks
#  - name: unittest_shell_hang_analyzer_gen
#  - name: server_discovery_and_monitoring_json_test_TG
#  - name: server_selection_json_test_TG

- <<: *ubuntu1804-debug-asan-template
  name: ubuntu1804-debug-asan-sbe-engine
  display_name: ~ ASAN Enterprise Ubuntu 18.04 DEBUG (SBE Engine)
  modules:
  - enterprise
  run_on:
  - ubuntu1804-build
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: LSAN_OPTIONS="suppressions=etc/lsan.suppressions:report_objects=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer" ASAN_OPTIONS="detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=address --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)
    test_flags: >-
      --mongodSetParameters="{internalQueryEnableSlotBasedExecutionEngine: true}"
      --additionalFeatureFlags=featureFlagSbePlanCache
      --excludeWithAnyTags=requires_fast_memory,requires_ocsp_stapling
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under ASAN build.
    hang_analyzer_dump_core: false
    scons_cache_scope: shared
    exec_timeout_secs: 14400 # 3 hour timeout
    separate_debug: off
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: compile_benchmarks
  - name: build_variant_gen
  - name: .aggregation
  - name: .auth
  - name: audit
  - name: .benchmarks
  - name: .causally_consistent !.wo_snapshot
  - name: .change_streams
  - name: .misc_js
  - name: .concurrency !.ubsan !.no_txns !.kill_terminate
  - name: .encrypt
  - name: free_monitoring
  - name: external_auth
  - name: external_auth_aws
  - name: initial_sync_fuzzer_gen
  - name: .integration !.standalone !.audit
  - name: .jscore .common
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .logical_session_cache
  - name: .multi_shard .common
  - name: .query_fuzzer
  - name: .read_write_concern
  - name: replica_sets_large_txns_format_gen
  - name: replica_sets_large_txns_format_jscore_passthrough
  - name: .replica_sets !.multi_oplog
  - name: .resharding_fuzzer
  - name: .retry
  - name: .read_only
  - name: .rollbackfuzzer
  - name: .updatefuzzer
  - name: sasl
  - name: secondary_reads_passthrough_gen
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot
  - name: .sharding .common !.csrs
  - name: snmp
  - name: .watchdog
  - name: .stitch
  - name: .tenant_migration
  - name: unittest_shell_hang_analyzer_gen
  - name: .updatefuzzer
  - name: server_discovery_and_monitoring_json_test_TG
  - name: server_selection_json_test_TG

- name: ubuntu1804-asan
  display_name: ~ ASAN Ubuntu 18.04
  run_on:
  - ubuntu1804-build
  stepback: true
  expansions:
    lang_environment: LANG=C
    san_options: LSAN_OPTIONS="suppressions=etc/lsan.suppressions:report_objects=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer" ASAN_OPTIONS="detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --opt=on --allocator=system --sanitize=address --ssl --ocsp-stapling=off -j$(grep -c ^processor /proc/cpuinfo)
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under ASAN build.
    hang_analyzer_dump_core: false
    scons_cache_scope: shared
    test_flags: --excludeWithAnyTags=requires_fast_memory,requires_ocsp_stapling
    separate_debug: off
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: build_variant_gen
  - name: .aggfuzzer .common
  - name: free_monitoring
  - name: .jstestfuzz !.initsync

- &ubuntu1804-debug-ubsan-template
  name: ubuntu1804-debug-ubsan
  display_name: ~ UBSAN Enterprise Ubuntu 18.04 DEBUG
  modules:
  - enterprise
  run_on:
  - ubuntu1804-build
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: UBSAN_OPTIONS="print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --sanitize=undefined --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)
    test_flags: --excludeWithAnyTags=requires_ocsp_stapling
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under UBSAN build.
    scons_cache_scope: shared
    separate_debug: off
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: compile_benchmarks
  - name: build_variant_gen
  - name: .aggregation
  - name: .auth
  - name: audit
  - name: .benchmarks
  - name: .causally_consistent !.wo_snapshot
  - name: .change_streams
  - name: .misc_js
  - name: .concurrency !.no_txns !.repl !.kill_terminate
  - name: disk_wiredtiger
  - name: .encrypt
  - name: free_monitoring
  - name: initial_sync_fuzzer_gen
  - name: .integration !.audit
  - name: .jscore .common
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .logical_session_cache .one_sec
  - name: .multi_shard .common
  - name: multiversion_gen
  - name: .multiversion_fuzzer
  - name: .multiversion_passthrough
  - name: .random_multiversion_ds
  - name: .read_write_concern
  - name: replica_sets_large_txns_format_gen
  - name: replica_sets_large_txns_format_jscore_passthrough
  - name: .replica_sets !.multi_oplog
  - name: .resharding_fuzzer
  - name: .retry
  - name: .rollbackfuzzer
  - name: .read_only
  - name: sasl
  - name: secondary_reads_passthrough_gen
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot
  - name: .sharding .common !.csrs
  - name: snmp
  - name: .stitch
  - name: .updatefuzzer
  - name: .tenant_migration
  - name: watchdog_wiredtiger
  - name: server_discovery_and_monitoring_json_test_TG
  - name: server_selection_json_test_TG

- <<: *ubuntu1804-debug-ubsan-template
  name: ubuntu1804-debug-ubsan-all-feature-flags
  display_name: "~ Shared Library UBSAN Enterprise Ubuntu 18.04 DEBUG (all feature flags)"
  modules:
  - enterprise
  run_on:
  - ubuntu1804-build
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: UBSAN_OPTIONS="print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --sanitize=undefined --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)
    # To force disable feature flags even on the all feature flags variant, please use this file:
    # buildscripts/resmokeconfig/fully_disabled_feature_flags.yml
    test_flags: >-
        --excludeWithAnyTags=requires_ocsp_stapling
        --runAllFeatureFlagTests
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under UBSAN build.
    scons_cache_scope: shared
    separate_debug: off
  tasks:
  - name: compile_and_archive_dist_test_then_package_TG
  - name: compile_benchmarks
  - name: build_variant_gen
  - name: .aggregation
  - name: .auth
  - name: audit
  - name: .causally_consistent !.wo_snapshot
  - name: .change_streams
  - name: .misc_js
  - name: .concurrency !.no_txns !.repl !.kill_terminate
  - name: disk_wiredtiger
  - name: .encrypt
  - name: free_monitoring
  - name: initial_sync_fuzzer_gen
  - name: .integration !.audit
  - name: .jscore .common
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .logical_session_cache .one_sec
  - name: .multi_shard .common
  - name: .read_write_concern
  - name: replica_sets_large_txns_format_gen
  - name: replica_sets_large_txns_format_jscore_passthrough
  - name: .replica_sets !.multi_oplog
  - name: .resharding_fuzzer
  - name: .retry
  - name: .rollbackfuzzer
  - name: .read_only
  - name: sasl
  - name: secondary_reads_passthrough_gen
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot
  - name: .sharding .common !.csrs
  - name: snmp
  - name: .stitch
  - name: .tenant_migration
  - name: .updatefuzzer
  - name: watchdog_wiredtiger
# Disabling the following tests as they are not aware of feature flags.
#  - name: .benchmarks
#  - name: server_discovery_and_monitoring_json_test_TG
#  - name: server_selection_json_test_TG

- <<: *ubuntu1804-debug-ubsan-template
  name: ubuntu1804-debug-ubsan-sbe-engine
  display_name: ~ UBSAN Enterprise Ubuntu 18.04 DEBUG (SBE Engine)
  modules:
  - enterprise
  run_on:
  - ubuntu1804-build
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: UBSAN_OPTIONS="print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --sanitize=undefined --ssl --ocsp-stapling=off --enable-free-mon=on -j$(grep -c ^processor /proc/cpuinfo)
    test_flags: >-
      --mongodSetParameters="{internalQueryEnableSlotBasedExecutionEngine: true}"
      --additionalFeatureFlags=featureFlagSbePlanCache
      --excludeWithAnyTags=requires_ocsp_stapling
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under UBSAN build.
    scons_cache_scope: shared
    separate_debug: off
  tasks:
  - name: compile_test_and_package_serial_TG
  - name: compile_benchmarks
  - name: build_variant_gen
  - name: .aggregation
  - name: .auth
  - name: audit
  - name: .benchmarks
  - name: .causally_consistent !.wo_snapshot
  - name: .change_streams
  - name: .misc_js
  - name: .concurrency !.no_txns !.repl !.kill_terminate
  - name: disk_wiredtiger
  - name: .encrypt
  - name: free_monitoring
  - name: initial_sync_fuzzer_gen
  - name: .integration !.audit
  - name: .jscore .common
  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
  - name: jsonSchema
  - name: .logical_session_cache .one_sec
  - name: .multi_shard .common
  - name: .read_write_concern
  - name: replica_sets_large_txns_format_gen
  - name: replica_sets_large_txns_format_jscore_passthrough
  - name: .replica_sets !.multi_oplog
  - name: .resharding_fuzzer
  - name: .retry
  - name: .rollbackfuzzer
  - name: .read_only
  - name: sasl
  - name: secondary_reads_passthrough_gen
  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot
  - name: .sharding .common !.csrs
  - name: snmp
  - name: .stitch
  - name: .updatefuzzer
  - name: .tenant_migration
  - name: watchdog_wiredtiger
  - name: server_discovery_and_monitoring_json_test_TG
  - name: server_selection_json_test_TG

- &ubuntu1804-debug-aubsan-lite-required-template
  name: ubuntu1804-debug-aubsan-lite-required
  display_name: "! Shared Library {A,UB}SAN Enterprise Ubuntu 18.04 DEBUG"
  batchtime: 240 # 4 hours
  modules:
  - enterprise
  run_on:
  - ubuntu1804-build
  stepback: true
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: UBSAN_OPTIONS="print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer" LSAN_OPTIONS="suppressions=etc/lsan.suppressions:report_objects=1" ASAN_OPTIONS="detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=undefined,address --ssl --ocsp-stapling=off -j$(grep -c ^processor /proc/cpuinfo) --link-model=dynamic
    test_flags: --excludeWithAnyTags=requires_ocsp_stapling
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under {A,UB}SAN build.
    hang_analyzer_dump_core: false
    scons_cache_scope: shared
    scons_cache_mode: all
    max_sub_suites: 3
    num_scons_link_jobs_available: 0.99
    separate_debug: off
  tasks:
  - name: compile_test_and_package_parallel_core_stream_TG
    distros:
      - ubuntu1804-xlarge
  - name: compile_test_and_package_parallel_unittest_stream_TG
    distros:
      - ubuntu1804-xlarge
  - name: compile_test_and_package_parallel_dbtest_stream_TG
    distros:
      - ubuntu1804-xlarge
  - name: build_variant_gen
  - name: jsCore
  - name: jsCore_txns
  - name: unittest_shell_hang_analyzer_gen

- <<: *ubuntu1804-debug-aubsan-lite-required-template
  name: ubuntu1804-debug-aubsan-lite-all-feature-flags-required
  display_name: "! Shared Library {A,UB}SAN Enterprise Ubuntu 18.04 DEBUG (all feature flags)"
  batchtime: 240 # 4 hours
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: UBSAN_OPTIONS="print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer" LSAN_OPTIONS="suppressions=etc/lsan.suppressions:report_objects=1" ASAN_OPTIONS="detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=undefined,address --ssl --ocsp-stapling=off -j$(grep -c ^processor /proc/cpuinfo) --link-model=dynamic
    # To force disable feature flags even on the all feature flags variant, please use this file:
    # buildscripts/resmokeconfig/fully_disabled_feature_flags.yml
    test_flags: >-
        --excludeWithAnyTags=requires_ocsp_stapling
        --runAllFeatureFlagTests
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under {A,UB}SAN build.
    hang_analyzer_dump_core: false
    scons_cache_scope: shared
    scons_cache_mode: all
    max_sub_suites: 3
    num_scons_link_jobs_available: 0.99
    separate_debug: off
  tasks:
  - name: compile_test_and_package_parallel_core_stream_TG
    distros:
      - ubuntu1804-xlarge
  - name: build_variant_gen
  - name: jsCore
  - name: jsCore_txns
# Disabling these tests as they are not aware of feature flags.
#  - name: compile_test_and_package_parallel_unittest_stream_TG
#    distros:
#      - ubuntu1804-xlarge
#  - name: compile_test_and_package_parallel_dbtest_stream_TG
#    distros:
#      - ubuntu1804-xlarge
#  - name: unittest_shell_hang_analyzer_gen

- name: ubuntu1804-debug-aubsan-lite_fuzzer
  display_name: "{A,UB}SAN Enterprise Ubuntu 18.04 FUZZER"
  modules:
  - enterprise
  run_on:
  - ubuntu1804-build
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate changes are
    # also made to SConstruct.
    san_options: UBSAN_OPTIONS="print_stacktrace=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer" LSAN_OPTIONS="suppressions=etc/lsan.suppressions:report_objects=1" ASAN_OPTIONS="detect_leaks=1:check_initialization_order=true:strict_init_order=true:abort_on_error=1:disable_coredump=0:handle_abort=1:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    compile_flags: LINKFLAGS=-nostdlib++ LIBS=stdc++ --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=undefined,address,fuzzer --ssl --ocsp-stapling=off -j$(grep -c ^processor /proc/cpuinfo)
    test_flags: --excludeWithAnyTags=requires_ocsp_stapling
    resmoke_jobs_factor: 0.3  # Avoid starting too many mongod's under {A,UB}SAN build.
    hang_analyzer_dump_core: false
    scons_cache_scope: shared
    separate_debug: off
  display_tasks:
  - *libfuzzertests
  tasks:
   - name: compile_archive_and_run_libfuzzertests_TG

- name: enterprise-ubuntu2004-debug-tsan
  display_name: ~ TSAN Enterprise Ubuntu 20.04 DEBUG (ephemeralForTest)
  modules:
    - enterprise
  run_on:
    - ubuntu2004-large
  stepback: false
  expansions:
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug
    lang_environment: LANG=C
    # If you add anything to san_options, make sure the appropriate
    # changes are also made to SConstruct.
    #
    # TODO SERVER-49121: die_after_fork=0 is a temporary setting to
    # allow tests to continue while we figure out why we're running
    # afoul of it.
    #
    # TODO SERVER-52413: report_thread_leaks=0 suppresses reporting
    # thread leaks, which we have because we don't do a clean shutdown
    # of the ServiceContext.
    #
    san_options: TSAN_OPTIONS="halt_on_error=1:report_thread_leaks=0:die_after_fork=0:suppressions=etc/tsan.suppressions:external_symbolizer_path=/opt/mongodbtoolchain/v3/bin/llvm-symbolizer"
    # TODO: Remove some of the excluded tags when the ephemeralForTest storage engine is
    # further along in development: https://jira.mongodb.org/browse/SERVER-48325
    test_flags: --storageEngine=ephemeralForTest --excludeWithAnyTags=requires_persistence,requires_journaling,uses_transactions,requires_wiredtiger,requires_snapshot_read,requires_majority_read_concern
    compile_flags: --variables-files=etc/scons/mongodbtoolchain_v3_clang.vars --dbg=on --opt=on --allocator=system --sanitize=thread --ssl --enable-free-mon=on --use-libunwind=off -j$(grep -c ^processor /proc/cpuinfo)
    # Avoid starting too many mongod's under TSAN build.
    resmoke_jobs_factor: 0.3
    scons_cache_scope: shared
    separate_debug: off
  tasks:
    - name: compile_test_and_package_serial_TG
    - name: jsCore

- name: enterprise-ubuntu-unoptimized-1804-64-bit
  display_name: "~ Enterprise Ubuntu 18.04 (without Diagnostic Latches)"
  batchtime: 1440 # 1 day
  modules:
  - enterprise
  expansions:
    compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --use-diagnostic-latches=off
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build

- name: enterprise-ubuntu-no-latch-1804-64-bit
  display_name: "~ Enterprise Ubuntu 18.04 DEBUG (Unoptimized)"
  modules:
  - enterprise
  expansions:
    compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --dbg=on --opt=off --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --detect-odr-violations
    scons_cache_scope: shared
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build

- name: enterprise-ubuntu-fixed-service-executor-1804-64-bit
  display_name: "~ Enterprise Ubuntu 18.04 (with FixedServiceExecutor)"
  batchtime: 1440 # 1 day
  run_on:
    - ubuntu1804-test
  modules:
  - enterprise
  expansions:
    scons_cache_scope: shared
    compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    test_flags: >-
      --mongosSetParameters="{initialServiceExecutorThreadingModel: borrowed}"
      --mongodSetParameters="{initialServiceExecutorThreadingModel: borrowed}"
    large_distro_name: ubuntu1804-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: .aggregation !.no_async
  - name: .sharding .auth
  - name: .sharding .causally_consistent !.wo_snapshot
  - name: .concurrency .common !.kill_terminate
  - name: .integration !.audit
  - name: .jscore .common
  - name: noPassthrough_gen
  - name: noPassthroughWithMongod_gen
  - name: .logical_session_cache .one_sec
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs

- name: enterprise-ubuntu-sdam-replica-set-monitor-1804-64-bit
  display_name: "~ Enterprise Ubuntu 18.04 (with SdamReplicaSetMonitor)"
  batchtime: 1440 # 1 day
  run_on:
    - ubuntu1804-test
  modules:
  - enterprise
  expansions:
    scons_cache_scope: shared
    compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    test_flags: >-
      --mongosSetParameters="{replicaSetMonitorProtocol: sdam}"
      --mongodSetParameters="{replicaSetMonitorProtocol: sdam}"
      --excludeWithAnyTags=requires_streamable_rsm
    large_distro_name: ubuntu1804-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: .aggregation !.no_async
  - name: .sharding .auth
  - name: .sharding .causally_consistent !.wo_snapshot
  - name: .concurrency .common !.kill_terminate
  - name: .integration !.audit
  - name: .jscore .common
  - name: .logical_session_cache .one_sec
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs

- name: enterprise-ubuntu-task-executor-pool-size-1804-64-bit
  display_name: "~ Enterprise Ubuntu 18.04 (with {taskExecutorPoolSize: 4})"
  batchtime: 1440 # 1 day
  run_on:
    - ubuntu1804-test
  modules:
  - enterprise
  expansions:
    scons_cache_scope: shared
    compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    test_flags: |- # Set the taskExecutorPoolSize for all tests
        --mongosSetParameters="taskExecutorPoolSize: 4"
    large_distro_name: ubuntu1804-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: .aggregation !.no_async
  - name: .sharding .auth
  - name: .sharding .causally_consistent !.wo_snapshot
  - name: .concurrency .common !.kill_terminate
  - name: .integration !.audit
  - name: .jscore .common
  - name: .logical_session_cache .one_sec
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs

- name: enterprise-ubuntu-sharding-task-executor-pool-rsm-matchPrimary-1804-64-bit
  display_name: "~ Enterprise Ubuntu 18.04 (with {ShardingTaskExecutorPoolReplicaSetMatching: \"matchPrimaryNode\"})"
  batchtime: 1440 # 1 day
  run_on:
    - ubuntu1804-test
  modules:
  - enterprise
  expansions:
    scons_cache_scope: shared
    compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    test_flags: >-
        --mongosSetParameters="ShardingTaskExecutorPoolReplicaSetMatching: \"matchPrimaryNode\""
        --excludeWithAnyTags=sets_replica_set_matching_strategy
    large_distro_name: ubuntu1804-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: .aggregation !.no_async
  - name: .sharding .auth
  - name: .sharding .causally_consistent !.wo_snapshot
  - name: .concurrency .common !.kill_terminate
  - name: .integration !.audit
  - name: .jscore .common
  - name: .logical_session_cache .one_sec
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs

- name: enterprise-ubuntu-sharding-task-executor-pool-rsm-matchBusiest-1804-64-bit
  display_name: "~ Enterprise Ubuntu 18.04 (with {ShardingTaskExecutorPoolReplicaSetMatching: \"matchBusiestNode\"})"
  batchtime: 1440 # 1 day
  run_on:
    - ubuntu1804-test
  modules:
  - enterprise
  expansions:
    scons_cache_scope: shared
    compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    test_flags: >-
        --mongosSetParameters="ShardingTaskExecutorPoolReplicaSetMatching: \"matchBusiestNode\""
        --excludeWithAnyTags=sets_replica_set_matching_strategy
    large_distro_name: ubuntu1804-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: .aggregation !.no_async
  - name: .sharding .auth
  - name: .sharding .causally_consistent !.wo_snapshot
  - name: .concurrency .common !.kill_terminate
  - name: .integration !.audit
  - name: .jscore .common
  - name: .logical_session_cache .one_sec
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs

- name: enterprise-ubuntu-sharding-task-executor-pool-rsm-disabled-1804-64-bit
  display_name: "~ Enterprise Ubuntu 18.04 (with {ShardingTaskExecutorPoolReplicaSetMatching: \"disabled\"})"
  batchtime: 1440 # 1 day
  run_on:
    - ubuntu1804-test
  modules:
  - enterprise
  expansions:
    scons_cache_scope: shared
    compile_flags: MONGO_DISTMOD=ubuntu1804 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
    multiversion_platform: ubuntu1804
    multiversion_edition: enterprise
    test_flags: >-
        --mongosSetParameters="ShardingTaskExecutorPoolReplicaSetMatching: \"disabled\""
        --excludeWithAnyTags=sets_replica_set_matching_strategy
    large_distro_name: ubuntu1804-build
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - ubuntu1804-build
  - name: build_variant_gen
  - name: .aggregation !.no_async
  - name: .sharding .auth
  - name: .sharding .causally_consistent !.wo_snapshot
  - name: .concurrency .common !.kill_terminate
  - name: .integration !.audit
  - name: .jscore .common
  - name: .logical_session_cache .one_sec
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
  - name: .sharding .common !.csrs

- name: shared-scons-cache-pruning
  display_name: "Shared SCons Cache Pruning"
  run_on:
  - ubuntu1604-test
  stepback: false
  tasks:
  - name: shared_scons_cache_pruning

- name: windows-shared-scons-cache-pruning
  display_name: "Windows shared SCons Cache Pruning"
  run_on:
  - windows-vsCurrent-small
  stepback: false
  expansions:
    python: '/cygdrive/c/python/python37/python.exe'
  tasks:
  - name: win_shared_scons_cache_pruning

- name: selected-tests
  display_name: "~ Selected Tests"
  modules:
    - enterprise
  run_on:
    - rhel80-small
  batchtime: 10080 # 7 days
  stepback: false
  expansions:
    selected_tests_buildvariants: enterprise-windows-required linux-64-debug-required enterprise-ubuntu-dynamic-1604-clang ubuntu1804-debug-aubsan-lite-required
  tasks:
  - name: selected_tests_gen

- <<: *enterprise-rhel-80-64-bit-dynamic-required-template
  name: commit-queue
  display_name: "~ Commit Queue"
  batchtime: 10080 # 7 days
  stepback: false
  tasks:
  - name: compile_test_and_package_parallel_core_stream_TG
    distros:
      - rhel80-xlarge-commitqueue
  - name: compile_test_and_package_parallel_unittest_stream_TG
    distros:
      - rhel80-xlarge-commitqueue
  - name: compile_test_and_package_parallel_dbtest_stream_TG
    distros:
      - rhel80-xlarge-commitqueue
  - name: jsCore
    distros:
      - rhel80-xlarge-commitqueue
  - name: .lint
  - name: test_api_version_compatibility
  - name: validate_commit_message
  - name: check_feature_flag_tags

- name: live-record
  display_name: "~ RHEL 8.0 Shared Library (with UndoDB live-record)"
  batchtime: 1440 # 1 day
  stepback: false
  modules:
  - enterprise
  run_on:
  - rhel80-medium
  expansions:
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    has_packages: false
    scons_cache_scope: shared
    scons_cache_mode: all
    target_resmoke_time: 10
    max_sub_suites: 3
    large_distro_name: rhel80-medium
    num_scons_link_jobs_available: 0.99
    record_with: --recordWith /opt/undodb5/bin/live-record
    resmoke_jobs_factor: 0.3
    exec_timeout_secs: 28800 # 8 hours
    test_flags: --excludeWithAnyTags=requires_fast_memory,live_record_incompatible
  tasks:
  - name: compile_and_archive_dist_test_TG
  - name: build_variant_gen
  - name: .aggfuzzer
  - name: .aggregation
#  - name: audit
#  - name: .auth !.multiversion !.non_live_record
#  - name: .causally_consistent !.sharding
#  - name: .change_streams
#  - name: .misc_js !.non_live_record
  - name: .concurrency !.ubsan !.no_txns !.debug_only !.stepdowns !.non_live_record !.large
#  - name: .encrypt
#  - name: initial_sync_fuzzer_gen
  - name: .jscore .common
#  - name: jsCore_minimum_batch_size
  - name: jsCore_txns_large_txns_format
#  - name: jsonSchema
  - name: .jstestfuzz !.flow_control !.stepdowns !.causal
#  - name: multiversion_sanity_check_passthrough_gen
#  - name: mqlrun
#  - name: .multi_shard
#  - name: .query_fuzzer
#  - name: .read_write_concern
#  - name: .replica_sets !.encrypt !.auth !.non_live_record
#  - name: replica_sets_reconfig_jscore_passthrough_gen
#  - name: replica_sets_reconfig_jscore_stepdown_passthrough_gen
  - name: retryable_writes_jscore_passthrough_gen
  - name: retryable_writes_jscore_stepdown_passthrough
#  - name: .read_only
#  - name: .rollbackfuzzer
  - name: sasl
#  - name: search
#  - name: search_auth
#  - name: search_ssl
#  - name: session_jscore_passthrough
  - name: .sharding .jscore !.wo_snapshot !.multi_stmt
#  - name: .sharding .txns
#  - name: .sharding .common !.non_live_record
  - name: snmp
#  - name: .updatefuzzer

- name: windows-dynamic-visibility-test
  display_name: "~ Shared Library Windows (visibility test)"
  expansions:
    compile_flags: CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    has_packages: false
    scons_cache_scope: shared
    scons_cache_mode: all
  tasks:
  - name: visibility_test_TG
    distros:
    - windows-vsCurrent-large

### QO & QE Patch-Specific Build Variants ###
- <<: *enterprise-rhel-80-64-bit-dynamic-sbe-engine
  name: enterprise-rhel-80-64-bit-dynamic-sbe-engine-query-patch-only
  display_name: "~ Shared Library Enterprise RHEL 8.0 Query Patch Only (SBE Execution Engine)"
  batchtime: 10080 # 7 days. This is a patch-only variant but we run on mainline to pick up task history.
  expansions:
    <<: *enterprise-rhel-80-64-bit-dynamic-sbe-engine-expansions
    jstestfuzz_num_generated_files: 20
    jstestfuzz_concurrent_num_files: 5
    target_resmoke_time: 30
    max_sub_suites: 3
    test_flags: >-
      --mongodSetParameters="{internalQueryEnableSlotBasedExecutionEngine: true}"
      --additionalFeatureFlags=featureFlagTimeseriesCollection,featureFlagSbePlanCache
      --excludeWithAnyTags=resource_intensive

# Intentionally derive from SBE to run the SBE tests with all feature flags.
- <<: *enterprise-rhel-80-64-bit-dynamic-all-feature-flags-required-template
  name: enterprise-rhel-80-64-bit-dynamic-all-feature-flags-required-query-patch-only
  display_name: "~ Shared Library Enterprise RHEL 8.0 Query Patch Only (all feature flags)"
  batchtime: 10080 # 7 days. This is a patch-only variant but we run on mainline to pick up task history.
  expansions:
    <<: *enterprise-rhel-80-64-bit-dynamic-all-feature-flags-expansions
    jstestfuzz_num_generated_files: 20
    jstestfuzz_concurrent_num_files: 5
    target_resmoke_time: 30
    max_sub_suites: 3
    test_flags: --runAllFeatureFlagTests --excludeWithAnyTags=resource_intensive

# These paths are relative to the directory containing this configuration file
files:
    - evergreen.yml
help_url: https://wiki.corp.mongodb.com/pages/viewpage.action?pageId=133273894

rules:
    # this is a list of all rules available, their parameters, and their
    # default values. Comment out a rule to disable it
    - rule: "limit-keyval-inc"
      # the maximum number of keyval.inc commands to allow in your YAML
      limit: 4
    - rule: "shell-exec-explicit-shell"
    - rule: "no-working-dir-on-shell"
    - rule: "no-shell-exec"
    - rule: "no-multiline-expansions-update"
    - rule: "invalid-build-parameter"
    - rule: "required-expansions-write"
      regex: .*\/evergreen\/.*\.sh
    - rule: "dependency-for-func"
      dependencies:
        generate resmoke tasks: ["build_variant_gen", "archive_dist_test"]

# All expansions in this file must be strings.
# Additionally, we assume that bools are "true" and "false", not "True" and
# "False" (note leading case) throughout the codebase.
# Always wrap the following words in quotes: "true", "false", "null"
report_file: src/report.json
archive_file: src/archive.json
decompress: tar xzvf
private_key_file: /dev/null
aws_profile_remote: default
resmoke_jobs_factor: "1"
resmoke_jobs_max: "0"
timeout_secs: "0"
exec_timeout_secs: "0"
multiversion_edition: base
multiversion_platform: linux_x86_64
multiversion_architecture: x86_64
disable_unit_tests: "false"
skip_tests: /dev/null
resmoke_jobs: "1"
should_shuffle: "true"
continue_on_failure: "true"
install_dir: dist-test/bin
is_patch: "false"
is_commit_queue: "false"
use_scons_cache: "false"
npm_command: jstestfuzz
tar: tar
cmake_path: /opt/cmake/bin/cmake
content_type: application/x-gzip
jstestfuzz_concurrent_num_files: "10"
curator_release: "latest"
ext: tgz

# SCons compile expansions.
compiling_for_test: "false"
install_directory: /data/mongo-install-directory
num_scons_link_jobs_available: "0.25"
scons_cache_mode: nolinked
show_scons_timings: "true"
task_install_action: hardlink
separate_debug: "on"

/**
 * Sample file to demonstrate various clang-format messages
 */
#include <stdio.h>
#include <vector>
#include <string>

// NamespaceIndentation: None
namespace foo {
// Contents of namespace are not indented.
int foo;

namespace bar {
int bar;

namespace {
int anony;
}  // namespace anony

}  // namespace bar

/**
 * A Class comment
 */
class Example {
    // AccessModiferOffset: -4
public:
    // BreakConstructorInitializersBeforeComma: false
    // ConstructorInitializerAllOnOneLineOrOnePerLine: true
    //
    Example() : _aVariable(4), _bVariable(42) {}
    Example(int a)
        : _aVariable(a),
          _bVariable(42),
          _AReallyReallyLongVariableName(4),
          _AnotherReallyReallyLongVariableNameToTriggerWrapping(42) {
        printf("Hello ");
    }
    ~Example() {}

    /**
     * A Function comment
     * AllowShortFunctionsOnASingleLine: Empty
     */
    int getOneLineFunction() {
        return 0;
    }

    /** A Incorrect Function comment
     * AllowShortFunctionsOnASingleLine: Empty
     */
    void doNothing() {}

    /**
     * A Useful Function comment
     */
    int manyVariableFunction(unsigned long long arg1, char arg2, unsigned long long arg3);

private:
    int _aVariable;
    long _bVariable;
    short _cVarianble = 49;
    long _AReallyReallyLongVariableName;
    long _AnotherReallyReallyLongVariableNameToTriggerWrapping;
};

int foo3() {
    return 42;
}

// AlwaysBreakTemplateDeclarations: true
template <typename T>
T myAdd(T x, T y) {
    return x + y;
}

// AlwaysBreakAfterDefinitionReturnType: false
// BinPackParameters: false
int Example::manyVariableFunction(unsigned long long argWithLongName,
                                  char arg2,
                                  unsigned long long argWithAnotherLongName) {
    // 3.7 - AlignConsecutiveAssignments - false
    //
    int aaaa = 12;
    int b = 23;
    int ccc = 23;
    // PointerAlignment: Left
    const char* some_pointer = "Hello";

    // SpacesInAngles: false
    std::vector<std::pair<std::string, int>> list;

    // SpaceAfterCStyleCast: false
    // SpacesInCStyleCastParentheses: false
    char* some_nonconst_pointer = (char*)some_pointer;

    // Multi-line if
    // SpaceBeforeParens: False
    if (argWithLongName == 0) {  // Comment: SpacesBeforeTrailingComments
        // Do something
    } else if (b % 7 = 3) {
    }  // some weird trailing else comment that clang-format does not touch
    else {
        // Notice the indent around else
    }

    // AllowShortIfStatementsOnASingleLine: false
    // Put statements on separate lines for short ifs
    if (arg2 == 'a')
        arg2 = 'b';

    int bbbbbbbbbbbbbbbbbbbbbbbbbbbb, cccccccccccccccccccccccccccccc;
    int aaaaaaaaaaaaaaaaaaaaaaaaaaaa =
        bbbbbbbbbbbbbbbbbbbbbbbbbbbb + cccccccccccccccccccccccccccccc;

    // AlignOperands
    int dddddddddddddddddddddddddddd = aaaaaaaaaaaaaaaaaaaaaaaaaaaa * 7 + 4 % 235124 > 275645
        ? bbbbbbbbbbbbbbbbbbbbbbbbbbbb + 897234
        : cccccccccccccccccccccccccccccc % 1293402;

    // AllowShortBlocksOnASingleLine: false
    if (b) {
        return 3;
    }

    // AllowShortLoopsOnASingleLine: false
    while (b < 5)
        b++;

    // BreakBeforeBinaryOperators: None
    if (b > 5 || b % 42 || cccccccccccccccccccccccccccccc % 873 || aaaa * 12312 % 23485 != 9873 ||
        some_pointer != 0) {
        printf("Huh!\n");
    }

    // AlignAfterOpenBracket: false
    // BinPackParameters: false
    printf("A short function call %s %s %d - %ld\n", "", "tgz", 4, ULONG_MAX);
    printf("A long function call %s %s %d - %ld\n",
           "http://www.mongodbo.org/downloads",
           "mongodb-latest.tgz",
           4,
           ULONG_MAX);
    printf("Thing1 %s\n", "Thing2");

    // No spaces between parens and args
    printf("%c\n", arg2);

    // A switch statement: TODO: Andy, what is the indent we want? Google style?
    switch (arg2) {
        // AllowShortCaseLabelsOnASingleLine: false
        // IndentCaseLabels: true
        case 'a':
            return 2;
        case 'y':
        case 'z':
            // Do something here
            break;
        default:
            // The default`
            break;
    }

    do {
        // Do a loop here
    } while (0);

    return 1;
}

}  // namespace foo

build_variant_large_distro_exceptions:
  - amazon
  - amazon2
  - debian10
  - debian92
  - enterprise-amazon2
  - enterprise-amazon2-arm64
  - enterprise-debian10-64
  - enterprise-debian92-64
  - enterprise-linux-64-amazon-ami
  - enterprise-macos
  - enterprise-macos-xcode-current
  - enterprise-macos-rosetta-2
  - enterprise-macos-arm64
  - enterprise-rhel-67-s390x
  - enterprise-rhel-70-64-bit
  - enterprise-rhel-70-64-bit-no-libunwind
  - enterprise-rhel-71-ppc64le
  - enterprise-rhel-71-ppc64le-inmem
  - enterprise-rhel-72-s390x
  - enterprise-rhel-72-s390x-inmem
  - enterprise-rhel-80-64-bit
  - enterprise-rhel-80-64-bit-coverage
  - enterprise-rhel-81-ppc64le
  - enterprise-rhel-82-arm64
  - enterprise-suse12-64
  - enterprise-suse12-s390x
  - enterprise-suse15-64
  - enterprise-ubuntu1804-arm64
  - enterprise-ubuntu1804-ppc64le
  - enterprise-ubuntu1804-s390x
  - enterprise-ubuntu2004-arm64
  - hot_backups-rhel-70-64-bit
  - linux-64-ephemeralForTest
  - macos
  - rhel70
  - rhel80
  - rhel-82-arm64
  - suse12
  - suse15
  - ubi8
  - ubuntu1604-container
  - ubuntu1804-container
  - ubuntu1604-debug
  - ubuntu1804-debug-asan
  - ubuntu1804-debug-asan-all-feature-flags
  - ubuntu1804-debug-asan-sbe-engine
  - ubuntu1804-debug-ubsan
  - ubuntu1804-debug-ubsan-all-feature-flags
  - ubuntu1804-debug-ubsan-sbe-engine

# Client objects are leaked in threads that are never terminated
leak:mongo::Client::Client

# DiagnosticListeners and WaitListeners need to be available in detached threads
leak:mongo::latch_detail::getDiagnosticListenerState
leak:mongo::latch_detail::installDiagnosticListener
leak:mongo::Interruptible::installWaitListener

# The singleton must live throughout the lifetime of all SSL threads
leak::mongo::SSLThreadInfo::ThreadIDManager::idManager

leak:glob64

functions:
  "fetch source":
    - command: git.get_project
      params:
        directory: src
    - command: shell.exec
      params:
        working_dir: src
        script: |
          cd src/third_party/timelib-*/zones
          make timezonedb.zip CFLAGS=-DHAVE_SNPRINTF=1
          cp timezonedb.zip timezonedb-latest.zip

  "publish":
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_files_include_filter:
         - src/src/third_party/timelib-*/zones/timezonedb-*.zip
        remote_file: olson_tz_db/
        bucket: downloads.mongodb.org
        permissions: public-read
        content_type: application/zip
        display_name: timezonedb.zip
tasks:
- name: compile
  depends_on: []
  commands:
    - func: "fetch source"
    - func: "publish"

buildvariants:
- name: linux-64
  display_name: Linux
  run_on:
  - rhel80-small
  tasks:
  - name: compile

command_type: system
stepback: false

## Parameters for parameterized builds (see https://github.com/evergreen-ci/evergreen/wiki/Parameterized-Builds)
parameters:
  - key: patch_compile_flags
    description: "Additional SCons flags to be applied during scons compile invocations in this patch"

variables:
  ###
  # Leave this section uncommented to enable compile.
  _real_remote_file: &_remote_file
      ${project_dir}/${version_id}/${revision}/${platform}/mongodb${compile-variant|}-${version_id}.tar.gz
  _real_compile: &_compile
    - variant: linux-wt-standalone
      name: compile
  _real_expansions: &_expansion_updates
    []
  ###

  ###
  # **Or**: Leave this section uncommented to bypass/skip compile.
  # This file ↓ came from a microbenchmarks waterfall run.
  # https://evergreen.mongodb.com/version/performance_996dcdc3d96346d71f012388eccc79c691619340
  # Artifacts eventually expire. If this fails, grab the compile artifacts url and update this.
#  _skip_remote_file: &_remote_file
#      perf/5f6ca2392fbabe40badf39c4/c39af144b2370be0537410d9bc79be66a1a5f3c7/linux/mongodb-5f6ca2392fbabe40badf39c4.tar.gz
#  _skip_compile: &_compile
#      []
#  _skip_expansions: &_expansion_updates
#    - key: mdb_binary_for_server
#      value: https://mciuploads.s3.amazonaws.com/perf/5f6ca2392fbabe40badf39c4/c39af144b2370be0537410d9bc79be66a1a5f3c7/linux/mongodb-5f6ca2392fbabe40badf39c4.tar.gz
#    - key: mdb_binary_for_client
#      value: https://mciuploads.s3.amazonaws.com/perf/5f6ca2392fbabe40badf39c4/c39af144b2370be0537410d9bc79be66a1a5f3c7/linux/mongodb-5f6ca2392fbabe40badf39c4.tar.gz
  ###

  _src_dir: &src_dir src/mongo
  _modules: &modules
    - enterprise
    - mongo-tools
    - dsi
    - genny
    - signal-processing
    - workloads
    - linkbench
    - linkbench2
    - mongo-perf
    - YCSB
    - benchmarks
    - py-tpcc

modules:
  ###
  # Same in every DSI project. Ensure that this block is synchronized with
  # evergreen-dsitest.yml, atlas/system_perf_atlas.yml, and src/dsi/onboarding.py
  # (search update-repos-here) in this repo, and etc/system_perf.yml and
  # etc/perf.yml in mongodb/mongo
  - name: dsi
    repo: git@github.com:10gen/dsi.git
    prefix: ../../src
    branch: master
  - name: genny
    repo: git@github.com:10gen/genny.git
    prefix: ../../src
    branch: master
  - name: signal-processing
    repo: git@github.com:10gen/signal-processing.git
    prefix: ../../src
    branch: master
  - name: workloads
    repo: git@github.com:10gen/workloads.git
    prefix: ../../src
    branch: master
  - name: linkbench
    repo: git@github.com:10gen/linkbench.git
    prefix: ../../src
    branch: master
  - name: linkbench2
    repo: git@github.com:10gen/linkbench2.git
    prefix: ../../src
    branch: master
  - name: mongo-perf
    repo: git@github.com:mongodb/mongo-perf.git
    prefix: ../../src
    branch: master
  - name: YCSB
    repo: git@github.com:mongodb-labs/YCSB.git
    prefix: ../../src
    branch: master
    ref: 03515f78fc460836886604ff8fbee89e5853fbbc
  - name: benchmarks
    repo: git@github.com:mongodb-labs/benchmarks.git
    prefix: ../../src
    branch: master
  - name: py-tpcc
    repo: git@github.com:mongodb-labs/py-tpcc.git
    prefix: ../../src
    branch: master
    ref: 46f8f42a71626fc2057d2604ab9359ccf0395ba0

  ###
#  - name: mongo
#    repo: git@github.com:mongodb/mongo.git
#    prefix: ../../src
#    branch: master
  - name: enterprise
    repo: git@github.com:10gen/mongo-enterprise-modules.git
    prefix: src/mongo/db/modules
    branch: master
  - name: mongo-tools
    repo: git@github.com:mongodb/mongo-tools.git
    prefix: mongo-tools/src/github.com/mongodb
    branch: master


###
# Same in every DSI project
pre:
  - func: f_other_pre_ops
  - func: f_dsi_pre_run
post:
  - func: f_dsi_post_run
  - func: f_other_post_ops
timeout:
  - func: f_dsi_timeout
  - func: f_other_timeout
###

functions:
  ###
  # Same in every DSI project
  f_dsi_pre_run:
    - command: manifest.load
    - command: expansions.update
      params:
        updates: *_expansion_updates
  f_run_dsi_workload:
    - command: git.get_project
      params:
        directory: *src_dir
        revisions:
          dsi: ${dsi_rev}
          genny: ${genny_rev}
          signal-processing: ${signal-processing_rev}
          linkbench: ${linkbench_rev}
          linkbench2: ${linkbench2_rev}
          workloads: ${workloads_rev}
          mongo-perf: ${mongo-perf_rev}
          YCSB: ${YCSB_rev}
          benchmarks: ${benchmarks_rev}
          py-tpcc: ${py-tpcc_rev}
    - command: expansions.write
      params:
        file: ./expansions.yml
    - command: shell.exec
      params:
        script: ./src/dsi/run-dsi run_workload
    - command: shell.exec
      type: system
      params:
        script: ./src/dsi/run-dsi determine_failure -m SYSTEM
    - command: shell.exec
      type: setup
      params:
        script: ./src/dsi/run-dsi determine_failure -m SETUP
    - command: shell.exec
      type: test
      params:
        script: ./src/dsi/run-dsi determine_failure -m TEST
  f_dsi_post_run:
    - command: json.send
      params:
        name: perf
        file: ./build/LegacyPerfJson/perf.json
    - command: shell.exec
      params:
        script: ./src/dsi/run-dsi post_run
    - command: perf.send
      params:
        file: ./build/CedarReports/cedar_report.json
        aws_key: ${terraform_key}
        aws_secret: ${terraform_secret}
        bucket: genny-metrics
        region: us-east-1
        prefix: ${task_id}_${execution}
    - command: attach.results
      params:
        file_location: ./build/EvergreenResultsJson/results.json
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ./build/Artifacts/DSIArtifacts.tgz
        remote_file: ${project_dir}/${build_variant}/${revision}/${task_id}/${version_id}/logs/dsi-artifacts-${task_name}-${build_id}-${execution}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
        display_name: DSI Artifacts - Execution ${execution}
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ./build/Documentation/index.html
        remote_file: ${project_dir}/${build_variant}/${revision}/${task_id}/${version_id}/logs/${task_name}-${build_id}-index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: Documentation
  f_dsi_timeout:
    - command: shell.exec
      params:
        script: ./src/dsi/run-dsi on_timeout
  ###

  f_other_post_ops:
      - command: shell.exec
        params:
          working_dir: src
          script: |
            # removes files from the (local) scons cache when it's over a
            # threshold, to the $prune_ratio percentage. Ideally override
            # these default values in the distro config in evergreen.

            if [ -d "${scons_cache_path}" ]; then
                /opt/mongodbtoolchain/v3/bin/python3 buildscripts/scons_cache_prune.py --cache-dir ${scons_cache_path} --cache-size ${scons_cache_size|200} --prune-ratio ${scons_prune_ratio|0.8}
            fi
  f_other_pre_ops:
    - &f_other_pre_ops
      command: shell.exec
      params:
        silent: true
        script: |
          for PS in mongo{,d,s,import,export,dump,restore,stat,files,top,bridge} resmoke.py python{,2} lldb _test; do
              pkill -9 "$PS"
          done
  f_other_timeout:
    # Can't be empty so just `echo`.
    - command: shell.exec
      params: {script: "echo"}

  ###
  # Compile
  compile mongodb:
    # We create a virtual environment with the Python dependencies for compiling the server
    # installed.
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose

          /opt/mongodbtoolchain/v3/bin/virtualenv --python /opt/mongodbtoolchain/v3/bin/python3 "${workdir}/compile_venv"
          /opt/mongodbtoolchain/v3/bin/virtualenv --python /opt/mongodbtoolchain/v3/bin/python2 "${workdir}/venv"
          source "${workdir}/compile_venv/bin/activate"

          python -m pip install -r etc/pip/compile-requirements.txt

    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose

          mkdir -p mongodb/bin

          # We get the raw version string (r1.2.3-45-gabcdef) from git
          MONGO_VERSION=$(git describe --abbrev=7)

          # If this is a patch build, we add the patch version id to the version string so we know
          # this build was a patch, and which evergreen task it came from
          if [ "${is_patch|false}" = "true" ]; then
            MONGO_VERSION="$MONGO_VERSION-patch-${version_id}"
          fi

          # This script converts the generated version string into a sanitized version string for
          # use by scons and uploading artifacts as well as information about for the scons cache.
          source "${workdir}/compile_venv/bin/activate"
          MONGO_VERSION=$MONGO_VERSION USE_SCONS_CACHE=${use_scons_cache|false} python buildscripts/generate_compile_expansions.py --out compile_expansions.yml
    - command: expansions.update
      params:
        file: src/compile_expansions.yml
    - command: shell.exec
      params:
        working_dir: src/mongo-tools/src/github.com/mongodb/mongo-tools
        script: |
          set -o verbose
          set -o errexit

          # make sure newlines in the scripts are handled correctly by windows
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;

          # set_goenv provides set_goenv(), print_ldflags() and print_tags() used below
          . ./set_goenv.sh
          GOROOT="" set_goenv || exit
          go version

          build_tools="bsondump mongostat mongofiles mongoexport mongoimport mongorestore mongodump mongotop"
          if [ "${build_mongoreplay}" = "true" ]; then
              build_tools="$build_tools mongoreplay"
          fi
          for i in $build_tools; do
              go build -ldflags "$(print_ldflags)" ${args} -tags "$(print_tags ${tooltags})" -o "../../../../../mongodb/bin/$i${exe|}" $i/main/$i.go
              "../../../../../mongodb/bin/$i${exe|}" --version
          done
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          source "${workdir}/compile_venv/bin/activate"
          python ./buildscripts/scons.py ${compile_flags|} ${scons_cache_args|} install-core MONGO_VERSION=${version} DESTDIR=$(pwd)/mongodb ${patch_compile_flags|}
          mkdir -p mongodb/jstests/hooks
          if [ -d jstests/hooks ]
          then
            echo "Fetching JS test DB correctness checks from directory jstests"
            cp -a jstests/* mongodb/jstests

            echo "Now adding our own special run_validate_collections.js wrapper"
            mv mongodb/jstests/hooks/run_validate_collections.js mongodb/jstests/hooks/run_validate_collections.actual.js

            cat << EOF > mongodb/jstests/hooks/run_validate_collections.js
            print("NOTE: run_validate_collections.js will skip the oplog!");
            TestData = { skipValidationNamespaces: ['local.oplog.rs'] };
            load('jstests/hooks/run_validate_collections.actual.js');
          EOF
          fi
          tar czf mongodb${compile-variant|}.tar.gz mongodb
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb${compile-variant|}.tar.gz
        remote_file: ${project_dir}/${version_id}/${revision}/${platform}/mongodb${compile-variant|}-${version_id}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: mongodb${compile-variant|}.tar.gz
  ###

  ## Schedule Tasks ##
  f_schedule_tasks:
    - command: git.get_project
      params:
        directory: *src_dir
        revisions:
          dsi: ${dsi_rev}
          genny: ${genny_rev}
          signal-processing: ${signal-processing_rev}
          linkbench: ${linkbench_rev}
          linkbench2: ${linkbench2_rev}
          workloads: ${workloads_rev}
          mongo-perf: ${mongo-perf_rev}
          YCSB: ${YCSB_rev}
          benchmarks: ${benchmarks_rev}
          py-tpcc: ${py-tpcc_rev}
    - command: expansions.write
      params:
        file: ./expansions.yml
    - command: shell.exec
      params:
        script: ./src/dsi/run-dsi schedule_tasks --tasks=${tasks}
    - command: generate.tasks
      params:
        files:
          - build/TaskJSON/Tasks.json


tasks:
  ###
  # Same in every DSI project
  - name: schedule_global_auto_tasks
    priority: 5
    commands:
      - func: f_schedule_tasks
        vars:
          tasks: all_tasks
  - name: schedule_variant_auto_tasks
    priority: 5
    commands:
      - func: f_schedule_tasks
        vars:
          tasks: variant_tasks
  - name: schedule_patch_auto_tasks
    priority: 5
    commands:
      - func: f_schedule_tasks
        vars:
          tasks: patch_tasks
  - name: smoke_test
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
  - name: smoke_test_ssl
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
          mongodb_setup: replica-ssl
          infrastructure_provisioning: replica
  - name: smoke_test_standalone_auth
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
          mongodb_setup: standalone-auth
          infrastructure_provisioning: single
  - name: smoke_test_replset_auth
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
          mongodb_setup: replica-auth
          infrastructure_provisioning: replica
  - name: smoke_test_shard_lite_auth
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
          mongodb_setup: shard-lite-auth
          infrastructure_provisioning: shard-lite
  - name: dsi_integ_test_run_command_simple
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: run_command_simple
  ###

  - name: compile
    commands:
      - command: manifest.load
      - command: git.get_project
        params:
          directory: src
          revisions:
            enterprise: ${enterprise_rev}
            mongo-tools: ${mongo-tools_rev}
      - func: "compile mongodb"


  - name: genny_execution_UserAcquisition
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: auto_genny_workload
          auto_workload_path: execution/UserAcquisition.yml
  - name: genny_scale_InsertRemove
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: auto_genny_workload
          auto_workload_path: scale/InsertRemove.yml
  - name: query_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: query,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: views-query
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: query_identityview,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: views-aggregation
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: aggregation_identityview,
             include_filter_2: regression,
             exclude_filter: none,
             threads: "1",
             read_cmd: 'true'}
  - name: where_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: where,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: update_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: update,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: insert_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: insert,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: wildcard-index-read_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: wildcard_read,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: wildcard-index-write_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: wildcard_write,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: geo_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: geo,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: misc_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: command multi remove mixed,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: misc_custom_filter_default_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          mongodb_setup: microbenchmarks_standalone_custom_filter_default
          test_control_params: |
            {include_filter_1: command multi remove mixed,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: misc_custom_filter_slow_or_sample_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          mongodb_setup: microbenchmarks_standalone_custom_filter_slow_or_sample
          test_control_params: |
            {include_filter_1: command multi remove mixed,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: misc_custom_filter_complex_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          mongodb_setup: microbenchmarks_standalone_custom_filter_complex
          test_control_params: |
            {include_filter_1: command multi remove mixed,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: misc_custom_filter_whole_doc_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          mongodb_setup: microbenchmarks_standalone_custom_filter_whole_doc
          test_control_params: |
            {include_filter_1: command multi remove mixed,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: misc_slowms_everything_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          mongodb_setup: microbenchmarks_standalone_slowms_everything
          test_control_params: |
            {include_filter_1: command multi remove mixed,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: singleThreaded_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: single_threaded,
             include_filter_2: core regression,
             exclude_filter: none,
             threads: "1",
             read_cmd: 'true'}
  - name: aggregation_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: aggregation,
             include_filter_2: regression,
             exclude_filter: js,
             threads: "1",
             read_cmd: 'true'}
  - name: agg-query-comparison_read_commands
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: agg_query_comparison,
             include_filter_2: core regression,
             exclude_filter: single_threaded,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: pipeline-updates
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: pipeline-updates,
             include_filter_2: regression,
             exclude_filter: none,
             threads: "1 2 4 8",
             read_cmd: 'true'}
  - name: javascript
    depends_on: *_compile
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: microbenchmarks
          test_control_params: |
            {include_filter_1: js,
             include_filter_2: aggregation,
             exclude_filter: none,
             threads: "1 2 4 8",
             read_cmd: 'true'}


buildvariants:
  - name: linux-wt-standalone
    display_name: Standalone Linux inMemory
    batchtime: 240  # 4 hours
    modules: *modules
    expansions:
      # We are explicitly tracking the rhel62 variant compile options from evergreen.yml for
      # microbenchmarks, since they run on the centos6 boxes.  If we can get proper artifacts directly
      # from that project, we should do that and remove the compile tasks.
      compile_flags: --ssl --separate-debug MONGO_DISTMOD=rhel62 -j$(grep -c ^processor /proc/cpuinfo) --release --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      mongod_exec_wrapper: &exec_wrapper "numactl --physcpubind=4,5,6,7 -i 1"
      perf_exec_wrapper: &perf_wrapper "numactl --physcpubind=1,2,3 -i 0"
      use_scons_cache: true
      platform: linux
      infrastructure_provisioning: microbenchmarks
      mongodb_setup: microbenchmarks_standalone
      canaries: none
      storageEngine: inMemory
      project_dir: &project_dir perf
    run_on:
    - "centos6-perf"
    tasks:
    - name: compile
      distros:
      - rhel62-large
    - name: genny_scale_InsertRemove
    - name: genny_execution_UserAcquisition
    - name: aggregation_read_commands
    - name: agg-query-comparison_read_commands
    - name: query_read_commands
    - name: views-aggregation
    - name: views-query
    - name: where_read_commands
    - name: update_read_commands
    - name: insert_read_commands
    - name: wildcard-index-read_read_commands
    - name: wildcard-index-write_read_commands
    - name: geo_read_commands
    - name: misc_read_commands
    - name: misc_custom_filter_default_read_commands
    - name: misc_custom_filter_slow_or_sample_read_commands
    - name: misc_custom_filter_complex_read_commands
    - name: misc_custom_filter_whole_doc_read_commands
    - name: misc_slowms_everything_read_commands
    - name: singleThreaded_read_commands
    - name: pipeline-updates
    - name: javascript

  - name: linux-wt-repl
    display_name: 1-Node ReplSet Linux inMemory
    batchtime: 240  # 4 hours
    modules: *modules
    expansions:
      mongod_exec_wrapper: *exec_wrapper
      perf_exec_wrapper: *perf_wrapper
      platform: linux
      infrastructure_provisioning: microbenchmarks
      mongodb_setup: microbenchmarks_replica
      canaries: none
      storageEngine: inMemory
      project_dir: *project_dir
    run_on:
    - "centos6-perf"
    tasks:
    - name: genny_scale_InsertRemove
    - name: update_read_commands
    - name: insert_read_commands
    - name: misc_read_commands
    - name: singleThreaded_read_commands
    - name: wildcard-index-write_read_commands
    - name: pipeline-updates

####################################################
#                  YAML Conventions                 #
#####################################################
# Please see our conventions document at
# https://wiki.corp.mongodb.com/pages/viewpage.action?pageId=133273894
# for help navigating this document, or for help with our lint rules.


#####################################################
#               A note on expansions                #
#####################################################

# Expansions usually appear in the form ${key|default}
# If 'key' is found in the executor's map of currently known
# expansions, the corresponding value is used. If the key can
# not be found, the default is used.
#
# Arbitrary expansions can be specified in the YAML configuration
# files in the following places:
# - The 'expansions' field for buildvariants (branch file)
# - The 'expansions' field for distros (distros file)
#
# A number of 'built-in' expansions are also available for use; these include:
# - environment variables available on the host machine
# - 'workdir' (references the executor's work directory).
# - 'task_id' (references the task id of the task the executor is working on).
# - 'build_variant' (references the executing task's buildvariant).
# - 'config_root' (references the root directory for the executor's configuration artifacts).


#####################################################
#          Setup environment in a new task          #
#####################################################

# There are several ways to setup the environment in your task.
#
# 1. If your task depends on 'archive_dist_test'/'archive_dist_test_debug' task you can call the function "do setup"
# - func: "do setup"
# Or alternatively call the functions in the sequence below, if you don't need everything else from "do setup"
# - func: "fetch artifacts" (includes python, shell scripts, jstests etc. from the mongo and enterprise repos)
# - func: "f_expansions_write"
# - func: "kill processes"
# - func: "cleanup environment"
# - func: "set up venv"
#
# 2. If your task does not depend on 'archive_dist_test'/'archive_dist_test_debug' task use the following functions
# call sequence
# - command: manifest.load
# - func: "git get project" (clone the entire mongo and enterprise repos)
# - func: "f_expansions_write"
# - func: "kill processes"
# - func: "cleanup environment"
# - func: "set up venv"


stepback: true
command_type: system
pre_error_fails_task: true
oom_tracker: true


# Files that match an ignore-list pattern will not trigger a build, if they're the only modified
# files in the patch.
ignore:
  - ".*"
  - "!.clang-format"
  - "!.eslintrc.yml"
  - "*.md"
  - "*.rst"
  - "*.txt"
  - "/distsrc/**"
  - "/docs/**"
  - "/etc/*.yml"
  - "!/etc/evergreen.yml"
  - "README"

## Parameters for parameterized builds (see https://github.com/evergreen-ci/evergreen/wiki/Parameterized-Builds)
parameters:
  - key: patch_compile_flags
    description: "Additional SCons flags to be applied during scons compile invocations in this patch"

  - key: future_git_tag
    description: "Future git tag to be added. If empty, we will use the most recent git tag instead."

## Some variables for convenience:
variables:

# Used when the tests it runs depend only on mongod, mongos, the mongo shell and the tools.
- &task_template
  name: template
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --help
      resmoke_jobs_max: 0  # No cap on number of jobs.

- &gen_task_template
  name: gen_task_template
  depends_on:
    - name: build_variant_gen
    - name: archive_dist_test
  commands:
    - func: "generate resmoke tasks"
      vars:
        resmoke_args: --help

- &benchmark_template
  name: benchmark_template
  depends_on:
  - name: compile_benchmarks
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      resmoke_args: --help
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- &jepsen_config_vars
  jepsen_key_time_limit: --key-time-limit 15
  jepsen_protocol_version: --protocol-version 1
  jepsen_read_concern: ""
  jepsen_read_with_find_and_modify: ""
  jepsen_storage_engine: ""
  jepsen_test_name: ""
  # Empirically, we've had greater success in reproducing the issues found in MongoDB versions
  # 3.4.0-rc3 and 3.4.0-rc4 when running Jepsen with at least --time-limit=600.
  jepsen_time_limit: --time-limit 1200
  jepsen_write_concern: ""

# Template for running Jepsen tests
- &run_jepsen_template
  name: run_jepsen_template
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars

- &jstestfuzz_config_vars
  num_files: 15
  num_tasks: 5
  is_jstestfuzz: true
  resmoke_args: --help # resmoke_args needs to be overridden to specify one of the jstestfuzz suites
  resmoke_jobs_max: 1
  should_shuffle: false
  continue_on_failure: false
  # Terminate the function when there has been no output to stdout for 30 minutes. E.g. when something is stuck in an infinite loop.
  # resmoke.py writes the test output to logkeeper and only writes to stdout when starting the next test.
  # resmoke.py not producing output on stdout means that the test is still running and presumably not going to finish.
  # Note that timeout_secs is different from exec_timeout_secs, which applies to a task and times out regardless of whether output has been written to stdout.
  timeout_secs: 1800

# Used for tests that invoke 'resmoke.py --suites=jstestfuzz*'.
- &jstestfuzz_template
  name: jstestfuzz_template
  exec_timeout_secs: 14400 # Time out the task if it runs for more than 4 hours.
  depends_on:
  - build_variant_gen
  - archive_dist_test
  commands:
  - func: "generate resmoke tasks"

# Templates used by powercycle
- &powercycle_remote_credentials
  private_key_file: src/powercycle.pem
  private_key_remote: ${__project_aws_ssh_key_value}

- &libfuzzertests
  name: libfuzzertests!
  execution_tasks:
  - compile_and_archive_libfuzzertests
  - fetch_and_run_libfuzzertests

- &compile_task_group_template
  name: compile_task_group_template
  max_hosts: 1
  tasks: []
  setup_task:
  - func: "f_expansions_write"
  - func: "apply compile expansions"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  teardown_task:
  - func: "f_expansions_write"
  - func: "attach scons logs"
  - func: "attach report"
  - func: "attach artifacts"
  - func: "kill processes"
  - func: "save code coverage data"
  - func: "save mongo coredumps"
  - func: "save failed unittests"
  - func: "save UndoDB recordings"
  - func: "save unstripped dbtest"
  - func: "save hang analyzer debugger files"
  - func: "save disk statistics"
  - func: "save system resource information"
  - func: "save libfuzzertest corpora"
  - func: "remove files"
    vars:
      files: >-
        src/resmoke_error_code
        src/build/scons/config.log
        src/*.gcda.gcov
        src/gcov-intermediate-files.tgz
        src/*.core src/*.mdmp
        mongo-coredumps.tgz
        src/dist-unittests/bin/*
        src/dist-unittests/lib/*
        mongo-unittests.tgz
        src/debugger*.*
        src/mongo-hanganalyzer.tgz
        diskstats.tgz
        system-resource-info.tgz
        ${report_file|src/report.json}
        ${archive_file|src/archive.json}
  setup_group_can_fail_task: true
  setup_group:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "set task expansion macros"
  - func: "f_expansions_write"
  - func: "kill processes"
  - func: "cleanup environment"
  # The python virtual environment is installed in ${workdir}, which is created in
  # "set up venv".
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "get all modified patch files"
  - func: "f_expansions_write"
  - func: "configure evergreen api credentials"
  - func: "get buildnumber"
  - func: "f_expansions_write"
  - func: "set up credentials"
  - func: "use WiredTiger develop" # noop if ${use_wt_develop} is not "true"
  - func: "set up win mount script"
  - func: "generate compile expansions"
  - func: "f_expansions_write"
  teardown_group:
  - func: "f_expansions_write"
  - func: "umount shared scons directory"
  - func: "cleanup environment"
  timeout:
  - func: "f_expansions_write"
  - func: "run hang analyzer"
  - func: "wait for resmoke to shutdown"

# Use this template for enterprise Windows testing coverage on non-pushing
# variants
- &enterprise-windows-nopush-template
  name: enterprise-windows-nopush-template
  run_on:
  - windows-vsCurrent-small
  modules:
  - enterprise
  expansions: &enterprise-windows-nopush-expansions-template
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug msi
    exe: ".exe"
    content_type: application/zip
    compile_flags: --ssl MONGO_DISTMOD=windows CPPPATH="c:/sasl/include c:/snmp/include" LIBPATH="c:/sasl/lib c:/snmp/lib" -j$(( $(grep -c ^processor /proc/cpuinfo) / 2 )) --win-version-min=win10
    num_scons_link_jobs_available: 0.5
    python: '/cygdrive/c/python/python37/python.exe'
    ext: zip
    scons_cache_scope: shared
    multiversion_platform: windows
    multiversion_edition: enterprise
    jstestfuzz_num_generated_files: 35
    large_distro_name: windows-vsCurrent-large
    test_flags: --excludeWithAnyTags=incompatible_with_windows_tls
  tasks:
  - name: compile_test_and_package_serial_TG
    distros:
    - windows-vsCurrent-large
  - name: build_variant_gen
  - name: burn_in_tests_gen
  - name: .aggfuzzer .common
  - name: audit
  - name: auth_audit_gen
  - name: buildscripts_test
  - name: causally_consistent_jscore_txns_passthrough
  - name: .encrypt !.aggregation !.gcm
  - name: external_auth
  - name: external_auth_aws
  - name: external_auth_windows
    distros:
    - windows-64-2016
  - name: .jscore .common !.sharding
  - name: .jstestfuzz .common
  - name: .logical_session_cache
  - name: replica_sets_auth_gen
  - name: sasl
  - name: sharding_auth_gen
  - name: sharding_auth_audit_gen
  - name: snmp

- &stitch_support_task_group_template
  name: stitch_support_task_group_template
  setup_task:
    - func: "apply compile expansions"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
  teardown_task:
  - func: "attach scons logs"
  setup_group_can_fail_task: true
  setup_group:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "kill processes"
    - func: "cleanup environment"
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "get buildnumber"
    - func: "f_expansions_write"
    - func: "set up win mount script"
    - func: "generate compile expansions"
  teardown_group:
    - func: "umount shared scons directory"

# List of all variants that make mongocryptd
# If a variant is listed here and has a push task, mongocryptd is pushed
- mongocryptd_variants: &mongocryptd_variants
  - enterprise-amazon2
  - enterprise-amazon2-arm64
  - enterprise-debian92-64
  - enterprise-debian10-64
  - enterprise-linux-64-amazon-ami
  - enterprise-macos
  - enterprise-rhel-70-64-bit
  - enterprise-rhel-70-64-bit-kitchen-sink
  - enterprise-rhel-70-64-bit-no-libunwind
  - enterprise-rhel-81-ppc64le
  - enterprise-rhel-72-s390x
  - enterprise-rhel-72-s390x-inmem
  - enterprise-rhel-80-64-bit
  - enterprise-rhel-80-64-bit-coverage
  - enterprise-rhel-80-64-bit-inmem
  - enterprise-rhel-80-64-bit-multiversion
  - enterprise-rhel-80-64-bit-suggested
  - enterprise-rhel-82-arm64
  - enterprise-suse12-64
  - enterprise-suse15-64
  - enterprise-ubuntu1804-64
  - enterprise-ubuntu1804-arm64
  - enterprise-ubuntu2004-arm64
  - enterprise-ubuntu2004-64
  - enterprise-windows
  - enterprise-windows-suggested
  - enterprise-windows-debug-unoptimized
  - enterprise-windows-inmem
  - enterprise-windows-required
  - enterprise-windows-wtdevelop
  - ubuntu1804-debug-asan
  - ubuntu1804-debug-ubsan
  - ubuntu1804-debug-aubsan-lite-required
  - ubuntu1804-debug-aubsan-lite_fuzzer


# List of all variants that make mh artifacts.
# If a variant is listed here and has a push task, the mh artifacts are pushed
- mh_variants: &mh_variants
  - enterprise-debian92-64
  - enterprise-macos
  - enterprise-rhel-80-64-bit
  - enterprise-rhel-80-64-bit-dynamic-required
  - enterprise-rhel-70-64-bit
  - enterprise-rhel-82-arm64
  - enterprise-amazon2-arm64
  - enterprise-ubuntu1804-64
  - enterprise-windows
  - enterprise-windows-suggested
  - enterprise-windows-required

# List of all variants that use the packages.tgz
- package_variants: &package_variants
  - amazon
  - enterprise-linux-64-amazon-ami
  - amazon2
  - enterprise-amazon2
  - enterprise-amazon2-arm64
  - debian10
  - enterprise-debian10-64
  - debian92
  - enterprise-debian92-64
  - rhel70
  - rhel76_compile_rhel70
  - enterprise-rhel-70-64-bit
  - rhel-72-s390x
  - enterprise-rhel-81-ppc64le
  - enterprise-rhel-72-s390x
  - ubi8
  - rhel80
  - rhel-82-arm64
  - enterprise-rhel-80-64-bit
  - enterprise-rhel-80-64-bit-coverage
  - enterprise-rhel-80-64-bit-suggested
  - enterprise-rhel-82-arm64
  - suse12
  - enterprise-suse12-64
  - suse15
  - enterprise-suse15-64
  - ubuntu1804-debug-suggested
  - enterprise-ubuntu-dynamic-1804-clang-tidy-required
  - ubuntu1804
  - ubuntu1804-arm64
  - ubuntu2004-arm64
  - ubuntu2004
  - enterprise-ubuntu1804-64
  - enterprise-ubuntu1804-arm64
  - enterprise-ubuntu2004-arm64
  - enterprise-ubuntu2004-64
  - enterprise-windows
  - enterprise-windows-suggested
  - windows


#######################################
#            Functions                #
#######################################

functions:
  "f_expansions_write": &f_expansions_write
    command: expansions.write
    params:
      file: expansions.yml
      redacted: true

  "remove files":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/functions/files_remove.sh"

  "configure evergreen api credentials": &configure_evergreen_api_credentials
    command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/functions/evergreen_api_credentials_configure.sh"

  "configure selected tests credentials": &configure_selected_tests_credentials
    command: subprocess.exec
    type: test
    params:
      binary: bash
      silent: true
      args:
        - "src/evergreen/functions/selected_tests_credentials_configure.sh"
      env:
        project: ${project}
        selected_tests_auth_user: ${selected_tests_auth_user}
        selected_tests_auth_token: ${selected_tests_auth_token}

  "git get project": &git_get_project
    command: git.get_project
    params:
      directory: ${git_project_directory|src}
      revisions: # for each module include revision as <module_name> : ${<module_name>_rev}
        enterprise: ${enterprise_rev}
        wtdevelop: ${wtdevelop_rev}

  # Get get the mongo repo, no modules. Useful for inspecting the commit history with the
  # `git` Python tool.
  "git get project no modules":
    - *f_expansions_write
    - command: git.get_project
      params:
        directory: ${git_project_directory|src}

  "add git tag": &add_git_tag
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/add_git_tag.sh"
      env:
        future_git_tag: ${future_git_tag}

  "git get project and add git tag":
    - *f_expansions_write
    - *git_get_project
    - *add_git_tag

  "fetch artifacts": &fetch_artifacts
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}.tgz
      bucket: mciuploads
      extract_to: src

  "fetch packages": &fetch_packages
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz
      bucket: mciuploads
      extract_to: src
      build_variants: *package_variants

  "fetch dist tarball": &fetch_dist_tarball
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/dist/mongo-${build_id}.${ext|tgz}
      bucket: mciuploads
      local_file: src/mongo-binaries.tgz

  "fetch binaries": &fetch_binaries
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${mongo_binaries}
      bucket: mciuploads
      local_file: src/mongo-binaries.tgz

  "extract binaries": &extract_binaries
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/binaries_extract.sh"

  "check binary version": &check_binary_version
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/binary_version_check.sh"

  "fetch benchmarks": &fetch_benchmarks
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      remote_file: ${project}/${build_variant}/${revision}/benchmarks/${build_id}.tgz
      bucket: mciuploads
      extract_to: src

  "fetch corpus": &fetch_corpus
    command: s3.get
    params:
      aws_key: ${s3_access_key_id}
      aws_secret: ${s3_secret_access_key}
      bucket: fuzzer-artifacts
      extract_to: src/corpora
      remote_file: ${mongo_fuzzer_corpus}

  "fetch legacy corpus": &fetch_legacy_corpus
    command: s3.get
    params:
      aws_key: ${s3_access_key_id}
      aws_secret: ${s3_secret_access_key}
      bucket: fuzzer-artifacts
      # Extract the legacy corpora to the merge directory to synthesize together until we burn in.
      extract_to: src/corpora-merged
      remote_file: ${project}/corpus/mongo-${build_variant}-latest.tgz

  "archive new corpus": &archive_new_corpus
    command: archive.targz_pack
    params:
      target: corpora.tgz
      source_dir: src/corpora-merged
      include:
        - "**"

  "upload new corpus": &upload_new_corpus
    command: s3.put
    params:
      aws_key: ${s3_access_key_id}
      aws_secret: ${s3_secret_access_key}
      bucket: fuzzer-artifacts
      content_type: ${content_type|application/gzip}
      display_name: "Fuzzer Tests Corpus Tar Archive"
      local_file: corpora.${ext|tgz}
      optional: true
      permissions: private
      remote_file: ${mongo_fuzzer_corpus}
      visibility: signed

  "upload new corpus for mciuploads": &upload_new_corpus_mciuploads
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      bucket: mciuploads
      content_type: ${content_type|application/gzip}
      display_name: Input Corpora
      local_file: corpora.${ext|tgz}
      optional: true
      permissions: private
      remote_file: ${mongo_fuzzer_corpus_mciuploads}
      visibility: signed

  "get buildnumber": &get_buildnumber
    command: keyval.inc
    params:
      key: "${build_variant}_master"
      destination: "builder_num"

  "run diskstats": &run_diskstats
    command: subprocess.exec
    params:
      background: true
      system_log: true
      binary: bash
      args:
        - "./src/evergreen/functions/run_diskstats.sh"

  "collect system resource info": &collect_system_resource_info
    command: subprocess.exec
    params:
      background: true
      system_log: true
      binary: bash
      args:
        - "./src/evergreen/functions/system_resource_info_collect.sh"

  # Run a monitor process as a background, system task to periodically
  # display how many threads interesting processes are using.
  "monitor process threads": &monitor_process_threads
    command: subprocess.exec
    params:
      background: true
      system_log: true
      binary: bash
      args:
        - "./src/evergreen/functions/process_threads_monitor.sh"

  "set up credentials": &set_up_credentials
    command: subprocess.exec
    params:
      binary: bash
      silent: true
      args:
        - "./src/evergreen/functions/credentials_setup.sh"

  "set up win mount script":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        silent: true
        args:
          - "./src/evergreen/functions/win_mount_script_setup.sh"

  "set up notary client credentials":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        silent: true
        args:
          - "./src/evergreen/functions/notary_client_credentials_setup.sh"

  "f_remote_credentials_setup_exec": &set_up_remote_credentials
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/remote_credentials_setup.sh"
      env:
        private_key_remote_bash_var: ${private_key_remote}

  "set up remote credentials":
    - *f_expansions_write
    - *set_up_remote_credentials

  "call BF Suggestion service":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        silent: true
        args:
          - "./src/evergreen/functions/bf_suggestion_service_call.sh"

  "upload debugsymbols": &upload_debugsymbols
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongo-debugsymbols.${ext|tgz}
      remote_file: ${mongo_debugsymbols}
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}

  "use WiredTiger develop":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/wiredtiger_develop_use.sh"

  "shared scons cache pruning":
    - *f_expansions_write
    - command: subprocess.exec
      type: system
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/shared_scons_cache_pruning.sh"

  "umount shared scons directory":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/shared_scons_directory_umount.sh"

  "get all modified patch files":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/modified_patch_files_get_all.sh"

  # This function should only be called from patch-build-only tasks.
  "get added and modified patch files":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/functions/added_and_modified_patch_files_get.sh"

  "determine resmoke jobs": &determine_resmoke_jobs
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/resmoke_jobs_determine.sh"

  "update resmoke jobs expansions": &update_resmoke_jobs_expansions
    command: expansions.update
    params:
      ignore_missing_file: true
      file: src/resmoke_jobs_expansion.yml

  "determine task timeout": &determine_task_timeout
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/task_timeout_determine.sh"

  "update task timeout expansions": &update_task_timeout_expansions
    command: expansions.update
    params:
      ignore_missing_file: true
      file: src/task_timeout_expansions.yml

  "update task timeout": &update_task_timeout
    command: timeout.update
    params:
      exec_timeout_secs: ${exec_timeout_secs}

  ### Set expansion macros used in each task.
  "set task expansion macros": &set_task_expansion_macros
    command: expansions.update
    params:
      updates:
      - key: mongo_binaries
        value: ${project}/${build_variant}/${revision}/binaries/mongo-${build_id}.${ext|tgz}
      - key: mongo_cryptd
        value: ${project}/${build_variant}/${revision}/binaries/mongo-cryptd-${build_id}.${ext|tgz}
      - key: mongo_cryptd_debugsymbols
        value: ${project}/${build_variant}/${revision}/binaries/mongo-cryptd-debugsymbols-${build_id}.${ext|tgz}
      - key: mh_archive
        value: ${project}/${build_variant}/${revision}/binaries/mh-${build_id}.${ext|tgz}
      - key: mh_debugsymbols
        value: ${project}/${build_variant}/${revision}/debugsymbols/mh-debugsymbols-${build_id}.${ext|tgz}
      - key: mongo_debugsymbols
        value: ${project}/${build_variant}/${revision}/debugsymbols/debugsymbols-${build_id}.${ext|tgz}
      - key: mongo_shell
        value: ${project}/${build_variant}/${revision}/binaries/mongo-shell-${build_id}.${ext|tgz}
      - key: mongo_shell_debugsymbols
        value: ${project}/${build_variant}/${revision}/binaries/mongo-shell-debugsymbols-${build_id}.${ext|tgz}
      - key: mongo_fuzzer_corpus_mciuploads
        value: ${project}/${build_variant}/${revision}/libfuzzer-corpora/corpora-${build_id}.${ext|tgz}
      - key: mongo_fuzzer_corpus
        value: corpora-${project}-${build_variant}.${ext|tgz}
      - key: skip_tests
        value: skip_test-${build_id}

  "set up venv": &set_up_venv
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/functions/venv_setup.sh"
      env:
        pip_dir: ${pip_dir}

  "upload pip requirements": &upload_pip_requirements
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: pip-requirements.txt
      remote_file: ${project}/${build_variant}/${revision}/pip-requirements-${task_id}-${execution}.txt
      bucket: mciuploads
      permissions: public-read
      content_type: atext-plain
      display_name: Pip Requirements

  "send benchmark results":
    command: json.send
    params:
      name: perf
      file: src/perf.json

  "cleanup environment": &cleanup_environment
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/cleanup_environment.sh"

  "kill processes": &kill_processes
    command: subprocess.exec
    params:
      silent: true
      binary: bash
      args:
        - "./src/evergreen/kill_processes.sh"

  "do setup":
  - *f_expansions_write
  - *fetch_artifacts
  - *kill_processes
  - *cleanup_environment
  - *fetch_binaries
  - *set_up_venv
  - *upload_pip_requirements
  - *extract_binaries
  - *check_binary_version
  - *get_buildnumber
  - *f_expansions_write
  - *set_up_credentials
  - *run_diskstats
  - *monitor_process_threads
  - *collect_system_resource_info

  "do non-compile setup":
  - command: manifest.load
  - *git_get_project
  - *f_expansions_write
  - *add_git_tag
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - *upload_pip_requirements
  - *get_buildnumber
  - *f_expansions_write
  - *set_up_credentials

  "do benchmark setup":
  - command: manifest.load
  - *git_get_project
  - *f_expansions_write
  - *add_git_tag
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - *upload_pip_requirements
  - *get_buildnumber
  - *f_expansions_write
  - *set_up_credentials
  - *fetch_benchmarks

  "f_multiversion_setup_exec": &do_multiversion_setup
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/multiversion_setup.sh"

  "do multiversion setup":
    - *f_expansions_write
    - *do_multiversion_setup

  # Used by generator
  "get compiled binaries":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/compiled_binaries_get.sh"

  "generate powercycle tasks":
    - command: manifest.load
    - *git_get_project
    - *f_expansions_write
    - *add_git_tag
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - *upload_pip_requirements

    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_tasks_generate.sh"

    - command: archive.targz_pack
      params:
        target: powercycle_tasks_config.tgz
        source_dir: "./"
        include:
          - "powercycle_tasks.json"

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: powercycle_tasks_config.tgz
        remote_file: ${project}/${build_variant}/${revision}/powercycle_tasks/${task_name}-${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: Generated Task Config - Execution ${execution}

    - command: generate.tasks
      params:
        files:
          - powercycle_tasks.json

  "run powercycle sentinel":
    - command: manifest.load
    - *git_get_project
    - *f_expansions_write
    - *add_git_tag
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - *upload_pip_requirements
    - *configure_evergreen_api_credentials

    - command: subprocess.exec
      type: system
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_sentinel_run.sh"

  "execute resmoke tests": &execute_resmoke_tests
    command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "./src/evergreen/resmoke_tests_execute.sh"

  "retrieve generated test configuration": &retrieve_generated_test_configuration
    command: s3.get
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      bucket: mciuploads
      remote_file: ${project}/${gen_task_config_location}
      local_file: "generate_tasks_config.tgz"

  "extract generated test configuration": &extract_generated_test_configuration
    command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "./src/evergreen/extract_generated_test_configuration.sh"

  "generate selected tests":
    - *f_expansions_write
    - *configure_evergreen_api_credentials
    - *configure_selected_tests_credentials
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/selected_tests_generate.sh"
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: generate_tasks_config.tgz
        remote_file: ${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Generated Task Config - Execution ${execution}
        optional: true
    - command: generate.tasks
      params:
        optional: true
        files:
          - src/generated_resmoke_config/*.json

  "generate build variant":
    - *f_expansions_write
    - *configure_evergreen_api_credentials
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/generate_build_variant.sh"
          - "--evg-project-config etc/query.yml"
    - command: archive.targz_pack
      params:
        target: generate_tasks_config.tgz
        source_dir: src/generated_resmoke_config
        include:
          - "*"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: generate_tasks_config.tgz
        remote_file: ${project}/${build_variant}/${revision}/generate_tasks/${task_name}-${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Generated Task Config - Execution ${execution}
        optional: true
    - command: generate.tasks
      params:
        optional: true
        files:
          - src/generated_resmoke_config/*.json

  "generate burn in tags":
    - *f_expansions_write
    - *configure_evergreen_api_credentials
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/burn_in_tests_generate.sh"
    - command: archive.targz_pack
      params:
        target: burn_in_tags_gen.tgz
        source_dir: src/generated_burn_in_tags_config
        include:
          - "*"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: burn_in_tags_gen.tgz
        remote_file: ${project}/${build_variant}/${revision}/burn_in_tags_gen/burn_in_tags_gen-${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: Burn_in_tags Task Config - Execution ${execution}
    - command: generate.tasks
      params:
        files:
          - src/generated_burn_in_tags_config/burn_in_tags_gen.json

  "generate resmoke tasks":
    - *fetch_artifacts
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - *upload_pip_requirements
    - *f_expansions_write
    - *configure_evergreen_api_credentials

    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/gen_tasks_activate.sh"

  # Used by generator
  "run generated tests":
  - *f_expansions_write
  - *retrieve_generated_test_configuration
  - *extract_generated_test_configuration
  - *f_expansions_write
  - command: expansions.update
    params:
      updates:
      - key: aws_key_remote
        value: ${mongodatafiles_aws_key}
      - key: aws_profile_remote
        value: mongodata_aws
      - key: aws_secret_remote
        value: ${mongodatafiles_aws_secret}
  - *f_expansions_write
  - *set_up_remote_credentials
  - *f_expansions_write
  - *determine_resmoke_jobs
  - *update_resmoke_jobs_expansions
  - *f_expansions_write
  - *configure_evergreen_api_credentials
  - command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/implicit_multiversions_tasks_generate.sh"
  - *execute_resmoke_tests
    # The existence of the "run_tests_infrastructure_failure" file indicates this failure isn't
    # directly actionable. We use type=setup rather than type=system or type=test for this command
    # because we don't intend for any human to look at this failure.
  - command: subprocess.exec
    type: setup
    params:
      binary: bash
      args:
        - "./src/evergreen/check_run_tests_infrastructure_failure.sh"

  "run tests":
    - *f_expansions_write
    - *determine_task_timeout
    - *update_task_timeout_expansions
    - *f_expansions_write
    - *update_task_timeout
    - *f_expansions_write
    - command: expansions.update
      params:
        env:
          CEDAR_USER: ${cedar_user}
          CEDAR_API_KEY: ${cedar_api_key}
        updates:
        - key: aws_key_remote
          value: ${mongodatafiles_aws_key}
        - key: aws_profile_remote
          value: mongodata_aws
        - key: aws_secret_remote
          value: ${mongodatafiles_aws_secret}
    - *f_expansions_write
    - *set_up_remote_credentials
    - *f_expansions_write
    - *determine_resmoke_jobs
    - *update_resmoke_jobs_expansions
    - *f_expansions_write
    - *execute_resmoke_tests
      # The existence of the "run_tests_infrastructure_failure" file indicates this failure isn't
      # directly actionable. We use type=setup rather than type=system or type=test for this command
      # because we don't intend for any human to look at this failure.
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - "./src/evergreen/check_run_tests_infrastructure_failure.sh"

  "scons lint":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/scons_lint.sh"

  "scons compile":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/scons_compile.sh"

  "generate compile expansions":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/functions/compile_expansions_generate.sh"

  "apply compile expansions":
    - command: expansions.update
      params:
        file: src/compile_expansions.yml
    - *f_expansions_write

  "do jepsen setup":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/build_libfaketime.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/install_jepsen.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/nodes.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/do_jepsen_setup/move_binaries.sh"

  "run jepsen test":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      timeout_secs: 2700 # Timeout test if there is no output for more than 45 minutes.
      params:
        binary: bash
        args:
          - "./src/evergreen/jepsen_test_run.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/jepsen_test_fail.sh"

  "load aws test credentials":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        silent: true
        args:
          - "./src/evergreen/functions/aws_test_credentials_load.sh"

  "setup jstestfuzz":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/jstestfuzz_setup.sh"

  "lint fuzzer sanity patch":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/lint_fuzzer_sanity_patch.sh"

  "lint fuzzer sanity all":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/lint_fuzzer_sanity_all.sh"

  "update patch failure history":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/update_patch_failure_history.sh"

  # Used by generator
  "run jstestfuzz":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/run_jstestfuzz/clone_repos.sh"
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/jstestfuzz_run.sh"
    - command: archive.targz_pack
      params:
        target: "jstests.tgz"
        source_dir: "src/jstestfuzz"
        include:
          - "out/*.js"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: jstests.tgz
        remote_file: ${project}/${build_variant}/${revision}/jstestfuzz/${task_id}-${execution}.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/gzip
        display_name: Generated Tests - Execution ${execution}

  "run idl tests":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/idl_tests_run.sh"

  "run powercycle test":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_run_test.sh"

    - command: expansions.update
      params:
        ignore_missing_file: true
        file: src/powercycle_exit.yml
    - *f_expansions_write
    - command: subprocess.exec
      type: setup
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_ssh_failure_exit.sh"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_exit.sh"

  "run packager.py":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/packager.py_run.sh"

  "do snmp setup":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/do_snmp_setup.sh"

  "do watchdog setup":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/do_watchdog_setup.sh"

  "run kitchen":
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/kitchen_run.sh"

  "set up EC2 instance": &set_up_ec2_instance

    - command: host.create
      params:
        provider: ec2
        distro: ${distro_id}
        timeout_teardown_secs: 604800 # 7 days
        security_group_ids:
        - sg-097bff6dd0d1d31d0

    - command: host.list
      params:
        wait: true
        timeout_seconds: 3000
        num_hosts: 1
        path: src/hosts.yml

    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_check_host.sh"

    - command: expansions.update
      params:
        file: src/powercycle_ip_address.yml

    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/powercycle_setup_host.sh"

  ### Process & archive remote EC2 artifacts ###
  "save powercycle artifacts": &save_powercycle_artifacts
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/powercycle_save_artifacts.sh"

  "archive remote EC2 artifacts": &archive_remote_ec2_artifacts
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/ec2_artifacts.tgz
      remote_file: ${project}/${build_variant}/${revision}/remote_ec2/remote_ec2_artifacts-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Remote EC2 Artifacts - Execution ${execution}
      optional: true

  "archive remote EC2 monitor files": &archive_remote_ec2_monitor_files
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/ec2_monitor_files.tgz
      remote_file: ${project}/${build_variant}/${revision}/remote_ec2/remote_ec2_monitor-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Remote EC2 Monitor - Execution ${execution}
      optional: true

  "save ec2 task artifacts":
    - *f_expansions_write
    - *save_powercycle_artifacts
    - *archive_remote_ec2_artifacts
    - *archive_remote_ec2_monitor_files

  ### Process & archive local client logs ###
  "tar local client logs": &tar_local_client_logs
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/local_client_logs_tar.sh"

  "archive local client logs": &archive_local_client_logs
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/client-logs.tgz
      remote_file: ${project}/${build_variant}/${revision}/client_logs/mongo-client-logs-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: ${content_type|application/gzip}
      display_name: Client logs - Execution ${execution}
      optional: true

  "save local client logs":
    - *f_expansions_write
    - *tar_local_client_logs
    - *archive_local_client_logs

  ### Cleanup after the watchdog FUSE testing ###
  "cleanup FUSE watchdog":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/fuse_watchdog_cleanup.sh"

  ### Process & archive Code Coverage artifacts ###
  "process code coverage data": &process_code_coverage_data
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/functions/code_coverage_data_process.sh"

  "tar code coverage data": &tar_code_coverage_data
    command: archive.targz_pack
    params:
      target: "src/gcov-intermediate-files.tgz"
      source_dir: "src"
      include:
        - "*.gcda.gcov"

  "archive code coverage data": &archive_code_coverage_data
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: "src/gcov-intermediate-files.tgz"
      remote_file: ${project}/${build_variant}/${revision}/gcov/gcov-intermediate-files-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: gcov intermediate files - Execution ${execution}
      optional: true

  "save code coverage data":
    - *f_expansions_write
    - *process_code_coverage_data
    - *tar_code_coverage_data
    - *archive_code_coverage_data

  "tar jepsen logs": &tar_jepsen_logs
    command: archive.targz_pack
    params:
      target: "src/jepsen-mongod-logs.tgz"
      source_dir: "${workdir}/src/jepsen-workdir"
      include:
        - "./**.log"

  "archive jepsen logs": &archive_jepsen_logs
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/jepsen-mongod-logs.tgz
      remote_file: ${project}/${build_variant}/${revision}/jepsen/jepsen-mongod-logs-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Jepsen mongod Logs - ${execution}
      optional: true

  "tar jepsen results": &tar_jepsen_results
    command: archive.targz_pack
    params:
      target: "src/jepsen-results.tgz"
      source_dir: "src/jepsen-mongodb/store"
      include:
        - "./**"

  "archive jepsen results": &archive_jepsen_results
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/jepsen-results.tgz
      remote_file: ${project}/${build_variant}/${revision}/jepsen/jepsen-results-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Jepsen Test Results - ${execution}
      optional: true

  "save jepsen artifacts":
    - *tar_jepsen_logs
    - *archive_jepsen_logs
    - *tar_jepsen_results
    - *archive_jepsen_results

  ### Process & archive mongo coredumps ###
  "gather mongo coredumps": &gather_mongo_coredumps
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/gather_mongo_coredumps.sh"

  "tar mongo coredumps": &tar_mongo_coredumps
    command: archive.targz_pack
    params:
      target: "mongo-coredumps.tgz"
      source_dir: "src"
      include:
        - "./**.core"
        - "./**.mdmp" # Windows: minidumps

  "archive mongo coredumps": &archive_mongo_coredumps
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: mongo-coredumps.tgz
      remote_file: ${project}/${build_variant}/${revision}/coredumps/mongo-coredumps-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Core Dumps - Execution ${execution}
      optional: true

  "save mongo coredumps":
  - *f_expansions_write
  - *gather_mongo_coredumps
  - *tar_mongo_coredumps
  - *archive_mongo_coredumps

  ### Process & archive failed unittest artifacts ###
  "gather failed unittests": &gather_failed_unittests
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/failed_unittests_gather.sh"

  "tar failed unittests": &tar_failed_unittests
    command: archive.targz_pack
    params:
      target: "mongo-unittests.tgz"
      source_dir: "src/dist-unittests"
      include:
        - "**"

  "archive failed unittests": &archive_failed_unittests
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: mongo-unittests.tgz
      remote_file: ${project}/${build_variant}/${revision}/unittests/mongo-unittests-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Unit tests - Execution ${execution}
      optional: true

  "save failed unittests":
  - *f_expansions_write
  - *gather_failed_unittests
  - *tar_failed_unittests
  - *archive_failed_unittests

  "archive dbtest": &archive_dbtest
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: dbtest-binary.tgz
      remote_file: ${project}/${build_variant}/${revision}/dbtest/dbtest-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: dbtest binary - Execution ${execution}
      optional: true

  "archive dbtest debugsymbols": &archive_dbtest_debug
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: dbtest-debugsymbols.tgz
      remote_file: ${project}/${build_variant}/${revision}/dbtest/dbtest-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/tar
      display_name: dbtest debugsymbols
      optional: true

  "save unstripped dbtest":
  - *archive_dbtest
  - *archive_dbtest_debug

  ### Process & archive artifacts from hung processes ###
  "run hang analyzer":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/hang_analyzer.sh"

  "wait for resmoke to shutdown":
    command: subprocess.exec
    params:
      binary: bash
      args:
        - "./src/evergreen/wait_for_resmoke_to_shutdown.sh"

  "tar hang analyzer debugger files": &tar_hang_analyzer_debugger_files
    command: archive.targz_pack
    params:
      target: "src/mongo-hanganalyzer.tgz"
      source_dir: "src"
      include:
        - "./debugger*.*"

  "archive hang analyzer debugger files": &archive_hang_analyzer_debugger_files
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/mongo-hanganalyzer.tgz
      remote_file: ${project}/${build_variant}/${revision}/hanganalyzer/mongo-hanganalyzer-${build_id}-${task_name}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Hang Analyzer Output - Execution ${execution}
      optional: true

  "save hang analyzer debugger files":
  - *tar_hang_analyzer_debugger_files
  - *archive_hang_analyzer_debugger_files

  ### Process & archive disk statistic artifacts ###
  "tar disk statistics": &tar_disk_statistics
    command: archive.targz_pack
    params:
      target: "diskstats.tgz"
      source_dir: "./"
      include:
        - "./mongo-diskstats*"
        - "./mongo-diskstats*.csv"

  "archive disk statistics": &archive_disk_statistics
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: diskstats.tgz
      remote_file: ${project}/${build_variant}/${revision}/diskstats/mongo-diskstats-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Disk Stats - Execution ${execution}
      optional: true

  "save disk statistics":
  - *tar_disk_statistics
  - *archive_disk_statistics

  "save libfuzzertest corpora":
  - *archive_new_corpus
  - *upload_new_corpus
  - *upload_new_corpus_mciuploads

  ### Process & archive system resource artifacts ###
  "tar system resource information": &tar_system_resource_information
    command: archive.targz_pack
    params:
      target: "system-resource-info.tgz"
      source_dir: src
      include:
        - "./system_resource_info*"

  "archive system resource information": &archive_system_resource_information
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: system-resource-info.tgz
      remote_file: ${project}/${build_variant}/${revision}/systemresourceinfo/mongo-system-resource-info-${task_id}-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: System Resource Info - Execution ${execution}
      optional: true

  "save system resource information":
  - *tar_system_resource_information
  - *archive_system_resource_information

  "tar UndoDB recordings": &tar_undodb_recordings
    command: archive.targz_pack
    params:
      target: undodb-recordings.tgz
      source_dir: src
      include:
        - "./*.undo.tokeep"
        - "./*.undo"

  "archive UndoDB recordings": &archive_undodb_recordings
    command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: undodb-recordings.tgz
      remote_file: ${project}/${build_variant}/${revision}/undo/undodb-recordings-${task_id}-execution-${execution}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: UndoDB Recordings - Execution ${execution}
      optional: true

  "save UndoDB recordings":
  - *tar_undodb_recordings
  - *archive_undodb_recordings

  ### Attach report & artifacts ###
  "attach scons logs":
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/build/scons/config.log
        remote_file: ${project}/${build_variant}/${revision}/artifacts/scons-config.log.${build_id}-${task_name}-${execution}
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: SCons configure log

    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/scons_cache.log
        content_type: text/plain
        remote_file: ${project}/${build_variant}/${revision}/artifacts/scons-cache.log.${build_id}-${task_name}.${execution}
        bucket: mciuploads
        permissions: public-read
        display_name: SCons cache debug log

    - *f_expansions_write
    - command: subprocess.exec
      params:
        continue_on_err: true
        binary: bash
        args:
          - "./src/evergreen/scons_splunk.sh"

  "attach report":
    command: attach.results
    params:
      file_location: ${report_file|src/report.json}

  "attach artifacts":
    command: attach.artifacts
    params:
      optional: true
      ignore_artifacts_for_spawn: false
      files:
        - ${archive_file|src/archive.json}

  "attach wiki page":
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/wiki_page.sh"
    - command: attach.artifacts
      params:
        files:
          - wiki_page_location.json


# Pre task steps
pre:
  - func: "set task expansion macros"
  - func: "f_expansions_write"

# Post task steps
post:
  - func: "f_expansions_write"
  - func: "attach report"
  - func: "attach artifacts"
  - func: "save ec2 task artifacts"
  - func: "call BF Suggestion service"
  - func: "attach wiki page"
  - func: "kill processes"
  - func: "save local client logs"
  - func: "save code coverage data"
  - func: "save jepsen artifacts"
  - func: "save mongo coredumps"
  - func: "save failed unittests"
  - func: "save hang analyzer debugger files"
  - func: "save disk statistics"
  - func: "save system resource information"
  - func: "save UndoDB recordings"
  - func: "umount shared scons directory"
  - func: "cleanup FUSE watchdog"
  - func: "cleanup environment"

# Timeout steps
timeout:
  - func: "f_expansions_write"
  - func: "run hang analyzer"
  - func: "wait for resmoke to shutdown"


#######################################
#               Tasks                 #
#######################################

tasks:

## compile - build all scons targets except unittests ##
- name: compile_dist_test
  tags: []
  depends_on: []
  commands:
    - func: "scons compile"
      vars:
        targets: >-
          install-dist-test
          ${additional_compile_targets|}
        task_compile_flags: >-
          PREFIX=dist-test

- name: determine_patch_tests
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/gen_patch_test_tags.sh"

- name: archive_dist_test
  tags: []
  depends_on:
    - name: compile_dist_test
  commands:
    - *f_expansions_write
    - func: "scons compile"
      vars:
        targets: >-
          archive-dist-test
        task_compile_flags: >-
          PREFIX=dist-test

    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-binaries.${ext|tgz}
        remote_file: ${mongo_binaries}
        bucket: mciuploads
        permissions: public-read
        content_type: application/gzip
        display_name: Binaries

    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/gen_feature_flags.sh"

    - command: archive.targz_pack
      params:
        target: "artifacts.tgz"
        source_dir: "src"
        include:
          - "patch_test_tags.tgz"
          - "./build/**.gcno"
          - "./etc/*san.suppressions"
          - "./etc/backports_required_for_multiversion_tests.yml"
          - "./etc/expansions.default.yml"
          - "./etc/pip/**"
          - "./etc/repo_config.yaml"
          - "./etc/scons/**"
          - "artifacts.json"
          - "buildscripts/**"
          - "compile_expansions.yml"
          - "all_feature_flags.txt"  # Must correspond to the definition in buildscripts/idl/lib.py.
          - "jstests/**"
          - "library_dependency_graph.json"
          - "patch_files.txt"
          - "evergreen/**"
          - "src/mongo/client/sdam/json_tests/sdam_tests/**"
          - "src/mongo/client/sdam/json_tests/server_selection_tests/**"
          - "src/mongo/db/modules/enterprise/docs/**"
          - "src/mongo/db/modules/enterprise/jstests/**"
          - "src/mongo/db/modules/subscription/jstests/**"
          - "src/mongo/util/options_parser/test_config_files/**"
          - "src/third_party/JSON-Schema-Test-Suite/tests/draft4/**"
          - "src/third_party/mock_ocsp_responder/**"
          - "src/third_party/schemastore.org/**"
        exclude_files:
          - "*_test.pdb"

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: artifacts.tgz
        remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}.tgz
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/tar
        display_name: Artifacts

    # For patch builds that bypass compile, we upload links to pre-existing tarballs, except for the
    # artifacts.tgz.
    - command: attach.artifacts
      params:
        optional: true
        ignore_artifacts_for_spawn: false
        files:
          - src/artifacts.json

# Dummy task to activate `archive_dist_test_debug` since it can't be activated directly (not a generated task).
- name: activate_archive_dist_test_debug
  tags: []
  depends_on:
    - name: archive_dist_test_debug

- name: archive_dist_test_debug
  tags: []
  depends_on:
    - name: archive_dist_test
  commands:
    - func: "scons compile"
      vars:
        targets: >-
          archive-dist-test-debug
        task_compile_flags: >-
          PREFIX=dist-test

    - func: "upload debugsymbols"

- name: compile_ninja
  tags: []
  commands:
    - func: "scons compile"
      vars:
        generating_for_ninja: true
        task_install_action:
          default
        task_compile_flags: >-
          --ninja
        targets:
          generate-ninja
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/ninja_compile.sh"

- name: compile_ninja_next
  tags: []
  commands:
    - func: "scons compile"
      vars:
        generating_for_ninja: true
        task_install_action:
          default
        task_compile_flags: >-
          --build-tools=next
          --ninja
        targets:
          generate-ninja
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/ninja_compile.sh"

- name: compile_build_tools_next
  tags: []
  commands:
    - func: "scons compile"
      vars:
        task_compile_flags: >-
          --build-tools=next
        targets:
          install-core

- name: libdeps_graph_linting
  tags: []
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/libdeps_setup.sh"

    - func: "scons compile"
      vars:
        task_compile_flags: >-
          --link-model=dynamic
          --build-tools=next
        targets:
          generate-libdeps-graph

    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/libdeps_run.sh"

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/results.txt
        remote_file: ${project}/${build_variant}/${revision}/artifacts/libdeps-results.txt.${build_id}-${task_name}.${execution}
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: Libdeps Linter Results

    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/libdeps.graphml.gz
        remote_file: ${project}/${build_variant}/${revision}/artifacts/libdeps.graphml.${build_id}-${task_name}.${execution}.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Libdeps Graph Data

## compile_all - build all scons targets ##
- name: compile_all
  tags: []
  depends_on:
    - name: compile_dist_test
  commands:
    - func: "scons compile"
      vars:
        targets: install-all-meta
        compiling_for_test: true

## clang_tidy - run clang_tidy
- name: clang_tidy
  tags: []
  exec_timeout_secs: 3600 # 1 hour timeout for the task overall
  commands:
    - *f_expansions_write
    - func: "scons compile"
      vars:
        targets: generated-sources compiledb
        compiling_for_test: true
    - command: subprocess.exec
      type: test
      timeout_secs: 3600 # 1 hour timeout for no output
      params:
        binary: bash
        args:
          - "./src/evergreen/run_clang_tidy.sh"

## compile_unittests ##
- &compile_unittests
  name: compile_unittests
  depends_on:
    - name: compile_dist_test
  commands:
    - func: "scons compile"
      vars:
        targets: install-unittests install-unittests-debug
        compiling_for_test: true

## A copy of the compile_unittests task for the recorded unittest taskgroup ##
- <<: *compile_unittests
  name: compile_unittests_for_recorded_unittest

## run_unittests ##
- name: run_unittests
  tags: []
  depends_on:
    - name: compile_unittests
  commands:
    - *f_expansions_write
    - func: "run diskstats"
    - func: "f_expansions_write"
    - func: "monitor process threads"
    - func: "collect system resource info"
    - func: "run tests"
      vars:
        resmoke_args: --suites=unittests

## run_unittests with UndoDB live-record ##
- name: run_unittests_with_recording
  depends_on:
    - name: compile_unittests_for_recorded_unittest
  commands:
    - *f_expansions_write
    - func: "run diskstats"
    - func: "f_expansions_write"
    - func: "monitor process threads"
    - func: "collect system resource info"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/undo_wiki_page.sh"
    - command: attach.artifacts
      params:
        files:
          - undo_wiki_page_location.json
    - func: "run tests"
      vars:
        resmoke_args: --suites=unittests
        record_with: --recordWith /opt/undodb5/bin/live-record
        # Start fewer jobs since there's a constant amount of overhead of starting
        # live-record for each job.
        resmoke_jobs_factor: 0.3


##compile_and_archive_libfuzzertests - build libfuzzertests ##
- name: compile_and_archive_libfuzzertests
  tags: []
  commands:
    - func: "scons compile"
      vars:
        targets: archive-fuzzertests
        compiling_for_test: true
    # Store the fuzzer executable, which we use to generate and run fuzzer inputs.
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/fuzzertests-runtime.tgz"
        remote_file: "${project}/libfuzzer-tests/${build_variant}/${revision}/libfuzzer-tests.tgz"
        bucket: mciuploads
        permissions: private
        visibility: signed
        content_type: application/tar
        display_name: "LibFuzzer Tests"

## fetch_and_run_libfuzzertests - get input corpora from s3 and run libfuzzertests ##
- name: fetch_and_run_libfuzzertests
  tags: []
  commands:
    - func: "fetch corpus"
    - func: "fetch legacy corpus"
    - func: "run tests"
      vars:
        resmoke_args: --suites=libfuzzer

- name: server_discovery_and_monitoring_json_test
  tags: []
  commands:
    - func: "scons compile"
      vars:
        targets: install-sdam-json-test
        compiling_for_test: true
    - func: "run tests"
      vars:
        resmoke_args: --suites=sdam_json_test

- name: server_selection_json_test
  tags: []
  commands:
    - func: "scons compile"
      vars:
        targets: install-server-selection-json-test
        compiling_for_test: true
    - func: "run tests"
      vars:
        resmoke_args: --suites=server_selection_json_test

## compile_dbtest ##
- name: compile_dbtest
  tags: []
  depends_on:
    - name: compile_dist_test
  commands:
    - func: "scons compile"
      vars:
        targets: install-dbtest install-dbtest-debug
        compiling_for_test: true

## run_dbtest ##
- name: run_dbtest
  tags: []
  depends_on:
    - name: compile_dbtest
  commands:
    - *f_expansions_write
    - func: "run diskstats"
    - func: "f_expansions_write"
    - func: "monitor process threads"
    - func: "collect system resource info"
    - func: "run tests"
      vars:
        resmoke_args: --suites=dbtest --storageEngine=wiredTiger
        install_dir: build/install/bin

- name: archive_dbtest
  tags: []
  depends_on:
    - name: compile_dbtest
  commands:
    - func: "scons compile"
      vars:
        targets: archive-dbtest archive-dbtest-debug
        compiling_for_test: true

- name: compile_visibility_test
  tags: []
  commands:
    - func: "scons compile"
      vars:
        targets: archive-visibility-test-meta
        task_compile_flags: >-
          --ssl
          --dbg=on
          --opt=on
          --link-model=dynamic
          --visibility-support=on

    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/visibility-test-meta.${ext|tgz}
        remote_file: ${project}/${build_variant}/${revision}/visibility-test-meta-${build_id}-${task_name}-${execution}.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Binaries

## embedded_sdk_build_and_test_* - build the embedded-dev and embedded-test targets only ##

- name: embedded_sdk_build_cdriver
  tags: []
  commands:
    - func: f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_build_cdriver.sh"

- name: embedded_sdk_install_dev
  tags: []
  depends_on:
    - name: embedded_sdk_build_cdriver
  commands:
    - func: "scons compile"
      vars:
        targets: install-embedded-dev
        task_compile_flags: &embedded_sdk_compile_flags >-
          --allocator=system
          --dbg=off
          --enable-free-mon=off
          --enable-http-client=off
          --js-engine=none
          --opt=size
          --ssl=off
          --use-system-mongo-c=on
          DESTDIR='$BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION'
          CPPPATH='$BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION/include/libbson-1.0 $BUILD_ROOT/mongo-embedded-sdk-$MONGO_VERSION/include/libmongoc-1.0'
        task_compile_flags_extra: >-
          --link-model=dynamic-sdk

- name: embedded_sdk_s3_put
  tags: []
  depends_on:
    - name: embedded_sdk_install_dev
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_s3_tar.sh"

    # Upload it so we can download from EVG.
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/embedded-sdk.tgz"
        remote_file: ${project}/embedded-sdk/${build_variant}/${revision}/mongo-embedded-sdk-${version}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: "Embedded SDK Tar Archive"

- name: embedded_sdk_install_tests
  tags: []
  depends_on:
    - name: embedded_sdk_install_dev
  commands:
    - func: "scons compile"
      vars:
        targets: install-embedded-test
        compiling_for_test: true
        task_compile_flags: *embedded_sdk_compile_flags
        task_compile_flags_extra: >-
          --link-model=dynamic
        # Unlike static builds, dynamic builds have no need to
        # constrain the number of link jobs. Unfortunately, --jlink=1
        # means one link job, not 100%. So this is a bit gross but set
        # it to .99.
        num_scons_link_jobs_available: 0.99

- name: embedded_sdk_tests_s3_put
  tags: []
  depends_on:
    - name: embedded_sdk_install_tests
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_tests_s3_tar.sh"

    # Upload it so we can download from EVG.
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/embedded-sdk-tests.tgz"
        remote_file: ${project}/embedded-sdk-test/${build_variant}/${revision}/mongo-embedded-sdk-test-${version}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: "Embedded SDK Tests Tar Archive"

- name: embedded_sdk_run_tests
  tags: []
  depends_on:
    - name: embedded_sdk_install_tests
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_run_tests.sh"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/embedded_sdk_run_tests_post.sh"

- name: embedded_sdk_s3_put_latest
  tags: []
  depends_on:
    - name: embedded_sdk_run_tests
  commands:
    # A second put, this time to -latest, to give devs a reasonable
    # way to get the most recent build.
    - command: s3.put
      params:
        visibility: none
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/embedded-sdk.tgz"
        remote_file: ${project}/embedded-sdk/mongo-${build_variant}-latest.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

- name: embedded_sdk_tests_s3_put_latest
  tags: []
  depends_on:
    - name: embedded_sdk_run_tests
  commands:
    # A second put, this time to -latest, to give devs a reasonable
    # way to get the most recent build.
    - command: s3.put
      params:
        visibility: none
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/embedded-sdk-tests.tgz"
        remote_file: ${project}/embedded-sdk-test/mongo-${build_variant}-latest.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}

- name: stitch_support_create_lib
  tags: []
  commands:
    - *f_expansions_write
    - func: "scons compile"
      vars:
        targets: install-stitch-support install-stitch-support-debug install-stitch-support-dev
        task_compile_flags: >-
          --dbg=off
          --link-model=dynamic-sdk
          --enable-free-mon=off
          --ssl=off
          --enable-http-client=off
          --modules=
          DESTDIR='$BUILD_ROOT/stitch-support-lib-$MONGO_VERSION'
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/stitch_support_create_lib_tar.sh"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: "src/build/stitch-support.tgz"
        remote_file: "${project}/stitch-support/${build_variant}/${revision}/stitch-support-${version}.tgz"
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: "Stitch Support Library"

- name: stitch_support_install_tests
  tags: []
  depends_on:
    - name: stitch_support_create_lib
  commands:
    - func: "scons compile"
      vars:
        targets: install-stitch-support-test
        compiling_for_test: true
        task_compile_flags: >-
          --dbg=off
          --enable-free-mon=off
          --ssl=off
          --enable-http-client=off
          --modules=
          DESTDIR='$BUILD_ROOT/stitch-support-lib-$MONGO_VERSION'

- name: stitch_support_run_tests
  tags: []
  depends_on:
    - name: stitch_support_install_tests
  commands:
    - *f_expansions_write
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/stitch_support_run_tests.sh"

- name: compile_benchmarks
  tags: []
  depends_on: []
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "get buildnumber"
    - func: "f_expansions_write"
    - func: "set up credentials"
    - func: "use WiredTiger develop" # noop if ${use_wt_develop} is not "true"
    - func: "set up win mount script"
    - func: "generate compile expansions"
    # Then we load the generated version data into the agent so we can use it in task definitions
    - func: "apply compile expansions"
    - func: "scons compile"
      vars:
        targets: install-benchmarks
        compiling_for_test: true
    - func: "attach scons logs"
    - command: archive.targz_pack
      params:
        target: "benchmarks.tgz"
        source_dir: "src"
        include:
          - "./build/benchmarks.txt"
          - "./build/**_bm"
          - "./build/**_bm.gcno"
          - "./build/**_bm.exe"
          - "./build/**_bm.pdb"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: benchmarks.tgz
        remote_file: ${project}/${build_variant}/${revision}/benchmarks/${build_id}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Benchmarks

## lint ##
- name: lint_pylinters
  tags: ["lint"]
  commands:
    - command: timeout.update
      params:
        # 40 minutes
        exec_timeout_secs: 2400
    - *f_expansions_write
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-pylinters

- name: lint_clang_format
  tags: ["lint"]
  commands:
    - command: timeout.update
      params:
        # 40 minutes
        exec_timeout_secs: 2400
    - *f_expansions_write
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-clang-format

- name: lint_eslint
  tags: ["lint"]
  commands:
    - command: timeout.update
      params:
        # 40 minutes
        exec_timeout_secs: 2400
    - *f_expansions_write
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-eslint

- name: lint_cpplint
  tags: ["lint"]
  commands:
    - command: timeout.update
      params:
        # 40 minutes
        exec_timeout_secs: 2400
    - *f_expansions_write
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-lint.py

- name: lint_yaml
  tags: ["lint"]
  depends_on: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "f_expansions_write"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/lint_yaml.sh"

- name: lint_shellscripts
  tags: ["lint"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/lint_shellscripts.sh"

- name: lint_errorcodes
  tags: ["lint"]
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "scons lint"
      vars:
        targets: lint-errorcodes

- name: test_api_version_compatibility
  tags: []
  depends_on:
    - name: archive_dist_test
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "do setup"
    - func: "f_expansions_write"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "src/evergreen/check_idl_compat.sh"

- name: burn_in_tests_gen
  tags: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "configure evergreen api credentials"
  - *do_multiversion_setup
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/burn_in_tests.sh"
  - command: archive.targz_pack
    params:
      target: src/burn_in_tests_gen.tgz
      source_dir: src
      include:
        - burn_in_tests_gen.json

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/burn_in_tests_gen.tgz
      remote_file: ${project}/${build_variant}/${revision}/burn_in_tests_gen/burn_in_tests_gen-${build_id}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Burn_in_tests Task Config - Execution ${execution}
  - command: generate.tasks
    params:
      files:
        - src/burn_in_tests_gen.json

- name: burn_in_tests_multiversion_gen
  tags: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "f_expansions_write"
  - func: "configure evergreen api credentials"
  - func: "do multiversion setup"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/burn_in_tests_multiversion.sh"

  - command: archive.targz_pack
    params:
      target: src/burn_in_tests_multiversion_gen.tgz
      source_dir: src/generated_resmoke_config
      include:
        - burn_in_tests_multiversion_gen.json

  - command: archive.targz_pack
    params:
      target: src/generate_tasks_config.tgz
      source_dir: src/generated_resmoke_config
      include:
        - "*"

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/generate_tasks_config.tgz
      remote_file: ${project}/${build_variant}/${revision}/generate_tasks/burn_in_tests_multiversion_gen-${build_id}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      optional: true
      display_name: Generated Multiversion Resmoke.py Suite Config - Execution ${execution}

  - command: s3.put
    params:
      aws_key: ${aws_key}
      aws_secret: ${aws_secret}
      local_file: src/burn_in_tests_multiversion_gen.tgz
      remote_file: ${project}/${build_variant}/${revision}/generate_tasks/burn_in_tests_multiversion_gen_config-${build_id}.tgz
      bucket: mciuploads
      permissions: public-read
      content_type: application/gzip
      display_name: Burn_in_tests Task Config - Execution ${execution}

  - command: generate.tasks
    params:
      files:
        - src/generated_resmoke_config/burn_in_tests_multiversion_gen.json

- <<: *benchmark_template
  name: benchmarks_orphaned
  tags: ["benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      exec_timeout_secs: 10800  # 3 hour timeout.
      resmoke_args: --suites=benchmarks
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *benchmark_template
  name: benchmarks_sharding
  tags: ["benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=benchmarks_sharding
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *benchmark_template
  name: benchmarks_cst
  tags: ["benchmarks"]
  commands:
  - func: "do benchmark setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=benchmarks_cst
      resmoke_jobs_max: 1
  - func: "send benchmark results"

- <<: *run_jepsen_template
  name: jepsen_register_findAndModify
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_read_with_find_and_modify: --read-with-find-and-modify
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: register

- <<: *run_jepsen_template
  name: jepsen_register_linearizableRead
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_read_concern: --read-concern linearizable
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: register

- <<: *run_jepsen_template
  name: jepsen_set_linearizableRead
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_read_concern: --read-concern linearizable
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: set

- <<: *run_jepsen_template
  name: jepsen_read-concern-majority
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: read-concern-majority

# Smoke test to ensure the Server still works with Jepsen
- <<: *run_jepsen_template
  name: jepsen-smoke
  tags: []
  commands:
    - func: "do setup"
    - func: "do jepsen setup"
    - func: "run jepsen test"
      vars:
        <<: *jepsen_config_vars
        jepsen_storage_engine: --storage-engine wiredTiger
        jepsen_test_name: read-concern-majority
        jepsen_time_limit: --time-limit 120

- <<: *run_jepsen_template
  name: jepsen_read-concern-majority_w1
  tags: ["jepsen"]
  commands:
  - func: "do setup"
  - func: "do jepsen setup"
  - func: "run jepsen test"
    vars:
      <<: *jepsen_config_vars
      jepsen_storage_engine: --storage-engine wiredTiger
      jepsen_test_name: read-concern-majority
      jepsen_write_concern: --write-concern w1

## initial sync multiversion fuzzer ##
- <<: *jstestfuzz_template
  name: initial_sync_multiversion_fuzzer_gen
  tags: ["multiversion_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: initsync-fuzzer
      suite: initial_sync_multiversion_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: initial_sync_multiversion_fuzzer
      require_multiversion: true

## initial sync generational fuzzer ##
- <<: *jstestfuzz_template
  name: initial_sync_fuzzer_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: initsync-fuzzer
      suite: initial_sync_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: initial_sync_fuzzer

## Standalone generational fuzzer for multiversion aggregation pipelines ##
- <<: *jstestfuzz_template
  name: aggregation_multiversion_fuzzer_gen
  # TODO SERVER-58718: Re-enable this suite by un-commenting the 'tags' line.
  # tags: ["aggfuzzer", "common", "multiversion"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-fuzzer
      name: aggregation_multiversion_fuzzer
      require_multiversion: true

## Standalone generational fuzzer for multiversion aggregation expressions ##
- <<: *jstestfuzz_template
  name: aggregation_expression_multiversion_fuzzer_gen
  tags: ["aggfuzzer", "multiversion"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-expr-fuzzer
      name: aggregation_expression_multiversion_fuzzer
      require_multiversion: true

## Standalone generational fuzzer for checking optimized and unoptimized expression equivalence
- <<: *jstestfuzz_template
  name: aggregation_expression_optimization_fuzzer_gen
  tags: ["aggfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode optimization
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-expr-fuzzer
      name: aggregation_expression_optimization_fuzzer

## Standalone generational fuzzer for checking optimized and unoptimized aggregation pipelines
- <<: *jstestfuzz_template
  name: aggregation_optimization_fuzzer_gen
  tags: ["aggfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode optimization
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: agg-fuzzer
      name: aggregation_optimization_fuzzer

## Standalone fuzzer for checking wildcard index correctness ##
- <<: *jstestfuzz_template
  name: aggregation_wildcard_fuzzer_gen
  tags: ["aggfuzzer", "common", "wildcard"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode wildcard
      npm_command: agg-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: aggregation_wildcard_fuzzer

## Standalone fuzzer for checking timeseries optimizations correctness ##
- <<: *jstestfuzz_template
  name: aggregation_timeseries_fuzzer_gen
  tags: ["aggfuzzer", "common", "timeseries"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode timeseries
      npm_command: agg-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: aggregation_timeseries_fuzzer

## Standalone generational fuzzer for checking optimized and unoptimized change stream pipelines ##
- <<: *jstestfuzz_template
  name: change_stream_optimization_fuzzer_gen
  tags: ["change_stream_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode optimization
      npm_command: change-stream-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: change_stream_optimization_fuzzer

## jstestfuzz standalone fuzzer for checking find and aggregate equivalence ##
- <<: *jstestfuzz_template
  name: query_fuzzer_standalone_gen
  tags: ["query_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 10
      jstestfuzz_vars: --diffTestingMode standalone
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: query_fuzzer_standalone

## jstestfuzz sharded fuzzer for checking find and aggregate equivalence ##
- <<: *jstestfuzz_template
  name: query_fuzzer_sharded_gen
  tags: ["query_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --diffTestingMode sharded
      npm_command: query-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: query_fuzzer_sharded

## jstestfuzz standalone update generational fuzzer ##
- <<: *jstestfuzz_template
  name: update_fuzzer_gen
  tags: ["updatefuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      npm_command: update-fuzzer
      suite: generational_fuzzer
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: update_fuzzer
      require_multiversion: true

## jstestfuzz replication update generational fuzzer ##
- <<: *jstestfuzz_template
  name: update_fuzzer_replication_gen
  tags: ["updatefuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      npm_command: update-fuzzer
      suite: generational_fuzzer_replication
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: update_fuzzer_replication
      require_multiversion: true

## rollback multiversion fuzzer ##
- <<: *jstestfuzz_template
  name: rollback_multiversion_fuzzer_gen
  tags: ["multiversion_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 3
      num_tasks: 5
      npm_command: rollback-fuzzer
      suite: rollback_multiversion_fuzzer
      # Rollback suites create indexes with majority of nodes not available for replication. So, disabling
      # index build commit quorum.
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
      name: rollback_multiversion_fuzzer
      require_multiversion: true

## rollback generational fuzzer ##
- <<: *jstestfuzz_template
  name: rollback_fuzzer_gen
  tags: ["rollbackfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 3
      num_tasks: 5
      npm_command: rollback-fuzzer
      suite: rollback_fuzzer
      # Rollback suites create indexes with majority of nodes not available for replication. So, disabling
      # index build commit quorum.
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
      name: rollback_fuzzer

## rollback generational fuzzer with clean shutdowns ##
- <<: *jstestfuzz_template
  name: rollback_fuzzer_clean_shutdowns_gen
  tags: ["rollbackfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 1
      num_tasks: 4
      jstestfuzz_vars: --numLinesPerFile 300 --maxLinesBetweenEvents 50
      npm_command: rollback-fuzzer
      suite: rollback_fuzzer_clean_shutdowns
      # Rollback suites create indexes with majority of nodes not available for replication. So, disabling
      # index build commit quorum.
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
      name: rollback_fuzzer_clean_shutdowns

## rollback generational fuzzer with unclean shutdowns ##
- <<: *jstestfuzz_template
  name: rollback_fuzzer_unclean_shutdowns_gen
  tags: ["rollbackfuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 1
      num_tasks: 4
      jstestfuzz_vars: --numLinesPerFile 300 --maxLinesBetweenEvents 50
      npm_command: rollback-fuzzer
      suite: rollback_fuzzer_unclean_shutdowns
      # Rollback suites create indexes with majority of nodes not available for replication. So, disabling
      # index build commit quorum.
      resmoke_args: "--mongodSetParameters='{logComponentVerbosity: {command: 2}, enableIndexBuildCommitQuorum: false}'"
      name: rollback_fuzzer_unclean_shutdowns

## jstestfuzz ##
- <<: *jstestfuzz_template
  name: jstestfuzz_gen
  tags: ["jstestfuzz", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      npm_command: jstestfuzz
      name: jstestfuzz

## jstestfuzz concurrent ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_gen
  tags: ["jstestfuzz", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent

## jstestfuzz concurrent replica set ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_replication_gen
  tags: ["jstestfuzz", "common", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_replication

## jstestfuzz concurrent replica set with logical session ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_replication_session_gen
  tags: ["jstestfuzz", "session"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_session
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_replication_session

## jstestfuzz concurrent sharded cluster ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_gen
  tags: ["jstestfuzz", "common", "sharding"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded

## jstestfuzz concurrent sharded cluster causal consistency ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_causal_consistency_gen
  tags: ["jstestfuzz", "causal"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_causal_consistency
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded_causal_consistency

## jstestfuzz concurrent sharded cluster continuous stepdown ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_continuous_stepdown_gen
  tags: ["jstestfuzz", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 2
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_continuous_stepdown
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded_continuous_stepdown

## jstestfuzz concurrent sharded cluster with logical session ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_session_gen
  tags: ["jstestfuzz", "session"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: ${jstestfuzz_concurrent_num_files|10}
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_session
      resmoke_args: --storageEngine=wiredTiger --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded_session

# jstestfuzz interrupt #
- <<: *jstestfuzz_template
  name: jstestfuzz_interrupt_gen
  tags: ["jstestfuzz", "interrupt"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_interrupt
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_interrupt

# jstestfuzz interrupt #
- <<: *jstestfuzz_template
  name: jstestfuzz_interrupt_replication_gen
  tags: ["jstestfuzz", "interrupt"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_interrupt_replication
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_interrupt_replication

# jstestfuzz write conflict #
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_write_conflicts_gen
  tags: ["jstestfuzz", "write_conflict"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_write_conflicts
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_replication_write_conflicts

# jstestfuzz concurrent conflict #
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_replication_write_conflicts_gen
  tags: ["jstestfuzz", "write_conflict"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_write_conflicts
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}' --numClientsPerFixture=10"
      name: jstestfuzz_concurrent_replication_write_conflicts

# jstestfuzz interrupt with flow control engaged #
- <<: *jstestfuzz_template
  name: jstestfuzz_interrupt_replication_flow_control_gen
  tags: ["jstestfuzz", "interrupt", "flow_control"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_interrupt_replication
      resmoke_args: "--flowControlTicketOverride=1 --storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_interrupt_replication_flow_control

## jstestfuzz sharded cluster continuous stepdown with flow control engaged ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_continuous_stepdown_flow_control_gen
  tags: ["jstestfuzz", "flow_control", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_continuous_stepdown
      resmoke_args: >-
          --flowControlTicketOverride=3
          --storageEngine=wiredTiger
          --mongodSetParameters="{logComponentVerbosity: {command: 2}}"
      name: jstestfuzz_sharded_continuous_stepdown_flow_control

## jstestfuzz concurrent sharded cluster continuous stepdown with flow control engaged ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_sharded_continuous_stepdown_flow_control_gen
  tags: ["jstestfuzz", "flow_control", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_continuous_stepdown
      resmoke_args: >-
          --flowControlTicketOverride=30
          --storageEngine=wiredTiger
          --numClientsPerFixture=10
      name: jstestfuzz_concurrent_sharded_continuous_stepdown_flow_control

# jstestfuzz replication continuous stepdown with flow control engaged #
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_continuous_stepdown_flow_control_gen
  tags: ["jstestfuzz", "repl", "flow_control", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_continuous_stepdown
      resmoke_args: >-
          --flowControlTicketOverride=1
          --storageEngine=wiredTiger
          --mongodSetParameters="{logComponentVerbosity: {command: 2}}"
      name: jstestfuzz_replication_continuous_stepdown_flow_control

## jstestfuzz concurrent replication continuous stepdown with flow control engaged ##
- <<: *jstestfuzz_template
  name: jstestfuzz_concurrent_replication_continuous_stepdown_flow_control_gen
  tags: ["jstestfuzz", "repl", "flow_control", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 2
      num_tasks: 1
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_continuous_stepdown
      resmoke_args: >-
          --flowControlTicketOverride=10
          --storageEngine=wiredTiger
          --numClientsPerFixture=10
      name: jstestfuzz_concurrent_replication_continuous_stepdown_flow_control

## jstestfuzz replica set ##
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_gen
  tags: ["jstestfuzz", "common", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_replication

## jstestfuzz replica set ##
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_multiversion_passthrough_gen
  tags: ["jstestfuzz_multiversion_passthrough_gen"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      suite: jstestfuzz_replication
      is_jstestfuzz: true
      require_multiversion: true
      implicit_multiversion: true
      npm_command: jstestfuzz

## jstestfuzz initial sync replica set ##
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_initsync_gen
  tags: ["jstestfuzz", "initsync"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 8
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_initsync
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_replication_initsync

## jstestfuzz replica set with logical session ##
- <<: *jstestfuzz_template
  name: jstestfuzz_replication_session_gen
  tags: ["jstestfuzz", "session"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_replication_session
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_replication_session

## jstestfuzz sharded cluster ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_gen
  tags: ["jstestfuzz", "common", "sharding"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_sharded

## jstestfuzz sharded multiversion cluster ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_multiversion_passthrough_gen
  tags: [jstestfuzz_multiversion_passthrough_gen]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      suite: jstestfuzz_sharded
      is_jstestfuzz: true
      require_multiversion: true
      implicit_multiversion: true
      npm_command: jstestfuzz

## jstestfuzz sharded cluster causal consistency ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_causal_consistency_gen
  tags: ["jstestfuzz", "causal"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_causal_consistency
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_sharded_causal_consistency

## jstestfuzz sharded cluster continuous stepdown ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_continuous_stepdown_gen
  tags: ["jstestfuzz", "stepdowns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 5
      num_tasks: 5
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_continuous_stepdown
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_sharded_continuous_stepdown

## jstestfuzz sharded cluster with logical session ##
- <<: *jstestfuzz_template
  name: jstestfuzz_sharded_session_gen
  tags: ["jstestfuzz", "session"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      jstestfuzz_vars: --jsTestsDir ../jstests
      suite: jstestfuzz_sharded_session
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {command: 2}}'"
      name: jstestfuzz_sharded_session

## resharding generational fuzzer ##
- <<: *jstestfuzz_template
  name: resharding_fuzzer_inplace_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 2 --numRecipients 2 --inPlace yes
      suite: resharding_fuzzer
      resmoke_args: --storageEngine=wiredTiger
      name: resharding_fuzzer_inplace

- <<: *jstestfuzz_template
  name: resharding_fuzzer_split_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 1 --numRecipients 2 --inPlace no
      suite: resharding_fuzzer
      resmoke_args: --storageEngine=wiredTiger
      name: resharding_fuzzer_split

- <<: *jstestfuzz_template
  name: resharding_fuzzer_merge_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 2 --numRecipients 1 --inPlace no
      suite: resharding_fuzzer
      resmoke_args: --storageEngine=wiredTiger
      name: resharding_fuzzer_merge

- <<: *jstestfuzz_template
  name: resharding_fuzzer_shuffle_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 3 --numRecipients 3 --inPlace no
      suite: resharding_fuzzer
      resmoke_args: --storageEngine=wiredTiger
      name: resharding_fuzzer_shuffle

- <<: *jstestfuzz_template
  name: resharding_fuzzer_idempotency_gen
  tags: ["resharding_fuzzer"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      <<: *jstestfuzz_config_vars
      num_files: 10
      num_tasks: 5
      npm_command: resharding-fuzzer
      jstestfuzz_vars: --numDonors 3 --numRecipients 3 --inPlace no
      suite: resharding_fuzzer_idempotency
      resmoke_args: >-
        --storageEngine=wiredTiger
      name: resharding_fuzzer_idempotency

## Tests that the multiversion test generation logic is not broken.
- <<: *gen_task_template
  name: multiversion_sanity_check_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: replica_sets_jscore_passthrough
      resmoke_args: --storageEngine=wiredTiger --includeWithAnyTags=multiversion_sanity_check
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: replica_sets_jscore_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: replica_sets_jscore_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

# Check that the mutational fuzzer can parse JS files modified in a patch build.
- name: lint_fuzzer_sanity_patch
  tags: []
  patch_only: true
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - func: "get added and modified patch files"
  - func: "setup jstestfuzz"
  - func: "lint fuzzer sanity patch"

# Check that the mutational fuzzer can parse all JS filess.
- name: lint_fuzzer_sanity_all
  tags: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - func: "setup jstestfuzz"
  - func: "lint fuzzer sanity all"

## integration test suites ##

- <<: *task_template
  name: aggregation
  tags: ["aggregation", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_disabled_optimization
  tags: ["aggregation", "common"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_disabled_optimization --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_ese
  tags: ["aggregation", "encrypt"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_ese --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_ese_gcm
  tags: ["aggregation", "encrypt", "gcm"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_ese_gcm --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_auth
  tags: ["aggregation", "auth", "common"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_auth --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_facet_unwind_passthrough
  tags: ["aggregation", "unwind"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_facet_unwind_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_mongos_passthrough
  tags: ["aggregation", "no_async"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_one_shard_sharded_collections
  tags: ["aggregation", "no_async", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_one_shard_sharded_collections --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_read_concern_majority_passthrough
  tags: ["aggregation", "read_write_concern"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_read_concern_majority_passthrough --storageEngine=wiredTiger
      resmoke_jobs_factor: 0.5

- <<: *gen_task_template
  name: aggregation_secondary_reads_gen
  tags: ["aggregation", "secondary_reads"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: aggregation_sharded_collections_passthrough
  tags: ["aggregation", "common", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: aggregation_sharded_collections_causally_consistent_passthrough
  tags: ["aggregation", "secondary_reads", "sharded"]
  depends_on:
  - name: aggregation
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=aggregation_sharded_collections_causally_consistent_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: audit
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=audit --storageEngine=wiredTiger

- <<: *gen_task_template
  name: auth_gen
  tags: ["auth"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- name: burn_in_tags_gen
  tags: []
  depends_on:
    - name: archive_dist_test
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "configure evergreen api credentials"
  - func: "do multiversion setup"
  - func: "generate burn in tags"
    vars:
      max_revisions: 25
      repeat_tests_secs: 600
      repeat_tests_min: 2
      repeat_tests_max: 1000

- name: build_variant_gen
  commands:
    - command: manifest.load
    - *git_get_project
    - *f_expansions_write
    - *add_git_tag
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "generate build variant"

- name: selected_tests_gen
  tags: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "generate selected tests"

- <<: *gen_task_template
  name: auth_audit_gen
  tags: ["auth", "audit"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams
  tags: ["change_streams"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams --storageEngine=wiredTiger

- <<: *gen_task_template
  name: change_streams_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: change_streams
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *task_template
  name: change_streams_update_v1_oplog
  tags: ["change_streams"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_update_v1_oplog --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_mongos_sessions_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_mongos_sessions_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_mongos_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_secondary_reads
  tags: ["change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_secondary_reads --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_sharded_collections_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: change_streams_sharded_collections_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: change_streams_sharded_collections_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *task_template
  name: change_streams_whole_db_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_db_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_db_mongos_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams_mongos_passthrough
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_db_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_db_secondary_reads_passthrough
  tags: ["change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams_secondary_reads
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_db_secondary_reads_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_db_sharded_collections_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams_sharded_collections_passthrough
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_db_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_cluster_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_cluster_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_cluster_mongos_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams_mongos_passthrough
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_cluster_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_cluster_secondary_reads_passthrough
  tags: ["change_streams", "secondary_reads"]
  depends_on:
  - name: change_streams_secondary_reads
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_cluster_secondary_reads_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_whole_cluster_sharded_collections_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams_sharded_collections_passthrough
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_whole_cluster_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_multi_stmt_txn_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_multi_stmt_txn_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_multi_stmt_txn_mongos_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_multi_stmt_txn_mongos_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: change_streams_multi_stmt_txn_sharded_collections_passthrough
  tags: ["change_streams"]
  depends_on:
  - name: change_streams
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=change_streams_multi_stmt_txn_sharded_collections_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: disk_wiredtiger
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=disk_wiredtiger --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: ese
  tags: ["encrypt"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=ese --storageEngine=wiredTiger

- <<: *task_template
  name: failpoints
  tags: ["misc_js"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=failpoints --storageEngine=wiredTiger

- <<: *task_template
  name: failpoints_auth
  tags: ["auth"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=failpoints_auth --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_standalone
  tags: ["integration", "standalone"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_standalone --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_standalone_audit
  tags: ["integration", "audit"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_standalone_audit --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_replset
  tags: ["integration"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_replset --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_replset_ssl_auth
  tags: ["integration"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_replset_ssl_auth --storageEngine=wiredTiger

- <<: *task_template
  name: integration_tests_sharded
  tags: ["integration", "sharded"]
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - func: "do setup"
  - func: "set up win mount script"
  - func: "generate compile expansions"  # Generate compile expansions needs to be run to mount the shared scons cache.
  - func: "apply compile expansions"
  - func: "scons compile"
    vars:
      targets: install-integration-tests
      compiling_for_test: true
  - func: "attach scons logs"
  - func: "run tests"
    vars:
      resmoke_args: --suites=integration_tests_sharded --storageEngine=wiredTiger

- <<: *task_template
  name: external_auth
  tags: []
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "f_expansions_write"
  - command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/external_auth_pip.sh"
  - func: "run tests"
    vars:
      resmoke_args: --suites=external_auth --excludeWithAnyTags=requires_domain_controller --storageEngine=wiredTiger

- <<: *task_template
  name: external_auth_aws
  tags: []
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "f_expansions_write"
  - command: subprocess.exec
    params:
      binary: bash
      silent: true
      args:
        - "src/evergreen/external_auth_aws_setup.sh"
  - command: subprocess.exec
    params:
      binary: bash
      args:
        - "src/evergreen/external_auth_aws_pip.sh"
  - func: "run tests"
    vars:
      resmoke_args: --suites=external_auth_aws --storageEngine=wiredTiger


- <<: *task_template
  name: external_auth_windows
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=external_auth --includeWithAnyTags=requires_domain_controller --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore
  tags: ["jscore", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core --storageEngine=wiredTiger

- <<: *task_template
  name: config_fuzzer_jsCore
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core --storageEngine=wiredTiger --fuzzMongodConfigs

- <<: *task_template
  name: config_fuzzer_concurrency
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency --storageEngine=wiredTiger --fuzzMongodConfigs

- <<: *task_template
  name: config_fuzzer_concurrency_replication
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication --storageEngine=wiredTiger --fuzzMongodConfigs

- <<: *task_template
  name: config_fuzzer_replica_sets_jscore_passthrough
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_jscore_passthrough --storageEngine=wiredTiger --fuzzMongodConfigs

- <<: *task_template
  name: jsCore_ese
  tags: ["jscore", "encrypt"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_ese --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_ese_gcm
  tags: ["jscore", "encrypt", "gcm"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_ese_gcm --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_auth
  tags: ["jscore", "auth", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_auth

- <<: *task_template
  name: jsCore_minimum_batch_size
  tags: ["jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_minimum_batch_size --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_txns
  tags: ["jscore", "common", "txns"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_txns --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_txns_large_txns_format
  tags: ["jscore", "txns", "multi_oplog"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=core_txns_large_txns_format --storageEngine=wiredTiger

- <<: *task_template
  name: sharded_jscore_txns
  tags: ["sharding", "jscore", "txns"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_jscore_txns --storageEngine=wiredTiger

- <<: *task_template
  name: sharded_jscore_txns_without_snapshot
  tags: ["sharding", "wo_snapshot", "jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_jscore_txns --storageEngine=wiredTiger --excludeWithAnyTags=uses_snapshot_read_concern

- <<: *task_template
  name: sharded_jscore_txns_sharded_collections
  tags: ["sharding", "jscore", "txns"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_jscore_txns_sharded_collections --storageEngine=wiredTiger

- <<: *task_template
  name: cst_jscore_passthrough
  tags: ["jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=cst_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: libunwind_tests
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=libunwind --storageEngine=wiredTiger

- <<: *task_template
  name: causally_consistent_jscore_txns_passthrough
  tags: ["causally_consistent"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=causally_consistent_jscore_txns_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_causally_consistent_jscore_txns_passthrough_gen
  tags: ["sharding", "jscore", "causally_consistent", "txns"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_causally_consistent_jscore_txns_passthrough_without_snapshot_gen
  tags: ["sharding", "wo_snapshot", "causally_consistent", "jscore"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: sharded_causally_consistent_jscore_txns_passthrough
      resmoke_args: --storageEngine=wiredTiger --excludeWithAnyTags=uses_snapshot_read_concern

- <<: *gen_task_template
  name: causally_consistent_hedged_reads_jscore_passthrough_gen
  tags: ["causally_consistent", "sharding", "jscore"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: sharded_collections_causally_consistent_jscore_txns_passthrough
  tags: ["sharding", "jscore", "causally_consistent", "txns"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_collections_causally_consistent_jscore_txns_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_jscore_passthrough
  tags: ["replica_sets", "common", "san", "large", "ignore_non_generated_replica_sets_jscore_passthrough"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_reconfig_jscore_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_reconfig_jscore_stepdown_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_reconfig_kill_primary_jscore_passthrough
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_reconfig_kill_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_api_version_jscore_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      fallback_num_sub_suites: 5

- <<: *gen_task_template
  name: replica_sets_jscore_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_large_txns_format_jscore_passthrough
  tags: ["replica_sets", "multi_oplog", "large", "non_maj_read", "san"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_large_txns_format_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_multi_stmt_txn_jscore_passthrough
  tags: ["replica_sets", "large"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_multi_stmt_txn_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_multi_stmt_txn_stepdown_jscore_passthrough_gen
  tags: ["replica_sets", "non_maj_read"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_multi_stmt_txn_kill_primary_jscore_passthrough
  tags: ["replica_sets", "non_maj_read", "non_live_record"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_multi_stmt_txn_kill_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_multi_stmt_txn_terminate_primary_jscore_passthrough
  tags: ["replica_sets", "non_maj_read"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_multi_stmt_txn_terminate_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_update_v1_oplog_jscore_passthrough_gen
  tags: ["replica_sets", "non_maj_read"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_initsync_jscore_passthrough_gen
  tags: ["replica_sets", "san", "large"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_initsync_static_jscore_passthrough
  tags: ["replica_sets", "san", "large"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_initsync_static_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_kill_primary_jscore_passthrough
  tags: ["replica_sets", "large", "non_maj_read", "non_live_record"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_kill_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_terminate_primary_jscore_passthrough
  tags: ["replica_sets", "large", "non_maj_read"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_terminate_primary_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: replica_sets_kill_secondaries_jscore_passthrough
  tags: ["replica_sets", "san", "large", "non_live_record"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=replica_sets_kill_secondaries_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: mongosTest
  tags: ["misc_js", "non_read_maj", "non_live_record"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=mongos_test

- <<: *gen_task_template
  name: multiversion_auth_gen
  tags: ["auth", "multiversion"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      require_multiversion: true

- <<: *gen_task_template
  name: multiversion_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      require_multiversion: true

# Tests the runFeatureFlagMultiversionTest helper.
# This requires the 'featureFlagToaster' and 'featureFlagSpoon' parameters to be set to true on
# build variants that enable this task.
- <<: *gen_task_template
  name: feature_flag_multiversion_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      require_multiversion: true

- <<: *gen_task_template
  name: unittest_shell_hang_analyzer_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: unittest_shell_hang_analyzer
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: noPassthrough_gen
  tags: ["misc_js"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: no_passthrough
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"

# Only run hot_backups tests for hot_backups variant.
- <<: *gen_task_template
  name: noPassthroughHotBackups_gen
  tags: []
  commands:
    - func: "generate resmoke tasks"
      vars:
        suite: no_passthrough
        resmoke_args: --storageEngine=wiredTiger src/mongo/db/modules/*/jstests/hot_backups/*.js
        use_large_distro: "true"

- <<: *gen_task_template
  name: noPassthroughWithMongod_gen
  tags: ["misc_js"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: no_passthrough_with_mongod
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: slow1_gen
  tags: ["misc_js", "non_win_dbg"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: serial_run
  tags: ["misc_js", "non_win_dbg"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=serial_run --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: sharded_collections_jscore_passthrough
  tags: ["sharding", "jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_collections_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_collections_jscore_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: sharded_collections_jscore_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *task_template
  name: sharding_jscore_passthrough
  tags: ["sharding", "jscore", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharding_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_jscore_multiversion_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: sharding_jscore_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: sharding_api_version_jscore_passthrough_gen
  tags: ["sharding", "jscore"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      fallback_num_sub_suites: 5

- <<: *task_template
  name: sharding_update_v1_oplog_jscore_passthrough
  tags: ["sharding", "jscore"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharding_jscore_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: sharded_multi_stmt_txn_jscore_passthrough
  tags: ["sharding", "jscore", "multi_stmt"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sharded_multi_stmt_txn_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: multi_shard_multi_stmt_txn_jscore_passthrough_gen
  tags: ["multi_shard", "multi_stmt", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 0  # No cap on number of jobs.

- <<: *gen_task_template
  name: multi_shard_local_read_write_multi_stmt_txn_jscore_passthrough_gen
  tags: ["multi_shard", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: multi_stmt_txn_jscore_passthrough_with_migration_gen
  tags: ["multi_stmt"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: multi_shard_multi_stmt_txn_kill_primary_jscore_passthrough_gen
  tags: ["multi_shard"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: multi_shard_multi_stmt_txn_stepdown_primary_jscore_passthrough_gen
  tags: ["multi_shard"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_causally_consistent_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_multi_stmt_txn_jscore_passthrough_gen
  tags: ["tenant_migration", "txn"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_stepdown_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: tenant_migration_terminate_primary_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger
      fallback_num_sub_suites: 10

- <<: *gen_task_template
  name: tenant_migration_kill_primary_jscore_passthrough_gen
  tags: ["tenant_migration"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger
      fallback_num_sub_suites: 10

- <<: *gen_task_template
  name: parallel_gen
  tags: ["misc_js", "parallel"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency
  tags: ["concurrency", "common"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_metrics
  tags: ["concurrency"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_metrics --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_replication_metrics
  tags: ["concurrency", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication_metrics --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_gen
  tags: ["concurrency", "common", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_multiversion_passthrough_gen
  tags: [multiversion_passthrough]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: concurrency_replication
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: concurrency_replication_causal_consistency_gen
  tags: ["concurrency", "repl", "large", "non_live_record"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_multi_stmt_txn_gen
  tags: ["concurrency", "common", "repl", "txn"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

  # TODO: SERVER-35964 revert the addition of UBSAN concurrency_replication suites.
- <<: *task_template
  name: concurrency_replication_ubsan
  tags: ["concurrency", "ubsan", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication_ubsan --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_replication_causal_consistency_ubsan
  tags: ["concurrency", "ubsan", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication_causal_consistency_ubsan --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_replication_multi_stmt_txn_ubsan
  tags: ["concurrency", "ubsan", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=concurrency_replication_multi_stmt_txn_ubsan --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_wiredtiger_cursor_sweeps_gen
  tags: ["concurrency", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_replication_wiredtiger_eviction_debug_gen
  tags: ["concurrency", "repl", "debug_only"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_replication_gen
  tags: ["concurrency", "common", "read_concern_maj", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_replication_multiversion_passthrough_gen
  tags: ["multiversion_passthrough", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: concurrency_sharded_replication
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: concurrency_sharded_replication_with_balancer_gen
  tags: ["concurrency", "common", "read_concern_maj", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_replication_no_txns_gen
  tags: ["concurrency", "no_txns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: concurrency_sharded_replication
      resmoke_args: "--excludeWithAnyTags=uses_transactions --storageEngine=wiredTiger"
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_replication_no_txns_with_balancer_gen
  tags: ["concurrency", "no_txns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: concurrency_sharded_replication_with_balancer
      resmoke_args: "--excludeWithAnyTags=uses_transactions --storageEngine=wiredTiger"
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_clusterwide_ops_add_remove_shards_gen
  tags: ["concurrency", "common", "read_concern_maj", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_causal_consistency_gen
  tags: ["concurrency", "non_live_record", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_causal_consistency_and_balancer_gen
  tags: ["concurrency", "large", "non_live_record", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_with_stepdowns_gen
  tags: ["concurrency", "stepdowns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_with_stepdowns_and_balancer_gen
  tags: ["concurrency", "stepdowns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_terminate_primary_with_balancer_gen
  tags: ["concurrency", "stepdowns", "kill_terminate", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_kill_primary_with_balancer_gen
  tags: ["concurrency", "stepdowns", "kill_terminate", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_with_balancer_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_local_read_write_multi_stmt_txn_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_local_read_write_multi_stmt_txn_with_balancer_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_with_stepdowns_gen
  tags: ["concurrency", "stepdowns", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_terminate_primary_gen
  tags: ["concurrency", "stepdowns", "kill_terminate", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_sharded_multi_stmt_txn_kill_primary_gen
  tags: ["concurrency", "stepdowns", "kill_terminate", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_simultaneous_gen
  tags: ["concurrency", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: concurrency_simultaneous_replication_gen
  tags: ["concurrency", "common", "large", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_simultaneous_replication_wiredtiger_cursor_sweeps
  tags: ["concurrency", "repl"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: "--suites=concurrency_simultaneous_replication_wiredtiger_cursor_sweeps --storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *task_template
  name: concurrency_simultaneous_replication_wiredtiger_eviction_debug
  tags: ["concurrency", "repl", "debug_only"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: "--suites=concurrency_simultaneous_replication_wiredtiger_eviction_debug --storageEngine=wiredTiger"
      resmoke_jobs_max: 1

- <<: *task_template
  name: read_concern_linearizable_passthrough
  tags: ["read_write_concern", "linearize", "large"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=read_concern_linearizable_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: read_concern_majority_passthrough_gen
  tags: ["read_write_concern"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: write_concern_majority_passthrough
  tags: ["read_write_concern", "large", "write"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=write_concern_majority_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: cwrwc_passthrough
  tags: ["read_write_concern", "large", "write"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=cwrwc_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: cwrwc_rc_majority_passthrough_gen
  tags: ["read_write_concern"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: cwrwc_wc_majority_passthrough
  tags: ["read_write_concern", "large", "write"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=cwrwc_wc_majority_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: secondary_reads_passthrough_gen
  tags: []
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_gen
  tags: ["replica_sets", "san", "large"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_ese_gen
  tags: ["replica_sets", "encrypt", "san"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_ese_gcm_gen
  tags: ["replica_sets", "encrypt", "san", "gcm"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_auth_gen
  tags: ["replica_sets", "common", "san", "auth"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_large_txns_format_gen
  tags: ["replica_sets", "multi_oplog", "san"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_max_mirroring_gen
  tags: ["replica_sets", "san"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_update_v1_oplog_gen
  tags: ["replica_sets", "san"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: replica_sets_multiversion_gen
  tags: ["random_multiversion_ds"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger --tagFile=generated_resmoke_config/multiversion_exclude_tags.yml
      require_multiversion: true
      suite: replica_sets_multiversion

- <<: *task_template
  name: sasl
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=sasl --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_gen
  tags: ["sharding", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_multiversion_gen
  tags: ["random_multiversion_ds"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger --tagFile=generated_resmoke_config/multiversion_exclude_tags.yml
      require_multiversion: true
      suite: sharding_multiversion

- <<: *gen_task_template
  name: sharding_max_mirroring_gen
  tags: ["sharding", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_csrs_continuous_config_stepdown_gen
  tags: ["sharding", "common", "csrs", "non_live_record"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: sharding_continuous_config_stepdown
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_ese_gen
  tags: ["sharding", "encrypt"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_ese_gcm_gen
  tags: ["sharding", "encrypt", "gcm"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_auth_gen
  tags: ["sharding", "auth"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_auth_audit_gen
  tags: ["auth", "audit", "non_live_record"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharding_hello_failures_gen
  tags: ["concurrency", "large", "sharded"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger
      use_large_distro: "true"
      resmoke_jobs_max: 1

- <<: *gen_task_template
  name: sharding_last_lts_mongos_and_mixed_shards_gen
  tags: ["sharding", "common", "multiversion"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      require_multiversion: true
      resmoke_args: --tagFile=generated_resmoke_config/multiversion_exclude_tags.yml

- <<: *gen_task_template
  name: sharding_update_v1_oplog_gen
  tags: ["sharding", "common"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: snmp
  tags: []
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "do snmp setup"
  - func: "run tests"
    vars:
      snmp_config_path: SNMPCONFPATH=snmpconf
      resmoke_args: --suites=snmp --storageEngine=wiredTiger

- <<: *gen_task_template
  name: ssl_gen
  tags: ["encrypt", "ssl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: "--storageEngine=wiredTiger --mongodSetParameters='{logComponentVerbosity: {network: 2, replication: {heartbeats: 2}}}'"

- <<: *gen_task_template
  name: sslSpecial_gen
  tags: ["encrypt", "ssl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: ssl_special
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: ssl_x509_gen
  tags: ["encrypt", "ssl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: ssl_x509
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: jsCore_decimal
  tags: ["jscore", "common", "decimal"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=decimal --storageEngine=wiredTiger

- <<: *task_template
  name: read_only
  tags: ["read_only"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=read_only --storageEngine=wiredTiger

- <<: *task_template
  name: read_only_sharded
  tags: ["read_only"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=read_only_sharded --storageEngine=wiredTiger

- <<: *task_template
  name: session_jscore_passthrough
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=session_jscore_passthrough --storageEngine=wiredTiger

- <<: *gen_task_template
  name: causally_consistent_jscore_passthrough_gen
  tags: ["causally_consistent"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: causally_consistent_jscore_passthrough_auth_gen
  tags: ["causally_consistent"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: causally_consistent_read_concern_snapshot_passthrough_gen
  tags: ["causally_consistent", "read_write_concern", "durable_history"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_causally_consistent_read_concern_snapshot_passthrough_gen
  tags: ["causally_consistent", "read_write_concern", "durable_history"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: sharded_causally_consistent_jscore_passthrough_gen
  tags: ["causally_consistent"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: retryable_writes_jscore_passthrough_gen
  tags: ["retry"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      use_large_distro: "true"
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: retryable_writes_downgrade_passthrough_gen
  tags: ["multiversion_passthrough"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      suite: retryable_writes_downgrade_passthrough
      resmoke_args: --storageEngine=wiredTiger
      require_multiversion: true
      implicit_multiversion: true

- <<: *gen_task_template
  name: logical_session_cache_replication_default_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_replication_100ms_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_replication_1sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "one_sec", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_replication_10sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "repl"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_default_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_100ms_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_100ms_refresh_jscore_txns_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_1sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "one_sec"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_sharding_10sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_standalone_default_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_standalone_100ms_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_standalone_1sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache", "one_sec"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *gen_task_template
  name: logical_session_cache_standalone_10sec_refresh_jscore_passthrough_gen
  tags: ["logical_session_cache"]
  commands:
  - func: "generate resmoke tasks"
    vars:
      resmoke_args: --storageEngine=wiredTiger

- <<: *task_template
  name: retryable_writes_jscore_stepdown_passthrough
  tags: ["retry"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=retryable_writes_jscore_stepdown_passthrough --storageEngine=wiredTiger

- <<: *task_template
  name: watchdog_wiredtiger
  tags: ["watchdog"]
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "do watchdog setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=watchdog --storageEngine=wiredTiger
      resmoke_jobs_max: 1

# This is a separate task because it is only supported on Ubuntu 16.04+ which are not inmemory builders
- <<: *task_template
  name: watchdog_inmemory
  tags: ["watchdog"]
  commands:
  - *f_expansions_write
  - func: "do setup"
  - func: "do watchdog setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=watchdog --storageEngine=inMemory
      resmoke_jobs_max: 1

- <<: *task_template
  name: free_monitoring
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=free_monitoring --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: client_encrypt
  tags: ["ssl", "encrypt"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=client_encrypt --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: fle
  tags: ["encrypt"]
  commands:
  - func: "do setup"
  - func: "load aws test credentials"
  - func: "run tests"
    vars:
      resmoke_args: --suites=fle --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: ocsp
  tags: ["ssl", "encrypt", "ocsp"]
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=ocsp
      resmoke_jobs_max: 1

- <<: *task_template
  name: jsonSchema
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=json_schema --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- name: powercycle_gen
  tags: []
  commands:
    - func: "generate powercycle tasks"
      vars:
        task_names: >-
          powercycle
          powercycle_kill_mongod
          powercycle_replication_smalloplog
          powercycle_syncdelay
        num_tasks: 1

- name: powercycle_smoke_skip_compile_gen
  tags: []
  commands:
    - func: "generate powercycle tasks"
      vars:
        task_names: >-
          powercycle_smoke_skip_compile
        num_tasks: 20
        exec_timeout_secs: 604800 # 7 days
        timeout_secs: 604800 # 7 days
        set_up_retry_count: 1000000
        run_powercycle_args: --sshAccessRetryCount=1000000

- name: powercycle_sentinel
  tags: []
  exec_timeout_secs: 604800 # 7 days
  commands:
    - func: "run powercycle sentinel"
      vars:
        gen_task: powercycle_smoke_skip_compile_gen

- name: powercycle_smoke
  tags: []
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_kill_mongod
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_last_lts_fcv
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_replication
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_replication_smalloplog
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_syncdelay
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: powercycle_write_concern_majority
  tags: ["powercycle"]
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on:
  - name: archive_dist_test_debug
  commands:
  - func: "do setup"
  - func: "set up remote credentials"
    vars:
      <<: *powercycle_remote_credentials
  - func: "set up EC2 instance"
  - func: "run powercycle test"
    timeout_secs: 1800 # 30 minute timeout for no output

- name: idl_tests
  tags: []
  depends_on:
  - name: archive_dist_test
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "upload pip requirements"
  - func: "run idl tests"

- name: blackduck_scanner
  tags: []
  patchable: false
  commands:
  - *f_expansions_write
  - func: "do non-compile setup"
  - command: subprocess.exec
    type: setup
    params:
      binary: bash
      silent: true
      args:
        - "src/evergreen/blackduck_setup.sh"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "src/evergreen/blackduck_hub.sh"

- name: tla_plus
  tags: []
  commands:
  - *f_expansions_write
  - func: "do non-compile setup"
  - command: subprocess.exec
    type: setup
    params:
      binary: bash
      args:
        - "./src/evergreen/download_tlc.sh"
  - func: "run tests"
    vars:
      resmoke_args: --suites=tla_plus
      resmoke_jobs_max: 1

- name: buildscripts_test
  tags: []
  depends_on: []
  commands:
  - *f_expansions_write
  - func: "do non-compile setup"
  - func: "set up remote credentials"
  - *f_expansions_write
  - func: "configure evergreen api credentials"
  - func: "do multiversion setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=buildscripts_test
      resmoke_jobs_max: 1

- <<: *task_template
  name: resmoke_end2end_tests
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=resmoke_end2end_tests

- name: test_packages
  tags: []
  depends_on:
  - name: package
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - func: "fetch packages"
    - func: "set up remote credentials"
      vars:
        private_key_file: ~/.ssh/kitchen.pem
        private_key_remote: ${kitchen_private_key}
        aws_key_remote: ${kitchen_aws_key}
        aws_secret_remote: ${kitchen_aws_secret}
    - func: "run kitchen"

- name: package
  tags: []
  depends_on:
    - name: compile_dist_test
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - *set_up_venv
    - func: "scons compile"
      vars:
        targets: >-
          distsrc-${ext|tgz}
          archive-dist
          archive-dist-debug
          archive-shell
          archive-shell-debug
          ${additional_package_targets|}
        task_compile_flags: >-
          --legacy-tarball
    - func: "f_expansions_write"
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "src/evergreen/package.sh"
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/distsrc.${ext|tgz}
        remote_file: ${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Source tarball
        # We only need to upload the source tarball from one of the build variants
        # because it should be the same everywhere, so just use rhel70/windows.
        build_variants: [rhel70, windows]
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-dist.${ext|tgz}
        remote_file: ${project}/${build_variant}/${revision}/dist/mongo-${build_id}.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Dist Tarball
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-dist-debugsymbols.${ext|tgz}
        remote_file: ${project}/${build_variant}/${revision}/dist/mongo-${build_id}-debugsymbols.${ext|tgz}
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Dist Debugsymbols
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell.${ext|tgz}
        remote_file: ${mongo_shell}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Shell
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-debugsymbols.${ext|tgz}
        remote_file: ${mongo_shell_debugsymbols}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: Shell Debugsymbols
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd.${ext|tgz}
        remote_file: ${mongo_cryptd}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: CryptD Binaries
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-debugsymbols.${ext|tgz}
        remote_file: ${mongo_cryptd_debugsymbols}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: CryptD Debugsymbols
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mh-binaries.${ext|tgz}
        remote_file: ${mh_archive}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: MH Binaries
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mh-debugsymbols.${ext|tgz}
        remote_file: ${mh_debugsymbols}
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/gzip}
        display_name: MH Debugsymbols
    - func: "run packager.py"
    - command: archive.targz_pack
      params:
        target: "packages.tgz"
        source_dir: "src"
        include:
          - "repo/**"
          - "./**.msi"
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: packages.tgz
        remote_file: ${project}/${build_variant}/${revision}/artifacts/${build_id}-packages.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/tar
        display_name: Packages


- name: publish_packages
  tags: ["publish"]
  # This should prevent this task from running in patch builds, where we
  # don't want to publish packages.
  patchable: false
  stepback: false
  # Same dependencies as "push" below
  depends_on:
  - name: package
  - name: jsCore
  - name: run_dbtest
  - name: replica_sets_jscore_passthrough
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "f_expansions_write"
    - func: "kill processes"
    - func: "cleanup environment"
    - func: "set up venv"
    - func: "fetch packages"
    - func: "generate compile expansions"
    - func: "apply compile expansions"
    - func: "set up remote credentials"
      vars:
        aws_key_remote: ${repo_aws_key}
        aws_secret_remote: ${repo_aws_secret}
    - func: "set up notary client credentials"
    - *f_expansions_write
    - command: subprocess.exec
      params:
        binary: bash
        args:
          - "./src/evergreen/packages_publish.sh"

- name: push
  tags: ["publish"]
  patchable: false
  depends_on:
  - name: package
  - name: jsCore
  - name: run_dbtest
  - name: replica_sets_jscore_passthrough
  stepback: false
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "f_expansions_write"
    - func: "kill processes"
    - func: "cleanup environment"
    - func: "set up venv"
    - func: "fetch packages"
    - func: "fetch dist tarball"
    # Fetch the shell
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${mongo_shell}
        bucket: mciuploads
        local_file: src/mongo-shell.tgz
    # Fetch mongocryptd
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${mongo_cryptd}
        bucket: mciuploads
        local_file: src/mongo-cryptd.tgz
        build_variants: *mongocryptd_variants
    # Fetch the mongohouse binaries
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${mh_archive}
        bucket: mciuploads
        local_file: src/mh.tgz
        build_variants: *mh_variants
    # Fetch the sources (on relevant variants only)
    - command: s3.get
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        remote_file: ${project}/${build_variant}/${revision}/sources/mongo-src-${build_id}.${ext|tgz}
        bucket: mciuploads
        local_file: src/distsrc.${ext|tgz}
        build_variants: [rhel70, windows]
    - func: "generate compile expansions"
    - func: "apply compile expansions"
    - func: "set up remote credentials"
      vars:
        aws_key_remote: ${repo_aws_key}
        aws_secret_remote: ${repo_aws_secret}
    - func: "f_expansions_write"
    - func: "set up notary client credentials"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/notary_client_run.sh"

    # Put the binaries tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
    # Put the shell tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
    # Put the cryptd tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
        build_variants: *mongocryptd_variants
    # Put the mh tarball/zipfile
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mh-${push_name}-${push_arch}-${suffix}.${ext|tgz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mh-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}
        build_variants: *mh_variants
    # Put the source tarball
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}
        build_variants: [rhel70, windows]

    # Put the debug symbols
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}
        bucket: build-push-testing
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}
        optional: true

    # Put the binaries tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig

    # Put the shell tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig

    # Put the cryptd tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig
        build_variants: *mongocryptd_variants

    # Put the source tarball signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sig
        build_variants: [rhel70, windows]

    # Put the debug symbols signature
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig
        bucket: build-push-testing
        content_type: ${content_type|application/gzip}
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig
        optional: true

    # Put the signed MSI file
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        permissions: public-read
        build_variants: ["enterprise-windows", "windows"]
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi
        bucket: build-push-testing
        content_type: application/x-msi
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi

    # Put the binaries tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1

    # Put the shell tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1

    # Put the cryptd tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1
        build_variants: *mongocryptd_variants

    # Put the source tarball sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1
        aws_key: ${aws_key}
        permissions: public-read
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha1
        build_variants: [rhel70, windows]

    # Put the debug symbols sha1
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        aws_key: ${aws_key}
        permissions: public-read
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1
        optional: true

    # Push the signed MSI sha1
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        permissions: public-read
        build_variants: ["enterprise-windows", "windows"]
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha1

    # Put the binaries tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256

    # Put the shell tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256

    # Put the cryptd tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256
        build_variants: *mongocryptd_variants

    # Put the source tarball sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256
        permissions: public-read
        aws_key: ${aws_key}
        bucket: build-push-testing
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha256
        build_variants: [rhel70, windows]

    # Put the debug symbols sha256
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256
        optional: true

    # Put the signed MSI sha256
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        build_variants: ["enterprise-windows", "windows"]
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256
        bucket: build-push-testing
        permissions: public-read
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha256
        content_type: text/plain

    # Put the binaries tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5

    # Put the shell tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5

    # Put the cryptd tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5
        build_variants: *mongocryptd_variants

    # Put the source tarball md5
    - command: s3.put
      params:
        aws_secret: ${aws_secret}
        local_file: src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5
        aws_key: ${aws_key}
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.md5
        build_variants: [rhel70, windows]

    # Put the debug symbols md5
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5
        bucket: build-push-testing
        content_type: text/plain
        permissions: public-read
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5
        optional: true

    # Put the signed MSI md5
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        build_variants: ["enterprise-windows", "windows"]
        local_file: src/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5
        bucket: build-push-testing
        permissions: public-read
        content_type: text/plain
        remote_file: ${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.md5

    - command: s3Copy.copy
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        s3_copy_files:
            #Binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

            #Shell
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

            #Cryptd
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            # MH
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mh-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mh-${push_name}-${push_arch}-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'},
               'build_variants': *mh_variants}

            #Source tarball
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #MSI (Windows only)
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows', 'windows']}

            #Binaries Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

            #Shell Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

            #Cryptd Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            #Source tarball signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sig', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #SHA1 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

            #SHA1 for shell
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

            #SHA1 for cryptd
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            #SHA1 for source tarball
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha1', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #SHA1 for MSI
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha1', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows', 'windows']}

            #SHA256 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

            #SHA256 for shell
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

            #SHA256 for cryptd
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            #SHA256 for source tarball
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.sha256', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #SHA256 for MSI files
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.sha256', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows', 'windows']}

            #MD5 for binaries
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

            #MD5 for shell
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-shell-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-shell-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

            #MD5 for cryptd
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-cryptd-${push_name}-${push_arch}-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'},
               'build_variants': *mongocryptd_variants}

            #MD5 for source tarball
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-src-${src_suffix}-${task_id}.${ext|tar.gz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': 'src/mongodb-src-${src_suffix}.${ext|tar.gz}.md5', 'bucket': '${push_bucket}'},
               'build_variants': ['rhel70', 'windows']}

            #MD5 for MSIs
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-${suffix}-${task_id}-signed.msi.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-${suffix}-signed.msi.md5', 'bucket': '${push_bucket}'},
               'build_variants': ['enterprise-windows', 'windows']}

    # Debug symbols are not created for all variants and the copy is optional.
    - command: s3Copy.copy
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        optional: true
        s3_copy_files:
            #Debug Symbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}', 'bucket': '${push_bucket}'}}

            #Debug Symbols Signature
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sig', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sig', 'bucket': '${push_bucket}'}}

            #SHA1 for debug symbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha1', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha1', 'bucket': '${push_bucket}'}}

            #SHA256 for debugsymbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.sha256', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.sha256', 'bucket': '${push_bucket}'}}

            #MD5 for debugsymbols
            - {'source': {'path': '${push_path}-STAGE/${push_name}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}-${task_id}.${ext|tgz}.md5', 'bucket': 'build-push-testing'},
               'destination': {'path': '${push_path}/mongodb-${push_name}-${push_arch}-debugsymbols-${suffix}.${ext|tgz}.md5', 'bucket': '${push_bucket}'}}

- <<: *task_template
  name: search
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=search --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: search_auth
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=search_auth --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- <<: *task_template
  name: search_ssl
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=search_ssl --storageEngine=wiredTiger
      resmoke_jobs_max: 1

- name: shared_scons_cache_pruning
  tags: []
  exec_timeout_secs: 7200 # 2 hour timeout for the task overall
  depends_on: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - func: "shared scons cache pruning"

- name: win_shared_scons_cache_pruning
  tags: []
  exec_timeout_secs: 21600 # 2 hour timeout for the task overall
  depends_on: []
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - *set_up_venv
  - func: "set up win mount script"
  - func: "shared scons cache pruning"

- name: validate_commit_message
  tags: []
  exec_timeout_secs: 600 # 10 minute timeout
  commands:
  - command: manifest.load
  - func: "git get project and add git tag"
  - *f_expansions_write
  - *kill_processes
  - *cleanup_environment
  - func: "set up venv"
  - func: "configure evergreen api credentials"
  - command: subprocess.exec
    type: test
    params:
      binary: bash
      args:
        - "./src/evergreen/commit_message_validate.sh"

- name: check_for_todos
  tags: []
  exec_timeout_secs: 600 # 10 minute timeout
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - func: "configure evergreen api credentials"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/todos_check.sh"

- <<: *task_template
  name: mqlrun
  tags: []
  commands:
  - func: "do setup"
  - func: "run tests"
    vars:
      resmoke_args: --suites=mqlrun

- name: update_patch_failure_history
  # Time out the task if it runs for more than 8 hours. Provides buffer for
  # when the Evergreen API is busy.
  exec_timeout_secs: 28800
  commands:
    - func: "do non-compile setup"
    - *f_expansions_write
    - func: "configure evergreen api credentials"
    - func: "update patch failure history"

- name: check_feature_flag_tags
  tags: []
  patch_only: true
  commands:
    - command: manifest.load
    - func: "git get project and add git tag"
    - *f_expansions_write
    - *kill_processes
    - *cleanup_environment
    - func: "set up venv"
    - command: subprocess.exec
      type: test
      params:
        binary: bash
        args:
          - "./src/evergreen/feature_flag_tags_check.sh"

#######################################
#             Task Groups             #
#######################################
task_groups:
- <<: *compile_task_group_template
  name: compile_and_archive_dist_test_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug

- <<: *compile_task_group_template
  name: compile_and_archive_dist_test_then_package_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - package

- <<: *compile_task_group_template
  name: compile_ninja_next_TG
  tasks:
  - compile_ninja_next

- <<: *compile_task_group_template
  name: compile_build_tools_next_TG
  tasks:
  - compile_build_tools_next

- <<: *compile_task_group_template
  name: libdeps_graph_linting_TG
  tasks:
  - libdeps_graph_linting

- <<: *compile_task_group_template
  name: compile_ninja_TG
  tasks:
  - compile_ninja
  teardown_task:
    - command: s3.put
      params:
        optional: true
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/all.build.ninja
        remote_file: ${project}/${build_variant}/${revision}/artifacts/all.${build_id}.build.ninja
        bucket: mciuploads
        permissions: public-read
        content_type: text/plain
        display_name: build.ninja

- <<: *compile_task_group_template
  name: server_discovery_and_monitoring_json_test_TG
  tasks:
  - server_discovery_and_monitoring_json_test

- <<: *compile_task_group_template
  name: server_selection_json_test_TG
  tasks:
  - server_selection_json_test

- <<: *compile_task_group_template
  name: compile_run_and_archive_dbtest_TG
  tasks:
  - compile_dbtest
  - run_dbtest
  - archive_dbtest

- <<: *compile_task_group_template
  name: compile_archive_and_run_libfuzzertests_TG
  tasks:
  - compile_and_archive_libfuzzertests
  - fetch_and_run_libfuzzertests

- <<: *compile_task_group_template
  name: compile_test_and_package_serial_TG
  tasks:
  - compile_dist_test
  - archive_dist_test
  - archive_dist_test_debug
  - compile_unittests
  - run_unittests
  - compile_dbtest
  - run_dbtest
  - archive_dbtest
  - compile_all
  - package

- <<: *compile_task_group_template
  name: compile_and_test_TG
  tasks:
  - compile_dist_test
  - compile_unittests
  - run_unittests
  - compile_dbtest
  - run_dbtest
  - compile_all

# These `parallel` task groups are only appropriate for builders that
# use --link-model=dynamic, and have scons_cache_scope: shared and
# scons_cache_mode: all. Such builders are able to share all build
# artifacts, and therefore will not repeatedly re-link the same
# code. In that mode, it makes sense to run all of these tasks
# concurrently, since they will share state across machines and can
# complete faster than running them serially. We keep them in task
# groups so that if they do run on the same machine, they can avoid the
# cost of re-running the setup tasks.
- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_core_stream_TG
  tasks:
  - compile_dist_test
  - determine_patch_tests
  - archive_dist_test
  - archive_dist_test_debug
  - compile_all
  - package

- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_unittest_stream_TG
  tasks:
  - compile_unittests
  - run_unittests

- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_unittest_stream_with_recording_TG
  tasks:
    - compile_unittests_for_recorded_unittest
    - run_unittests_with_recording

- <<: *compile_task_group_template
  name: compile_test_and_package_parallel_dbtest_stream_TG
  tasks:
  - compile_dbtest
  - run_dbtest
  - archive_dbtest

- name: clang_tidy_TG
  setup_group_can_fail_task: true
  setup_group:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "kill processes"
    - func: "cleanup environment"
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "configure evergreen api credentials"
    - func: "get buildnumber"
    - func: "f_expansions_write"
    - func: "set up credentials"
    - func: "set up win mount script"
    - func: "generate compile expansions"
  teardown_group:
    - func: "f_expansions_write"
    - func: "umount shared scons directory"
    - func: "cleanup environment"
  setup_task:
    - func: "apply compile expansions"
    - func: "f_expansions_write"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
  teardown_task:
  tasks:
  - clang_tidy

- name: visibility_test_TG
  setup_group_can_fail_task: true
  max_hosts: 1
  setup_group:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "get buildnumber"
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "set up credentials"
    - func: "set up win mount script"
    - func: "generate compile expansions"
  teardown_group:
    - func: "umount shared scons directory"
  setup_task:
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "apply compile expansions"
    - func: "f_expansions_write"
  teardown_task:
      - func: "attach scons logs"
  tasks:
  - compile_visibility_test

- name: embedded_sdk_build_and_test
  setup_group_can_fail_task: true
  max_hosts: 1
  setup_group:
    - command: manifest.load
    - func: "git get project and add git tag"
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "get buildnumber"
    - func: "set up venv"
    - func: "upload pip requirements"
    - func: "set up credentials"
    - func: "set up win mount script"
    - func: "generate compile expansions"
  teardown_group:
    - func: "umount shared scons directory"
  setup_task:
    - func: "set task expansion macros"
    - func: "f_expansions_write"
    - func: "apply compile expansions"
    - func: "f_expansions_write"
  teardown_task:
      - func: "attach scons logs"
  tasks:
  - "embedded_sdk_build_cdriver"
  - "embedded_sdk_install_dev"
  - "embedded_sdk_s3_put"
  - "embedded_sdk_install_tests"
  - "embedded_sdk_tests_s3_put"
  - "embedded_sdk_run_tests"
  - "embedded_sdk_s3_put_latest"
  - "embedded_sdk_tests_s3_put_latest"

- <<: *stitch_support_task_group_template
  name: stitch_support_lib_build_and_archive
  tags: ["stitch"]
  tasks:
    - "stitch_support_create_lib"
- <<: *stitch_support_task_group_template
  name: stitch_support_lib_build_and_test
  tags: ["stitch"]
  max_hosts: 1
  tasks:
    - "stitch_support_install_tests"
    - "stitch_support_run_tests"

#######################################
#               Modules               #
#######################################
# if a module is added and to be added to the manifest
# be sure to add the module to git.get_project revisions parameter
modules:
- name: enterprise
  repo: git@github.com:10gen/mongo-enterprise-modules.git
  prefix: src/mongo/db/modules
  branch: master

- name: wtdevelop
  repo: git@github.com:wiredtiger/wiredtiger.git
  prefix: src/third_party
  branch: develop

#######################################
#            Buildvariants            #
#######################################

buildvariants:

- &enterprise-rhel-80-64-bit-dynamic-sbe-engine
  name: enterprise-rhel-80-64-bit-dynamic-sbe-engine
  display_name: "Shared Library Enterprise RHEL 8.0 (SBE Engine)"
  batchtime: 480 # 8 hour
  stepback: false
  modules:
    - enterprise
  run_on:
    - rhel80-small
  expansions: &enterprise-rhel-80-64-bit-dynamic-sbe-engine-expansions
    additional_package_targets: archive-mongocryptd archive-mongocryptd-debug archive-mh archive-mh-debug
    compile_flags: --ssl MONGO_DISTMOD=rhel80 -j$(grep -c ^processor /proc/cpuinfo) --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars --link-model=dynamic
    multiversion_platform: rhel80
    multiversion_edition: enterprise
    # refer to line 3113 for configuring number of tasks and files.
    has_packages: false
    scons_cache_scope: shared
    scons_cache_mode: all
    target_resmoke_time: 10
    max_sub_suites: 5
    large_distro_name: rhel80-medium
    num_scons_link_jobs_available: 0.99
    test_flags: >-
      --mongodSetParameters="{internalQueryEnableSlotBasedExecutionEngine: true}"
      --additionalFeatureFlags=featureFlagTimeseriesCollection,featureFlagSbePlanCache
  tasks:
    - name: compile_and_archive_dist_test_TG
      distros:
        - rhel80-large
    - name: build_variant_gen
    - name: .aggfuzzer
    - name: .query_fuzzer

services:
  notary_url: "http://notary-service.build.10gen.cc:5000"

templates:
  deb:
    org: |
      Origin: mongodb
      Label: mongodb
      Suite: {{ .CodeName }}
      Codename: {{ .CodeName }}/mongodb-org
      Architectures: {{ .Architectures }}
      Components: {{ .Component }}
      Description: MongoDB packages
    enterprise: |
      Origin: mongodb
      Label: mongodb
      Suite: {{ .CodeName }}
      Codename: {{ .CodeName }}/mongodb-enterprise
      Architectures: {{ .Architectures }}
      Components: {{ .Component }}
      Description: MongoDB packages
  index_page: |
    <!DOCTYPE html>
    <html>
     <head>
       <title>{{ .Title }}</title>
     </head>

     <body>
       <table>
        <tr><td>
          <h1>{{ .Title }}</h1>
        </td></tr>

        <tr><td>
          <hr>
        </td></tr>

        <tr><td>
          <a href='..'>Parent Directory</a>
        </td></tr>

        {{ range $fn := .Files }}
        <tr><td>
          <a href='{{ $fn }}'>{{ $fn }}</a>
        </td></tr>
        {{ end }}

        <tr><td>
          <hr>
        </td></tr>

        <tr><td>
          <address>{{ .RepoName }}</address>
        </td></tr>
      </table>
     </body>
    </html>


repos:

####################
#
# Community Repos:
#
####################

  - name: rhel70
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - yum/redhat/7/mongodb-org
      - yum/redhat/7Server/mongodb-org

  - name: rhel72
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - yum/redhat/7/mongodb-org
      - yum/redhat/7Server/mongodb-org

  - name: rhel80
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - yum/redhat/8/mongodb-org
      - yum/redhat/8Server/mongodb-org

  - name: rhel82
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - yum/redhat/8/mongodb-org
      - yum/redhat/8Server/mongodb-org

  - name: amazon
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - yum/amazon/2013.03/mongodb-org

  - name: amazon2
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - yum/amazon/2/mongodb-org

  - name: suse11
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - zypper/suse/11/mongodb-org

  - name: suse12
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - zypper/suse/12/mongodb-org

  - name: suse15
    type: rpm
    edition: org
    bucket: repo.mongodb.org
    repos:
      - zypper/suse/15/mongodb-org

  - name: debian81
    type: deb
    code_name: "jessie"
    bucket: repo.mongodb.org
    edition: org
    component: main
    architectures:
      - amd64
      - i386
    repos:
      - apt/debian/dists/jessie/mongodb-org

  - name: debian92
    type: deb
    code_name: "stretch"
    bucket: repo.mongodb.org
    edition: org
    component: main
    architectures:
      - amd64
    repos:
      - apt/debian/dists/stretch/mongodb-org

  - name: debian10
    type: deb
    code_name: "buster"
    bucket: repo.mongodb.org
    edition: org
    component: main
    architectures:
      - amd64
    repos:
      - apt/debian/dists/buster/mongodb-org

  - name: debian71
    type: deb
    code_name: "wheezy"
    bucket: repo.mongodb.org
    edition: org
    component: main
    architectures:
      - amd64
      - i386
    repos:
      - apt/debian/dists/wheezy/mongodb-org

  - name: ubuntu1204
    type: deb
    code_name: "precise"
    edition: org
    bucket: repo.mongodb.org
    component: multiverse
    architectures:
      - amd64
      - i386
    repos:
      - apt/ubuntu/dists/precise/mongodb-org

  - name: ubuntu1404
    type: deb
    code_name: "trusty"
    edition: org
    bucket: repo.mongodb.org
    component: multiverse
    architectures:
      - amd64
      - i386
    repos:
      - apt/ubuntu/dists/trusty/mongodb-org

  - name: ubuntu1804
    type: deb
    code_name: "bionic"
    edition: org
    bucket: repo.mongodb.org
    component: multiverse
    architectures:
      - amd64
      - i386
      - s390x
      - arm64
    repos:
      - apt/ubuntu/dists/bionic/mongodb-org

  - name: ubuntu2004
    type: deb
    code_name: "focal"
    edition: org
    bucket: repo.mongodb.org
    component: multiverse
    architectures:
      - amd64
      - s390x
      - arm64
    repos:
      - apt/ubuntu/dists/focal/mongodb-org

####################
#
# Enterprise Repos:
#
####################

  - name: rhel62
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/redhat/6/mongodb-enterprise
      - yum/redhat/6Server/mongodb-enterprise

  - name: rhel67
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/redhat/6/mongodb-enterprise
      - yum/redhat/6Server/mongodb-enterprise

  - name: rhel70
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/redhat/7/mongodb-enterprise
      - yum/redhat/7Server/mongodb-enterprise

  - name: rhel71
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/redhat/7/mongodb-enterprise
      - yum/redhat/7Server/mongodb-enterprise

  - name: rhel72
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/redhat/7/mongodb-enterprise
      - yum/redhat/7Server/mongodb-enterprise

  - name: rhel80
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/redhat/8/mongodb-enterprise
      - yum/redhat/8Server/mongodb-enterprise

  - name: rhel81
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/redhat/8/mongodb-enterprise
      - yum/redhat/8Server/mongodb-enterprise

  - name: rhel82
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/redhat/8/mongodb-enterprise
      - yum/redhat/8Server/mongodb-enterprise

  - name: amazon
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/amazon/2013.03/mongodb-enterprise

  - name: amazon2
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - yum/amazon/2/mongodb-enterprise

  - name: suse11
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - zypper/suse/11/mongodb-enterprise

  - name: suse12
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - zypper/suse/12/mongodb-enterprise

  - name: suse15
    type: rpm
    edition: enterprise
    bucket: repo.mongodb.com
    repos:
      - zypper/suse/15/mongodb-enterprise

  - name: debian10
    type: deb
    edition: enterprise
    code_name: "buster"
    bucket: repo.mongodb.com
    component: main
    architectures:
      - amd64
    repos:
      - apt/debian/dists/buster/mongodb-enterprise

  - name: debian92
    type: deb
    edition: enterprise
    code_name: "stretch"
    bucket: repo.mongodb.com
    component: main
    architectures:
      - amd64
    repos:
      - apt/debian/dists/stretch/mongodb-enterprise

  - name: debian81
    type: deb
    edition: enterprise
    code_name: "jessie"
    bucket: repo.mongodb.com
    component: main
    architectures:
      - amd64
      - ppc64el
      - s390x
      - i386
    repos:
      - apt/debian/dists/jessie/mongodb-enterprise

  - name: debian71
    type: deb
    code_name: "wheezy"
    edition: enterprise
    bucket: repo.mongodb.com
    component: main
    architectures:
      - amd64
      - ppc64el
      - s390x
      - i386
    repos:
      - apt/debian/dists/wheezy/mongodb-enterprise

  - name: ubuntu1204
    type: deb
    code_name: "precise"
    edition: enterprise
    bucket: repo.mongodb.com
    component: multiverse
    architectures:
      - amd64
      - ppc64el
      - s390x
      - i386
    repos:
      - apt/ubuntu/dists/precise/mongodb-enterprise

  - name: ubuntu1404
    type: deb
    code_name: "trusty"
    edition: enterprise
    bucket: repo.mongodb.com
    component: multiverse
    architectures:
      - amd64
      - ppc64el
      - s390x
      - i386
    repos:
      - apt/ubuntu/dists/trusty/mongodb-enterprise

  - name: ubuntu1804
    type: deb
    code_name: "bionic"
    edition: enterprise
    bucket: repo.mongodb.com
    component: multiverse
    architectures:
      - amd64
      - ppc64el
      - i386
      - s390x
      - arm64
    repos:
      - apt/ubuntu/dists/bionic/mongodb-enterprise

  - name: ubuntu2004
    type: deb
    code_name: "focal"
    edition: enterprise
    bucket: repo.mongodb.com
    component: multiverse
    architectures:
      - amd64
      - ppc64el
      - s390x
      - arm64
    repos:
      - apt/ubuntu/dists/focal/mongodb-enterprise

command_type: system
stepback: false


## Parameters for parameterized builds (see https://github.com/evergreen-ci/evergreen/wiki/Parameterized-Builds)
parameters:
  - key: patch_compile_flags
    description: "Additional SCons flags to be applied during scons compile invocations in this patch"


variables:
  ###
  # Leave this section uncommented to enable compile.
  _real_compile_amazon2: &_compile_amazon2
      - name: compile
        variant: compile-amazon2
      - name: schedule_global_auto_tasks
        variant: task_generation
  _real_compile_rhel70: &_compile_rhel70
      - name: compile
        variant: compile-rhel70
      - name: schedule_global_auto_tasks
        variant: task_generation
  _real_expansions: &_expansion_updates
    # TODO: Disable in SERVER-57226.
    - key: enable_detect_changes
      value: "true"
  ###

###
# **Or**: Leave this section uncommented to bypass/skip compile.
#  _skip_compile_amazon2: &_compile_amazon2
#      - name: schedule_global_auto_tasks
#        variant: task_generation
#  _skip_compile_rhel70: &_compile_rhel70
#      - name: schedule_global_auto_tasks
#        variant: task_generation
#  _skip_expansions: &_expansion_updates
#      # This is the normal (amazon2) "compile" artifact from https://evergreen.mongodb.com/version/sys_perf_4.4_78207ca380688c73b1a217f23d5b7c8803bef9cd
#      - key: mdb_binary_for_client
#        value: https://dsi-donot-remove.s3-us-west-2.amazonaws.com/compile_artifacts/mongodb-sys_perf_4.4_78207ca380688c73b1a217f23d5b7c8803bef9cd.tar.gz
#      - key: mdb_binary_for_server
#        value: https://dsi-donot-remove.s3-us-west-2.amazonaws.com/compile_artifacts/mongodb-sys_perf_4.4_78207ca380688c73b1a217f23d5b7c8803bef9cd.tar.gz
###

  _src_dir: &src_dir src/mongo
  _modules: &modules
    - enterprise
    - mongo-tools
    # - mongo
    - dsi
    - genny
    - signal-processing
    - workloads
    - linkbench
    - linkbench2
    - tsbs
    - mongo-perf
    - YCSB
    - benchmarks
    - py-tpcc


modules:
  ###
  # Same in every DSI project. Ensure that this block is synchronized with
  # evergreen-dsitest.yml, atlas/system_perf_atlas.yml, and src/dsi/onboarding.py
  # (search update-repos-here) in this repo, and etc/system_perf.yml and
  # etc/perf.yml in mongodb/mongo
  - name: dsi
    repo: git@github.com:10gen/dsi.git
    prefix: ../../src
    branch: master
  - name: genny
    repo: git@github.com:10gen/genny.git
    prefix: ../../src
    branch: master
  - name: signal-processing
    repo: git@github.com:10gen/signal-processing.git
    prefix: ../../src
    branch: master
  - name: workloads
    repo: git@github.com:10gen/workloads.git
    prefix: ../../src
    branch: master
  - name: linkbench
    repo: git@github.com:10gen/linkbench.git
    prefix: ../../src
    branch: master
  - name: linkbench2
    repo: git@github.com:10gen/linkbench2.git
    prefix: ../../src
    branch: master
  - name: tsbs
    repo: git@github.com:gregorynoma/tsbs.git
    prefix: ../../src
    branch: master
    ref: 225e713010463582712dca30ffcfc70c7d661663
  - name: mongo-perf
    repo: git@github.com:mongodb/mongo-perf.git
    prefix: ../../src
    branch: master
  - name: YCSB
    repo: git@github.com:mongodb-labs/YCSB.git
    prefix: ../../src
    branch: master
    ref: 03515f78fc460836886604ff8fbee89e5853fbbc
  - name: benchmarks
    repo: git@github.com:mongodb-labs/benchmarks.git
    prefix: ../../src
    branch: master
  - name: py-tpcc
    repo: git@github.com:mongodb-labs/py-tpcc.git
    prefix: ../../src
    branch: master
    ref: 46f8f42a71626fc2057d2604ab9359ccf0395ba0
#  - name: mongo
#    repo: git@github.com:mongodb/mongo.git
#    prefix: ../../src
#    branch: master
  ###
  - name: enterprise
    repo: git@github.com:10gen/mongo-enterprise-modules.git
    prefix: src/mongo/db/modules
    branch: master
  - name: mongo-tools
    repo: git@github.com:mongodb/mongo-tools.git
    prefix: mongo-tools/src/github.com/mongodb
    branch: master


###
# Same in every DSI project
pre:
  - func: f_other_pre_ops
  - func: f_dsi_pre_run
post:
  - func: f_dsi_post_run
  - func: f_other_post_ops
timeout:
  - func: f_dsi_timeout
  - func: f_other_timeout
###


functions:
  ###
  # Same in every DSI project
  f_dsi_pre_run:
    - command: manifest.load
    - command: expansions.update
      params:
        updates: *_expansion_updates
  f_run_dsi_workload:
    - command: git.get_project
      params:
        directory: *src_dir
        revisions:
          dsi: ${dsi_rev}
          genny: ${genny_rev}
          signal-processing: ${signal-processing_rev}
          linkbench: ${linkbench_rev}
          linkbench2: ${linkbench2_rev}
          tsbs: ${tsbs_rev}
          workloads: ${workloads_rev}
          mongo-perf: ${mongo-perf_rev}
          YCSB: ${YCSB_rev}
          benchmarks: ${benchmarks_rev}
          py-tpcc: ${py-tpcc_rev}
          # mongo: ${mongo_rev}
    - command: expansions.write
      params:
        file: ./expansions.yml
    - command: shell.exec
      params:
        script: ./src/dsi/run-dsi run_workload
    - command: shell.exec
      type: system
      params:
        script: ./src/dsi/run-dsi determine_failure -m SYSTEM
    - command: shell.exec
      type: setup
      params:
        script: ./src/dsi/run-dsi determine_failure -m SETUP
    - command: shell.exec
      type: test
      params:
        script: ./src/dsi/run-dsi determine_failure -m TEST
  f_dsi_post_run:
    # TODO: SERVER-57226 will let us move this json.send to after dsi's post_run.
    # This is preferred to keep DSI execution contiguous.
    - command: json.send
      params:
        name: perf
        file: ./build/LegacyPerfJson/perf.json
    - command: shell.exec
      params:
        script: ./src/dsi/run-dsi post_run
    - command: perf.send
      params:
        file: ./build/CedarReports/cedar_report.json
        aws_key: ${terraform_key}
        aws_secret: ${terraform_secret}
        bucket: genny-metrics
        region: us-east-1
        prefix: ${task_id}_${execution}
    - command: attach.results
      params:
        file_location: ./build/EvergreenResultsJson/results.json
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ./build/Artifacts/DSIArtifacts.tgz
        remote_file: ${project_dir}/${build_variant}/${revision}/${task_id}/${version_id}/logs/dsi-artifacts-${task_name}-${build_id}-${execution}.tgz
        bucket: mciuploads
        permissions: public-read
        content_type: application/x-gzip
        display_name: DSI Artifacts - Execution ${execution}
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: ./build/Documentation/index.html
        remote_file: ${project_dir}/${build_variant}/${revision}/${task_id}/${version_id}/logs/${task_name}-${build_id}-index.html
        bucket: mciuploads
        permissions: public-read
        content_type: text/html
        display_name: Documentation
  f_dsi_timeout:
    - command: shell.exec
      params:
        script: ./src/dsi/run-dsi on_timeout
  ###

  f_other_post_ops:
      - command: shell.exec
        params:
          working_dir: src
          script: |
            # removes files from the (local) scons cache when it's over a
            # threshold, to the $prune_ratio percentage. Ideally override
            # these default values in the distro config in evergreen.

            if [ -d "${scons_cache_path}" ]; then
                /opt/mongodbtoolchain/v3/bin/python3 buildscripts/scons_cache_prune.py --cache-dir ${scons_cache_path} --cache-size ${scons_cache_size|200} --prune-ratio ${scons_prune_ratio|0.8}
            fi
  f_other_pre_ops:
    - &f_other_pre_ops
      command: shell.exec
      params:
        silent: true
        script: |
          for PS in mongo{,d,s,import,export,dump,restore,stat,files,top,bridge} resmoke.py python{,2} lldb _test; do
              pkill -9 "$PS"
          done
  f_other_timeout:
    # Can't be empty so just `echo`.
    - command: shell.exec
      params: {script: "echo"}

  ###
  # Compile
  compile mongodb:
    # We create a virtual environment with the Python dependencies for compiling the server
    # installed.
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose

          /opt/mongodbtoolchain/v3/bin/virtualenv --python /opt/mongodbtoolchain/v3/bin/python3 "${workdir}/compile_venv"
          /opt/mongodbtoolchain/v3/bin/virtualenv --python /opt/mongodbtoolchain/v3/bin/python2 "${workdir}/venv"
          source "${workdir}/compile_venv/bin/activate"

          python -m pip install -r etc/pip/compile-requirements.txt

    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose

          mkdir -p mongodb/bin

          # We get the raw version string (r1.2.3-45-gabcdef) from git
          MONGO_VERSION=$(git describe --abbrev=7)

          # If this is a patch build, we add the patch version id to the version string so we know
          # this build was a patch, and which evergreen task it came from
          if [ "${is_patch|false}" = "true" ]; then
            MONGO_VERSION="$MONGO_VERSION-patch-${version_id}"
          fi

          # This script converts the generated version string into a sanitized version string for
          # use by scons and uploading artifacts as well as information about for the scons cache.
          source "${workdir}/compile_venv/bin/activate"
          MONGO_VERSION=$MONGO_VERSION USE_SCONS_CACHE=${use_scons_cache|false} python buildscripts/generate_compile_expansions.py --out compile_expansions.yml
    - command: expansions.update
      params:
        file: src/compile_expansions.yml
    - command: shell.exec
      params:
        working_dir: src/mongo-tools/src/github.com/mongodb/mongo-tools
        script: |
          set -o verbose
          set -o errexit

          # make sure newlines in the scripts are handled correctly by windows
          if [ "Windows_NT" = "$OS" ]; then
            set -o igncr
          fi;

          # set_goenv provides set_goenv(), print_ldflags() and print_tags() used below
          . ./set_goenv.sh
          GOROOT="" set_goenv || exit
          go version

          build_tools="bsondump mongostat mongofiles mongoexport mongoimport mongorestore mongodump mongotop"
          if [ "${build_mongoreplay}" = "true" ]; then
              build_tools="$build_tools mongoreplay"
          fi
          for i in $build_tools; do
              go build -ldflags "$(print_ldflags)" ${args} -tags "$(print_tags ${tooltags})" -o "../../../../../mongodb/bin/$i${exe|}" $i/main/$i.go
              "../../../../../mongodb/bin/$i${exe|}" --version
          done
    - command: shell.exec
      params:
        working_dir: src
        script: |
          set -o errexit
          set -o verbose
          source "${workdir}/compile_venv/bin/activate"
          python ./buildscripts/scons.py ${compile_flags|} ${scons_cache_args|} install-core MONGO_VERSION=${version} DESTDIR=$(pwd)/mongodb ${patch_compile_flags|}
          mkdir -p mongodb/jstests/hooks
          if [ -d jstests/hooks ]
          then
            echo "Fetching JS test DB correctness checks from directory jstests"
            cp -a jstests/* mongodb/jstests

            echo "Now adding our own special run_validate_collections.js wrapper"
            mv mongodb/jstests/hooks/run_validate_collections.js mongodb/jstests/hooks/run_validate_collections.actual.js

            cat << EOF > mongodb/jstests/hooks/run_validate_collections.js
            print("NOTE: run_validate_collections.js will skip the oplog!");
            TestData = { skipValidationNamespaces: ['local.oplog.rs'] };
            load('jstests/hooks/run_validate_collections.actual.js');
          EOF
          fi
          tar czf mongodb${compile-variant|}.tar.gz mongodb
    - command: s3.put
      params:
        aws_key: ${aws_key}
        aws_secret: ${aws_secret}
        local_file: src/mongodb${compile-variant|}.tar.gz
        remote_file: ${project_dir}/${version_id}/${revision}/${platform}/mongodb${compile-variant|}-${version_id}.tar.gz
        bucket: mciuploads
        permissions: public-read
        content_type: ${content_type|application/x-gzip}
        display_name: mongodb${compile-variant|}.tar.gz
  ###

  ## Schedule Tasks ##
  f_schedule_tasks:
    - command: git.get_project
      params:
        directory: *src_dir
        revisions:
          dsi: ${dsi_rev}
          genny: ${genny_rev}
          signal-processing: ${signal-processing_rev}
          linkbench: ${linkbench_rev}
          linkbench2: ${linkbench2_rev}
          tsbs: ${tsbs_rev}
          workloads: ${workloads_rev}
          mongo-perf: ${mongo-perf_rev}
          YCSB: ${YCSB_rev}
          benchmarks: ${benchmarks_rev}
          py-tpcc: ${py-tpcc_rev}
    - command: expansions.write
      params:
        file: ./expansions.yml
    - command: shell.exec
      params:
        script: ./src/dsi/run-dsi schedule_tasks --tasks=${tasks}
    - command: generate.tasks
      params:
        files:
          - build/TaskJSON/Tasks.json


tasks:
  ###
  # Same in every DSI project
  - name: schedule_global_auto_tasks
    priority: 5
    commands:
      - func: f_schedule_tasks
        vars:
          tasks: all_tasks
  - name: schedule_variant_auto_tasks
    priority: 5
    commands:
      - func: f_schedule_tasks
        vars:
          tasks: variant_tasks
  - name: schedule_patch_auto_tasks
    priority: 5
    commands:
      - func: f_schedule_tasks
        vars:
          tasks: patch_tasks
  - name: smoke_test
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
  - name: smoke_test_ssl
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
          mongodb_setup: replica-ssl
          infrastructure_provisioning: replica
  - name: smoke_test_standalone_auth
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
          mongodb_setup: standalone-auth
          infrastructure_provisioning: single
  - name: smoke_test_replset_auth
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
          mongodb_setup: replica-auth
          infrastructure_provisioning: replica
  - name: smoke_test_shard_lite_auth
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: short
          mongodb_setup: shard-lite-auth
          infrastructure_provisioning: shard-lite
  - name: dsi_integ_test_run_command_simple
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: run_command_simple
  ###

  - name: compile
    commands:
      - command: manifest.load
      - command: git.get_project
        params:
          directory: src
          revisions:
            enterprise: ${enterprise_rev}
            mongo-tools: ${mongo-tools_rev}
      - func: "compile mongodb"

  - name: renew_ssl_cert
    commands:
      - command: git.get_project
        params:
          directory: *src_dir
          revisions:
            dsi: ${dsi_rev}
      # Run the script to generate ssl cert files
      - command: shell.exec
        params:
          script: AWS_ACCESS_KEY_ID=${terraform_key} AWS_SECRET_ACCESS_KEY=${terraform_secret} ./src/dsi/run-dsi generate_ssl_cert
      # Upload files for further DSI usage
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: member.pem
          # path to the remote file is intended to be static
          remote_file: dsi/ssl/member.pem
          bucket: mciuploads
          # the visibility has to be public for consumption by DSI
          permissions: public-read
          content_type: text/plain
          display_name: member.pem
      - command: s3.put
        params:
          aws_key: ${aws_key}
          aws_secret: ${aws_secret}
          local_file: root.crt
          # path to the remote file is intended to be static
          remote_file: dsi/ssl/root.crt
          bucket: mciuploads
          # the visibility has to be public for consumption by DSI
          permissions: public-read
          content_type: text/plain
          display_name: root.crt

  - name: linkbench
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "linkbench"

  - name: linkbench_stepdowns
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "linkbench_stepdowns"

  - name: linkbench_rolling_restarts
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "linkbench_rolling_restarts"

  - name: linkbench_non_retryable_writes_stepdowns
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "linkbench_non_retryable_writes_stepdowns"

  - name: linkbench_non_retryable_writes_rolling_restarts
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "linkbench_non_retryable_writes_rolling_restarts"

  - name: linkbench2
    priority: 5
    exec_timeout_secs: 43200 # 12 hours
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "linkbench2"
          additional_tfvars: "tags: {expire-on-delta: 12}"

  - name: tsbs_load
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "tsbs_load"

  - name: tsbs_query
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "tsbs_query"

  - name: tsbs_query_manual_bucketing
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "tsbs_query_manual_bucketing"

  - name: tpcc
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "tpcc"

  - name: industry_benchmarks
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "ycsb"

  - name: ycsb_60GB
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "ycsb-60GB"

  - name: industry_benchmarks_secondary_reads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "ycsb-secondary-reads"

  - name: industry_benchmarks_wmajority
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "ycsb-wmajority"

  - name: industry_benchmarks_stepdowns
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "ycsb_stepdowns"

  - name: industry_benchmarks_rolling_restarts
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "ycsb_rolling_restarts"

  - name: industry_benchmarks_non_retryable_writes_stepdowns
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "ycsb_non_retryable_writes_stepdowns"

  - name: industry_benchmarks_non_retryable_writes_rolling_restarts
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "ycsb_non_retryable_writes_rolling_restarts"

  - name: crud_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "crud_workloads"

  - name: crud_workloads_majority
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "crud_workloads_majority"

  - name: cursor_manager
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "cursor_manager"

  - name: mixed_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "mixed_workloads"

  - name: mixed_workloads_genny_stepdowns
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "mixed_workloads_genny_stepdowns"

  - name: mixed_workloads_genny_rolling_restarts
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "mixed_workloads_genny_rolling_restarts"

  - name: big_update_10k
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "BigUpdate10k"

  - name: misc_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "misc_workloads"


  - name: map_reduce_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "map_reduce_workloads"

  - name: genny_canaries
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "genny_canaries"

  - name: retryable_writes_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "retryable_writes"

  - name: snapshot_reads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "snapshot_reads"

  - name: secondary_reads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "secondary_reads"

  - name: bestbuy_agg
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "bestbuy_agg"

  - name: bestbuy_agg_merge_same_db
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "bestbuy_agg_merge_same_db"

  - name: bestbuy_agg_merge_different_db
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "bestbuy_agg_merge_different_db"

  - name: bestbuy_agg_merge_target_hashed
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "bestbuy_agg_merge_target_hashed"

  - name: bestbuy_agg_merge_wordcount
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "bestbuy_agg_merge_wordcount"

  - name: bestbuy_query
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "bestbuy_query"

  - name: non_sharded_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "non_sharded"

  - name: mongos_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "mongos"

  - name: mongos_large_catalog_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "mongos_large_catalog"

  - name: move_chunk_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "move_chunk"

  - name: move_chunk_waiting_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "move_chunk_waiting"

  - name: move_chunk_large_chunk_map_workloads
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "move_chunk_large_chunk_map"

  - name: refine_shard_key_transaction_stress
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "refine_shard_key_transaction_stress"

  - name: secondary_performance
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          # Unfortunately the dash/underscore style is different for mongodb_setup and test_control
          test_control: "secondary_performance"
          mongodb_setup: "secondary-performance"

  - name: initialsync
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "initialsync"

  - name: initialsync-logkeeper-short
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "initialsync-logkeeper"
          mongodb_setup: "initialsync-logkeeper-short"
          # Logkeeper dataset with FCV set to 5.0
          mongodb_dataset: "https://s3-us-west-2.amazonaws.com/dsi-donot-remove/InitialSyncLogKeeper/logkeeper-slice-data-mongodb-5.0.tgz"

  - name: initialsync-logkeeper
    priority: 5
    exec_timeout_secs: 216000 # 2.5 days
    commands:
      - func: f_run_dsi_workload
        timeout_secs: 216000 # 2.5 days
        vars:
          test_control: "initialsync-logkeeper"

  # The following two initial sync logkeeper automation tasks are only used in the commented-out
  # "Linux ReplSet Initial Sync LogKeeper Snapshot Update" variant below and are only intended to be
  # run in patch builds to update FCV for logkeeper datasets.
  - name: initialsync-logkeeper-short-s3-update
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "initialsync-logkeeper-short-s3-update"
          mongodb_setup: "initialsync-logkeeper-short-s3-update"
          # Update this to Logkeeper dataset with FCV set to latest after each LTS release.
          mongodb_dataset: "https://s3-us-west-2.amazonaws.com/dsi-donot-remove/InitialSyncLogKeeper/logkeeper-slice-data-mongodb-5.0.tgz"

  - name: initialsync-logkeeper-snapshot-update
    priority: 5
    exec_timeout_secs: 216000 # 2.5 days
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "initialsync-logkeeper-snapshot-update"

  - name: initialsync-large
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "initialsync-large"

  - name: change_streams_throughput
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "change_streams_throughput"

  - name: change_streams_latency
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "change_streams_latency"

  - name: change_streams_multi_mongos
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "change_streams_multi_mongos"

  - name: sb_large_scale
    priority: 5
    exec_timeout_secs: 43200 # 12 hours
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "sb_large_scale"
          additional_tfvars: "tags: {expire-on-delta: 12}"

  - name: sb_timeseries
    priority: 5
    commands:
      - func: f_run_dsi_workload
        vars:
          test_control: "sb_timeseries"


buildvariants:
  - name: task_generation
    display_name: Task Generation
    modules: *modules
    expansions:
      platform: linux
      project_dir: dsi
    run_on:
      - amazon2-build
    tasks:
      - name: schedule_global_auto_tasks

  - &compile-amazon2
    name: compile-amazon2
    display_name: Compile
    modules: *modules
    batchtime: 2880 # 48 hours
    expansions: &compile-expansions
      platform: linux
      project_dir: &project_dir dsi
      tooltags: ""
      use_scons_cache: true
      compile_flags: >-
        --ssl
        --separate-debug
        MONGO_DISTMOD=amazon2
        -j$(grep -c ^processor /proc/cpuinfo)
        --release
        --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
        install-mongocryptd
    run_on:
      - "amazon2-build"
    tasks:
      - name: compile

  - name: linux-standalone
    display_name: Linux Standalone
    batchtime: 2880  # 48 hours
    modules: *modules
    expansions:
      mongodb_setup: standalone
      infrastructure_provisioning: single
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-single"
    depends_on: *_compile_amazon2
    tasks: &standalonetasks
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: dsi_integ_test_run_command_simple
      - name: smoke_test
      - name: industry_benchmarks
      - name: ycsb_60GB
      - name: crud_workloads
      - name: genny_canaries
      - name: cursor_manager
      - name: mixed_workloads
      - name: misc_workloads
      - name: map_reduce_workloads
      - name: non_sharded_workloads
      - name: bestbuy_agg
      - name: bestbuy_agg_merge_different_db
      - name: bestbuy_agg_merge_same_db
      - name: bestbuy_agg_merge_wordcount
      - name: bestbuy_query

  - name: compile-rhel70
    display_name: Compile for Atlas-like
    modules: *modules
    batchtime: 2880 # 48 hours
    expansions:
      <<: *compile-expansions
      compile_flags: >-
        --ssl
        --separate-debug
        MONGO_DISTMOD=rhel70
        -j$(grep -c ^processor /proc/cpuinfo)
        --release
        --variables-files=etc/scons/mongodbtoolchain_v3_gcc.vars
      compile-variant: -rhel70
    run_on:
      - rhel70-large
    tasks:
      - name: compile

  - name: linux-1-node-replSet
    display_name: Linux 1-Node ReplSet
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: single-replica
      infrastructure_provisioning: single
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-single"
    depends_on: *_compile_amazon2
    tasks: &1nodetasks
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: ycsb_60GB
      - name: crud_workloads
      - name: mixed_workloads
      - name: misc_workloads
      - name: map_reduce_workloads
      - name: smoke_test
      - name: retryable_writes_workloads
      - name: non_sharded_workloads
      - name: bestbuy_agg
      - name: bestbuy_agg_merge_different_db
      - name: bestbuy_agg_merge_same_db
      - name: bestbuy_agg_merge_wordcount
      - name: bestbuy_query
      - name: change_streams_throughput
      - name: change_streams_latency
      - name: snapshot_reads
      - name: linkbench
      - name: linkbench2
      - name: tsbs_load
      - name: tsbs_query
      - name: tsbs_query_manual_bucketing
      - name: tpcc
      - name: industry_benchmarks_wmajority
      - name: sb_large_scale
      - name: sb_timeseries

  - name: linux-standalone-audit
    display_name: Linux Standalone Audit
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: standalone-audit
      infrastructure_provisioning: single
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-single"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: crud_workloads
      - name: smoke_test

  - name: linux-1-node-replSet-fle
    display_name: Linux 1-Node ReplSet FLE
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: single-replica-fle
      infrastructure_provisioning: single
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      fle: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-single"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: linkbench

  - name: linux-1-node-replSet-cwrwc
    display_name: Linux 1-Node ReplSet CWRWC
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: single-replica-cwrwc
      infrastructure_provisioning: single
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-single"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: linkbench

  - name: linux-1-node-replSet-ese-cbc
    display_name: Linux 1-Node ReplSet ESE CBC
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: single-replica-ese-cbc
      infrastructure_provisioning: single
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-single"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: smoke_test
      - name: ycsb_60GB

  - name: linux-1-node-replSet-ese-gcm
    display_name: Linux 1-Node ReplSet ESE GCM
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: single-replica-ese-gcm
      infrastructure_provisioning: single
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-single"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: smoke_test
      - name: ycsb_60GB

  - name: linux-1-node-15gbwtcache
    display_name: Linux 1-Node ReplSet 15 GB WiredTiger Cache
    batchtime: 2880  # 48 hours
    modules: *modules
    expansions:
      mongodb_setup: single-replica-15gbwtcache
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-single"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: smoke_test

  - name: linux-3-node-1dayhistory-15gbwtcache
    display_name: Linux 3-Node ReplSet 1 Day History 15 GB WiredTiger Cache
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: replica-1dayhistory-15gbwtcache
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: crud_workloads
      - name: crud_workloads_majority
      - name: smoke_test

  - name: linux-3-shard
    display_name: Linux 3-Shard Cluster
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: shard
      infrastructure_provisioning: shard
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-shard"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: crud_workloads
      - name: mixed_workloads
      - name: misc_workloads
      - name: map_reduce_workloads
      - name: smoke_test
      - name: industry_benchmarks_wmajority
      - name: mongos_workloads
      - name: mongos_large_catalog_workloads
      - name: change_streams_throughput
      - name: change_streams_latency
      - name: change_streams_multi_mongos

  - name: linux-shard-lite-audit
    display_name: Linux Shard Lite Cluster Audit
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: shard-lite-audit
      infrastructure_provisioning: shard-lite
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-shard-lite"
    depends_on: *_compile_amazon2
    tasks:
      - name: industry_benchmarks

  - name: linux-shard-lite
    display_name: Linux Shard Lite Cluster
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: shard-lite
      infrastructure_provisioning: shard-lite
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-shard-lite"
    depends_on: *_compile_amazon2
    tasks: &shardlitetasks
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: bestbuy_agg
      - name: bestbuy_agg_merge_different_db
      - name: bestbuy_agg_merge_same_db
      - name: bestbuy_agg_merge_target_hashed
      - name: bestbuy_agg_merge_wordcount
      - name: bestbuy_query
      - name: change_streams_latency
      - name: change_streams_throughput
      - name: industry_benchmarks
      - name: industry_benchmarks_wmajority
      - name: linkbench
      - name: mixed_workloads
      - name: mongos_workloads
      - name: mongos_large_catalog_workloads
      - name: move_chunk_large_chunk_map_workloads
      - name: move_chunk_workloads
      - name: move_chunk_waiting_workloads
      - name: retryable_writes_workloads
      - name: smoke_test

  - name: linux-shard-lite-cwrwc
    display_name: Linux Shard Lite Cluster CWRWC
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: shard-lite-cwrwc
      infrastructure_provisioning: shard-lite
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-shard-lite"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: linkbench

  - name: linux-shard-lite-read-concern-available
    display_name: Linux Shard Lite ReadConcern Available
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: shard-lite-read-concern-available
      infrastructure_provisioning: shard-lite
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-shard-lite"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: linkbench

  - name: linux-shard-lite-all-feature-flags
    display_name: Linux Shard Lite (all feature flags)
    batchtime: 10080  # 7 days
    modules: *modules
    expansions:
      mongodb_setup: shard-lite-all-feature-flags
      infrastructure_provisioning: shard-lite
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-shard-lite"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks

  - name: linux-shard-single
    display_name: Linux Shard Single
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: shard-single
      infrastructure_provisioning: shard-single
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-shard-lite"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks

  - name: linux-3-node-replSet
    display_name: Linux 3-Node ReplSet
    batchtime: 2880  # 48 hours
    modules: *modules
    expansions:
      mongodb_setup: replica
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks: &3nodetasks
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: ycsb_60GB
      - name: industry_benchmarks_secondary_reads
      - name: crud_workloads
      - name: crud_workloads_majority
      - name: mixed_workloads
      - name: misc_workloads
      - name: map_reduce_workloads
      - name: refine_shard_key_transaction_stress
      - name: smoke_test
      - name: retryable_writes_workloads
      - name: industry_benchmarks_wmajority
      - name: secondary_performance # Uses a special 2 node mongodb setup
      - name: non_sharded_workloads
      - name: bestbuy_agg
      - name: bestbuy_agg_merge_different_db
      - name: bestbuy_agg_merge_same_db
      - name: bestbuy_agg_merge_wordcount
      - name: bestbuy_query
      - name: change_streams_throughput
      - name: change_streams_latency
      - name: snapshot_reads
      - name: secondary_reads
      - name: tpcc
      - name: linkbench
      - name: linkbench2
      - name: tsbs_load
      - name: tsbs_query
      - name: tsbs_query_manual_bucketing
      - name: sb_large_scale
      - name: sb_timeseries
      - name: big_update_10k

  - name: linux-3-node-replSet-last-continuous-fcv
    display_name: Linux 3-Node ReplSet (Last Continuous FCV)
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: replica-last-continuous-fcv
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: ycsb_60GB
      - name: industry_benchmarks_secondary_reads
      - name: crud_workloads
      - name: crud_workloads_majority
      - name: mixed_workloads
      - name: misc_workloads
      - name: map_reduce_workloads
      - name: refine_shard_key_transaction_stress
      - name: smoke_test
      - name: retryable_writes_workloads
      - name: industry_benchmarks_wmajority
      - name: secondary_performance # Uses a special 2 node mongodb setup
      - name: non_sharded_workloads
      - name: bestbuy_agg
      - name: bestbuy_agg_merge_different_db
      - name: bestbuy_agg_merge_same_db
      - name: bestbuy_agg_merge_wordcount
      - name: bestbuy_query
      - name: change_streams_throughput
      - name: change_streams_latency
      - name: snapshot_reads
      - name: secondary_reads
      - name: tpcc
      - name: linkbench
      - name: linkbench2
      # Time-series collections are available since v5.0.
      # - name: tsbs_load
      # - name: tsbs_query
      # - name: tsbs_query_manual_bucketing
      - name: sb_large_scale
      - name: sb_timeseries

  - name: linux-3-node-replSet-last-lts-fcv
    display_name: Linux 3-Node ReplSet (Last LTS FCV)
    batchtime: 10080  # 7 days
    modules: *modules
    expansions:
      mongodb_setup: replica-last-lts-fcv
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: ycsb_60GB
      - name: industry_benchmarks_secondary_reads
      - name: crud_workloads
      - name: crud_workloads_majority
      - name: mixed_workloads
      - name: misc_workloads
      - name: map_reduce_workloads
      - name: refine_shard_key_transaction_stress
      - name: smoke_test
      - name: retryable_writes_workloads
      - name: industry_benchmarks_wmajority
      - name: secondary_performance # Uses a special 2 node mongodb setup
      - name: non_sharded_workloads
      - name: bestbuy_agg
      - name: bestbuy_agg_merge_different_db
      - name: bestbuy_agg_merge_same_db
      - name: bestbuy_agg_merge_wordcount
      - name: bestbuy_query
      - name: change_streams_throughput
      - name: change_streams_latency
      - name: snapshot_reads
      - name: secondary_reads
      - name: tpcc
      - name: linkbench
      - name: linkbench2
      # Time-series collections are available since v5.0.
      # - name: tsbs_load
      # - name: tsbs_query
      # - name: tsbs_query_manual_bucketing
      - name: sb_large_scale
      - name: sb_timeseries

  # Note that the "disabled-feature-flags" part of the name is kept to avoid breaking
  # history even though the display name is "all feature flags"
  - name: linux-3-node-replSet-disabled-feature-flags
    display_name: Linux 3-Node ReplSet (all feature flags)
    batchtime: 10080  # 7 days
    modules: *modules
    expansions:
      mongodb_setup: replica-all-feature-flags
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: ycsb_60GB
      - name: industry_benchmarks_secondary_reads
      - name: crud_workloads
      - name: crud_workloads_majority
      - name: mixed_workloads
      - name: misc_workloads
      - name: map_reduce_workloads
      - name: refine_shard_key_transaction_stress
      - name: smoke_test
      - name: retryable_writes_workloads
      - name: industry_benchmarks_wmajority
      - name: secondary_performance # Uses a special 2 node mongodb setup
      - name: non_sharded_workloads
      - name: bestbuy_agg
      - name: bestbuy_agg_merge_different_db
      - name: bestbuy_agg_merge_same_db
      - name: bestbuy_agg_merge_wordcount
      - name: bestbuy_query
      - name: change_streams_throughput
      - name: change_streams_latency
      - name: snapshot_reads
      - name: secondary_reads
      - name: tpcc
      - name: linkbench
      - name: linkbench2
      # Time-series collections are available since v5.0.
      # - name: tsbs_load
      # - name: tsbs_query
      # - name: tsbs_query_manual_bucketing
      - name: sb_large_scale
      - name: sb_timeseries

  - name: linux-3-node-replSet-noflowcontrol
    display_name: Linux 3-Node ReplSet (Flow Control off)
    batchtime: 10080  # 7 days
    modules: *modules
    expansions:
      mongodb_setup: replica-noflowcontrol
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: industry_benchmarks_secondary_reads
      - name: crud_workloads
      - name: crud_workloads_majority
      - name: mixed_workloads
      - name: smoke_test
      - name: industry_benchmarks_wmajority
      - name: change_streams_throughput
      - name: change_streams_latency
      - name: tpcc
      - name: linkbench
      - name: linkbench2

  - name: linux-3-node-replSet-ssl
    display_name: Linux 3-Node ReplSet (SSL)
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: replica-ssl
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: mixed_workloads

  - name: linux-3-node-replSet-maintenance-events
    display_name: Linux 3-Node ReplSet (Maintenance Events)
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: replica-maintenance-events
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks_stepdowns
      - name: industry_benchmarks_rolling_restarts
      - name: industry_benchmarks_non_retryable_writes_stepdowns
      - name: industry_benchmarks_non_retryable_writes_rolling_restarts
      - name: linkbench_stepdowns
      - name: linkbench_rolling_restarts
      - name: linkbench_non_retryable_writes_stepdowns
      - name: linkbench_non_retryable_writes_rolling_restarts
      - name: mixed_workloads_genny_stepdowns
      - name: mixed_workloads_genny_rolling_restarts

  - name: linux-3-node-replSet-initialsync
    display_name: Linux 3-Node ReplSet Initial Sync
    batchtime: 2880  # 48 hours
    modules: *modules
    expansions:
      mongodb_setup: replica-2node
      infrastructure_provisioning: replica
      platform: linux
      authentication: disabled
      storageEngine: wiredTiger
      project_dir: *project_dir
    depends_on: *_compile_amazon2
    run_on:
      - "rhel70-perf-replset"
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: initialsync
      - name: initialsync-logkeeper-short
      - name: initialsync-large

  - name: linux-replSet-initialsync-logkeeper
    display_name: Linux ReplSet Initial Sync LogKeeper
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: initialsync-logkeeper
      infrastructure_provisioning: initialsync-logkeeper
      # EBS logkeeper snapshot with FCV set to 5.0
      snapshotId: snap-0b91f3899d0b10008
      platform: linux
      authentication: disabled
      storageEngine: wiredTiger
      project_dir: *project_dir
    run_on:
      - "rhel70-perf-initialsync-logkeeper"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: initialsync-logkeeper

  # Uncomment this to run logkeeper FCV updates automatically. This is only intended to be run in
  # patch builds.
  #- name: linux-replSet-initialsync-logkeeper-snapshot-update
  #  display_name: Linux ReplSet Initial Sync LogKeeper Snapshot Update
  #  batchtime: 10080 # 7 days
  #  modules: *modules
  #  expansions:
  #    mongodb_setup: initialsync-logkeeper
  #    infrastructure_provisioning: initialsync-logkeeper-snapshot-update
  #    # Update this to latest snapshot after each LTS release.
  #    snapshotId: snap-0dba360e743e27ea0
  #    platform: linux
  #    authentication: disabled
  #    storageEngine: wiredTiger
  #    project_dir: *project_dir
  #  run_on:
  #    - "rhel70-perf-initialsync-logkeeper"
  #  depends_on: *_compile_amazon2
  #  tasks:
  #    - name: schedule_patch_auto_tasks
  #    - name: schedule_variant_auto_tasks
  #    - name: initialsync-logkeeper-snapshot-update
  #    - name: initialsync-logkeeper-short-s3-update

  - name: linux-replSet-audit
    display_name: Linux 3-Node ReplSet Audit
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: replica-audit
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks

  - name: linux-replSet-auth-delay
    display_name: Linux 3-Node ReplSet (Auth Delay)
    batchtime: 10080 # 7 days
    modules: *modules
    expansions:
      mongodb_setup: replica-auth-cluster-delay
      infrastructure_provisioning: replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
    run_on:
      - "rhel70-perf-replset"
    depends_on: *_compile_amazon2
    tasks:
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks

  - name: atlas-like-M60
    display_name: M60-Like 3-Node ReplSet
    batchtime: 5760  # 4 days
    modules: *modules
    expansions:
      mongodb_setup: atlas-like-replica
      infrastructure_provisioning: M60-like-replica
      platform: linux
      project_dir: *project_dir
      authentication: enabled
      storageEngine: wiredTiger
      compile-variant: -rhel70
    run_on:
      - "rhel70-perf-M60-like"
    depends_on: *_compile_rhel70
    tasks:  # Cannot use *3nodetasks because secondary_performance uses a special mongodb setup.
      - name: schedule_patch_auto_tasks
      - name: schedule_variant_auto_tasks
      - name: industry_benchmarks
      - name: ycsb_60GB
      - name: industry_benchmarks_secondary_reads
      - name: crud_workloads
      - name: crud_workloads_majority
      - name: mixed_workloads
      - name: misc_workloads
      - name: map_reduce_workloads
      - name: smoke_test
      - name: retryable_writes_workloads
      - name: industry_benchmarks_wmajority
      - name: non_sharded_workloads
      - name: bestbuy_agg
      - name: bestbuy_agg_merge_different_db
      - name: bestbuy_agg_merge_same_db
      - name: bestbuy_agg_merge_wordcount
      - name: bestbuy_query
      - name: change_streams_throughput
      - name: change_streams_latency
      - name: snapshot_reads
      - name: secondary_reads
      - name: tpcc
      - name: linkbench
      - name: linkbench2

  - name: renew-ssl-cert
    display_name: Renew SSL Cert
    batchtime: 10080 # 7 days
    modules: *modules
    run_on:  # Certbot with route53 plugin is installed on RHEL80
      - "rhel80-small"
    tasks:
      - name: renew_ssl_cert

# This file is used to tag JS tests that run under resmoke.py.
# The content of this file lives in the https://github.com/mongodb/mongo-test-metadata repository.
# It is fetched automatically as part of the compile task.
selector: {}

# This file is used to tag JS tests for retry on failure that run in the mainline.
#
# For JS tests that have failed, you can tag them to be retried. The following scenarios apply:
#
# 1. the test sometimes fails in any task on any build variant with any distro,
# 2. the test sometimes fails in a specific task on any build variant with any distro,
# 3. the test sometimes fails in a specific task on a specific build variant with any distro, or
# 4. the test sometimes fails in a specific task on a specific build variant with a specific distro.
#
# Depending on which of the above scenarios apply, you can tag the JS file with the following tags,
# respectively.
#
# 1. retry_on_failure
# 2. retry_on_failure|${task_name}
# 3. retry_on_failure|${task_name}|${build_variant}
# 4. retry_on_failure|${task_name}|${build_variant}|${distro_id}
#
# Examples:
#
#   JS test failed: jstests/sharding/exact_shard_key_target.js
#     in task_name: sharding_csrs_continuous_config_stepdown_WT
# on build_variant: any
#   with distro_id: any
#         tag with: retry_on_failure|sharding_csrs_continuous_config_stepdown_WT
#
#   JS test failed: jstests/noPassthrough/backup_restore_stop_start.js
#     in task_name: noPassthrough
# on build_variant: enterprise-rhel-62-64-bit
#   with distro_id: rhel62-small
#         tag with: retry_on_failure|noPassthrough|enterprise-rhel-62-64-bit|rhel62-small
#
# Example of tagging a test affecting multiple tasks:
#
#   JS test failed: jstests/sharding/shard_collection_verify_initial_chunks.js
#     in task_name: sharding and sharding_WT
# on build_variant: linux-64
#   with distro_id: any
#         tag with: retry_on_failure|sharding|linux-64 and
#                   retry_on_failure|sharding_WT|linux-64
#
#
# Note: Making it possible to ignore test failures increases the risk we won't (or will take
# longer to) discover a bug and therefore tests should be tagged judiciously.

selector:
  js_test:
    # jstests/sharding/exact_shard_key_target.js:
    # - retry_on_failure|sharding_csrs_continuous_config_stepdown_WT

# List of Third Party Components in MongoDB source code
#
# This file is consumed by buildscripts/blackduck_hub.py

# Sample
# Note: the word TO_DO is supposed to be spelled as "TODO". It is spelled awkwardly in the example
# to avoid the TODO scanner from filing an issue on the sample code.
#
# component_name: Sample Example Compnent
# 	homepage_url: https://www.example.com
# 	local_directory_path: src/third_party/example
#   open_hub_url: https://www.openhub.net/p/example
#   release_monitoring_id: 1234
#   is_test_only: false
# 	upgrade_suppression: TO_DO SERVER-12345
# 	vulnerability_suppression: TO_DO SERVER-12345
# 	team_owner: example


# Description
# component_name - string - required - Name of component in Black Duck Hub
# homepage_url - URL - required - website where to find third party component
# open_hub_url - URL - required - Black Duck Open Hub URL where to find third party component
#                         not always available, see https://www.openhub.net
#                         if not available, use text "N/A"
# release_monitoring_id - integer - required - id of Fedora's Anitya project for monitoring releases
#                         not always available, see https://release-monitoring.org/
#                         if not available, use integer "-1"
# local_directory_path - path - required - relative path to directory containing code
# is_test_only - bool - optional - false by default, true if the component is only part of test code and not shipped to users
#                test only components are not checked for upgrade or vulnerability issues
# upgrade_suppression - string - optional - SERVER- or TW- ticket in JIRA, if present upgrade issues are ignored
#                       Must be prefixed with TODO
# vulnerability_suppression - string - optional - SERVER- or WT- ticket in JIRA, if present vulnerability issues are ignored
#                             Must be prefixed with TODO
# team_owner - string - required - server team that is responsible for maintaining library

# TODO - can we query JIRA to see if the tickets are closed, check DAG code

components:

  abseil/abseil-cpp:
    homepage_url: https://abseil.io
    open_hub_url: N/A
    release_monitoring_id: 115295
    local_directory_path: src/third_party/abseil-cpp-master
    team_owner: "Service Architecture"
    # Note: abseil exists in Black Duck, but not OpenHub
    upgrade_suppression: TODO SERVER-58675

  Aladdin MD5:
    homepage_url: N/A
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: [src/mongo/util/md5.h, src/mongo/util/md5.cpp]
    team_owner: "Security"
    # Not covered in Black Duck

  "ASIO C++ Library":
    homepage_url: http://think-async.com/Asio/
    open_hub_url: N/A
    release_monitoring_id: 117
    local_directory_path: src/third_party/asio-master
    team_owner: "Service Architecture"
    upgrade_suppression: TODO SERVER-54659

  benchmark:
    homepage_url: https://github.com/google/benchmark
    open_hub_url: https://www.openhub.net/p/benchmark
    release_monitoring_id: 18299
    local_directory_path: src/third_party/benchmark
    is_test_only: true
    team_owner: "Service Architecture"

  "Boost C++ Libraries - boost":
    homepage_url: https://www.boost.org/
    open_hub_url: https://www.openhub.net/p/boost
    release_monitoring_id: 6845
    local_directory_path: src/third_party/boost
    team_owner: "Service Architecture"

  concurrencytest:
    homepage_url: https://github.com/cgoldberg/concurrencytest
    open_hub_url: https://www.openhub.net/p/concurrencytest
    release_monitoring_id: -1
    local_directory_path: src/third_party/wiredtiger/test/3rdparty/concurrencytest-0.1.2
    is_test_only: true
    team_owner: "Wiredtiger"

  "dcleblanc/SafeInt":
    homepage_url: https://github.com/dcleblanc/SafeInt
    open_hub_url: https://www.openhub.net/p/SafeInt
    release_monitoring_id: -1
    local_directory_path: src/third_party/SafeInt
    team_owner: "Service Architecture"

  discover-python:
    homepage_url: https://pypi.org/project/discover/
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/wiredtiger/test/3rdparty/discover-0.4.0
    is_test_only: true
    team_owner: "Wiredtiger"

  fmtlib/fmt:
    homepage_url: https://fmt.dev
    open_hub_url: https://www.openhub.net/p/fmtlib_fmt
    release_monitoring_id: 11526
    local_directory_path: src/third_party/fmt
    team_owner: "Security"
    upgrade_suppression: TODO SERVER-57876

  google/s2geometry:
    homepage_url: https://github.com/google/s2geometry
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/s2
    team_owner: "Query"
    # Note: Code in MongoDB is based on early release here - https://code.google.com/archive/p/s2-geometry-library/

  google-snappy:
    homepage_url: https://google.github.io/snappy/
    open_hub_url: N/A
    release_monitoring_id: 4844
    local_directory_path: src/third_party/snappy-1.1.7
    team_owner: "Execution"
    upgrade_suppression: TODO SERVER-47281
    # TODO - bad version data

  gperftools:
    homepage_url: https://github.com/gperftools/gperftools
    open_hub_url: https://www.openhub.net/p/google-perftools
    release_monitoring_id: 1238
    local_directory_path: src/third_party/gperftools
    team_owner: "Execution"
    # TODO - fix the version number in Black Duck

  "ICU for C/C++ (ICU4C)":
    homepage_url: http://site.icu-project.org/
    open_hub_url: https://www.openhub.net/p/icu4c
    release_monitoring_id: 16134
    local_directory_path: src/third_party/icu4c-57.1
    team_owner: "Query"
    vulnerability_suppression: TODO SERVER-49211
    upgrade_suppression: TODO SERVER-49211

  "Intel Decimal Floating-Point Math Library":
    homepage_url: https://software.intel.com/content/www/us/en/develop/articles/intel-decimal-floating-point-math-library.html
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/IntelRDFPMathLib20U1
    team_owner: "Execution"
    # Note: IntelRDFPMathLib exists in Black Duck, but not OpenHub

  jbeder/yaml-cpp:
    homepage_url: https://github.com/jbeder/yaml-cpp
    open_hub_url: https://www.openhub.net/p/jbeder_yaml-cpp
    release_monitoring_id: 5284
    local_directory_path: src/third_party/yaml-cpp
    team_owner: "Security"

  JSON-Schema-Test-Suite:
    homepage_url: https://github.com/json-schema-org/JSON-Schema-Test-Suite
    open_hub_url: https://www.openhub.net/p/json-schema-test-suite
    release_monitoring_id: -1
    local_directory_path: src/third_party/JSON-Schema-Test-Suite
    is_test_only: true
    team_owner: "Query"

  libmongocrypt:
    homepage_url: https://github.com/mongodb/libmongocrypt
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/kms-message
    team_owner: "Security"
    # Note: libmongocrypt exists in Black Duck, but not OpenHub

  linenoise:
    homepage_url: https://github.com/antirez/linenoise
    open_hub_url: https://www.openhub.net/p/linenoise
    release_monitoring_id: 5691
    local_directory_path: [src/mongo/shell/linenoise.h, src/mongo/shell/linenoise.cpp]
    team_owner: "Server Tools and Methodology"
    upgrade_suppression: TODO SERVER-514767

  LibTomCrypt:
    homepage_url: https://www.libtom.net/
    open_hub_url: https://www.openhub.net/p/libtomcrypt
    release_monitoring_id: 15563
    local_directory_path: src/third_party/tomcrypt-1.18.2
    team_owner: "Security"

  libunwind:
    homepage_url: http://www.nongnu.org/libunwind/
    open_hub_url: https://www.openhub.net/p/p_w_d10376
    release_monitoring_id: 1748
    local_directory_path: src/third_party/unwind
    team_owner: "Service Architecture"
    # Note: missing from README.third_party.md

  "Mozilla Firefox":
    homepage_url: https://www.mozilla.org/en-US/firefox/organizations/
    open_hub_url: https://www.openhub.net/p/firefox
    release_monitoring_id: 16838
    local_directory_path: src/third_party/mozjs-60
    team_owner: "Query"
    vulnerability_suppression: TODO SERVER-42427
    upgrade_suppression: TODO SERVER-42427

  "mpark-variant-devel":
    homepage_url: https://github.com/mpark/variant
    open_hub_url: N/A
    release_monitoring_id: 18301
    local_directory_path: src/third_party/variant-1.4.0
    team_owner: "Service Architecture"

  ocspbuilder:
    homepage_url: https://github.com/wbond/ocspbuilder
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/mock_ocsp_responder
    is_test_only: true
    team_owner: "Security"
    # Note: ocspbuilder exists in Black Duck, but not OpenHub

  ocspresponder:
    homepage_url: https://github.com/threema-ch/ocspresponder
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/mock_ocsp_responder
    is_test_only: true
    team_owner: "Security"
    # Note: ocspresponder exists in Black Duck, but not OpenHub

  PCRE:
    homepage_url: https://www.pcre.org/
    open_hub_url: https://www.openhub.net/p/pcre
    release_monitoring_id: 2610
    local_directory_path: src/third_party/pcre-8.42
    team_owner: "Query"
    upgrade_suppression: TODO SERVER-47278

  python-testscenarios:
    homepage_url: https://launchpad.net/testscenarios
    open_hub_url: https://www.openhub.net/p/testscenarios
    release_monitoring_id: 13220
    local_directory_path: src/third_party/wiredtiger/test/3rdparty/testscenarios-0.4
    is_test_only: true
    team_owner: "Wiredtiger"

  python3-extras:
    homepage_url: https://github.com/testing-cabal/extras
    open_hub_url: N/A
    release_monitoring_id: 13192
    local_directory_path: src/third_party/wiredtiger/test/3rdparty/extras-0.0.3
    is_test_only: true
    team_owner: "Wiredtiger"

  SchemaStore/schemastore:
    homepage_url: https://www.schemastore.org/
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/schemastore.org
    is_test_only: true
    team_owner: "Query"

  "SCons - a Software Construction tool":
    homepage_url: https://www.scons.org/
    open_hub_url: https://www.openhub.net/p/scons
    release_monitoring_id: 4770
    local_directory_path: src/third_party/scons-3.1.2
    team_owner: "Service Development Platform"
    upgrade_suppression: TODO SERVER-49324

  smhasher:
    homepage_url: https://github.com/aappleby/smhasher
    open_hub_url: https://www.openhub.net/p/smhasher
    release_monitoring_id: -1
    local_directory_path: src/third_party/murmurhash3
    team_owner: "Execution"

  "Snowball Stemming Algorithms":
    homepage_url: https://snowballstem.org/
    open_hub_url: https://www.openhub.net/p/Snowball_Stemming_Algorithms
    release_monitoring_id: 7853
    local_directory_path: src/third_party/libstemmer_c
    team_owner: "Query"
    upgrade_suppression: TODO SERVER-51478

  subunit:
    homepage_url: https://launchpad.net/subunit
    open_hub_url: N/A
    release_monitoring_id: 85461
    local_directory_path: src/third_party/wiredtiger/test/3rdparty/python-subunit-0.0.16
    is_test_only: true
    team_owner: "Wiredtiger"

  timelib:
    homepage_url: https://github.com/derickr/timelib
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/timelib-2021.06
    team_owner: "Query"
    # Note: Not in Black Duck

  unicode:
    homepage_url: http://www.unicode.org
    open_hub_url: N/A
    release_monitoring_id: 5045
    local_directory_path: src/third_party/unicode-8.0.0
    team_owner: "Query"

  valgrind:
    homepage_url: https://valgrind.org/
    open_hub_url: https://www.openhub.net/p/valgrind
    release_monitoring_id: 13639
    local_directory_path: src/third_party/valgrind
    team_owner: "Decision Automation Group"

  testtools:
    homepage_url: https://launchpad.net/testtools
    open_hub_url: https://www.openhub.net/p/python-testtools
    release_monitoring_id: 4047
    local_directory_path: src/third_party/wiredtiger/test/3rdparty/testtools-0.9.34
    is_test_only: true
    team_owner: "Wiredtiger"

  yhirose/cpp-peglib:
    homepage_url: https://github.com/yhirose/cpp-peglib
    open_hub_url: N/A
    release_monitoring_id: -1
    local_directory_path: src/third_party/peglib
    team_owner: "Query"
    # Note: peglib exists in Black Duck, but not OpenHub
    upgrade_suppression: TODO SERVER-57940

  zlib:
    homepage_url: https://www.zlib.net/
    open_hub_url: https://www.openhub.net/p/zlib
    release_monitoring_id: 5303
    local_directory_path: src/third_party/zlib-1.2.11
    team_owner: "Execution"

  zstd:
    homepage_url: http://www.zstd.net/
    open_hub_url: https://www.openhub.net/p/zstd
    release_monitoring_id: 12083
    local_directory_path: src/third_party/zstandard-1.4.4
    team_owner: "Execution"
    upgrade_suppression: TODO SERVER-49230
